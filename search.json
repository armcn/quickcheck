[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2025). quickcheck: Property Based Testing. R package version 0.1.3, https://github.com/armcn/quickcheck.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2025},   note = {R package version 0.1.3},   url = {https://github.com/armcn/quickcheck}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = function(a) expect_equal(a, a + 0)   ) }) #> Test passed 😀  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = function(a, b) expect_equal(a + b, b + a)   ) }) #> Test passed 😀  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = function(a, b, c) expect_equal(a + (b + c), (a + b) + c)   ) }) #> Test passed 🎉 library(dplyr, warn.conflicts = FALSE)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = function(a) {       distinct(a) %>% expect_equal(a)     }   ) }) #> Test passed 🥳  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = function(a) {       bind_rows(a, a) %>%         distinct() %>%         expect_equal(a)     }   ) }) #> Test passed 😀  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = function(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) %>% expect_equal(unique_rows)     }   ) }) #> Test passed 😀"},{"path":"/index.html","id":"quickcheck-generators","dir":"","previous_headings":"","what":"Quickcheck generators","title":"Property Based Testing","text":"Many generators provided quickcheck. examples.","code":""},{"path":"/index.html","id":"atomic-vectors","dir":"","previous_headings":"Quickcheck generators","what":"Atomic vectors","title":"Property Based Testing","text":"","code":"integer_(len = 10) %>% show_example() #>  [1]  1645 -8572 -9846  5213 -4605 -3086   296 -7463  4333  3471 character_alphanumeric(len = 10) %>% show_example() #>  [1] \"V6\"        \"P\"         \"G\"         \"pu\"        \"aEIIEU6d3\" \"jDiV4\"     \"6\"         \"hqHX\"      \"Pe2Eejmkk\" \"xU3dKuw\" posixct_(len = 10, any_na = TRUE) %>% show_example() #>  [1] \"1518-05-23 19:00:11 LMT\" \"2037-05-06 23:31:16 EDT\" NA                        NA                        #>  [5] NA                        \"1406-01-03 06:03:02 LMT\" \"2002-12-12 22:52:53 EST\" \"1196-12-09 06:22:30 LMT\" #>  [9] \"0631-11-28 09:04:35 LMT\" \"2682-01-16 11:51:32 EST\""},{"path":"/index.html","id":"lists","dir":"","previous_headings":"Quickcheck generators","what":"Lists","title":"Property Based Testing","text":"","code":"list_(a = constant(NULL), b = any_undefined()) %>% show_example() #> $a #> NULL #>  #> $b #> [1] NA flat_list_of(logical_(), len = 3) %>% show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] FALSE"},{"path":"/index.html","id":"tibbles","dir":"","previous_headings":"Quickcheck generators","what":"Tibbles","title":"Property Based Testing","text":"","code":"tibble_(a = date_(), b = hms_(), rows = 5) %>% show_example() #> # A tibble: 5 × 2 #>   a          b               #>   <date>     <time>          #> 1 2971-02-26 15:59:18.485111 #> 2 1259-02-26 09:17:34.134997 #> 3 1719-12-02 02:35:26.647900 #> 4 2186-06-14 18:59:36.013421 #> 5 2005-05-16 22:58:25.777202 tibble_of(double_bounded(-10, 10), rows = 3, cols = 3) %>% show_example() #> # A tibble: 3 × 3 #>    ...1  ...2   ...3 #>   <dbl> <dbl>  <dbl> #> 1 -8.75 -1.33  3.63  #> 2  5.49 -5.71  0.755 #> 3  0     3.42 -3.07 any_tibble(rows = 3, cols = 3) %>% show_example() #> # A tibble: 3 × 3 #>          ...1 ...2            ...3      #>         <dbl> <time>          <list>    #> 1 -885519673. 14:05:05.882342 <chr [1]> #> 2 -293069776. 04:11:51.356973 <chr [1]> #> 3  -90043652. 21:32:00.080639 <chr [1]>"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used wrapping from_hedgehog. hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error: quickcheck generator can also converted hedgehog generator can used hedgehog functions.","code":"library(hedgehog)  is_even <-   function(a) a %% 2 == 0  gen_powers_of_two <-   gen.element(1:10) %>% gen.with(function(a) 2^a)  test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = function(a) is_even(a) %>% expect_true()   ) }) #> Test passed 😸 test_that(\"powers of two and integers are both numeric values\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     b = integer_(),     property = function(a, b) {       c(a, b) %>%         is.numeric() %>%         expect_true()     }   ) }) #> Test passed 🎉 test_that(\"composing hedgehog with quickcheck generators fails\", {   tibble_of(from_hedgehog(gen_powers_of_two)) %>% expect_error() }) #> Test passed 😀 gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) %>%   as_hedgehog() %>%   gen.with(function(a) 2^a)   test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = function(a) is_even(a) %>% expect_true()   ) }) #> Test passed 🎉"},{"path":"/index.html","id":"fuzz-tests","dir":"","previous_headings":"","what":"Fuzz tests","title":"Property Based Testing","text":"Fuzz testing special case property based testing property tested code doesn’t fail range inputs. example fuzz testing quickcheck. Let’s say want test purrr::map function won’t fail vector input.","code":"test_that(\"map won't fail with any vector as input\", {   for_all(     a = any_vector(),     property = function(a) purrr::map(a, identity) %>% expect_silent()   ) }) #> Test passed 😸"},{"path":"/index.html","id":"repeat-tests","dir":"","previous_headings":"","what":"Repeat tests","title":"Property Based Testing","text":"Repeat tests can used repeatedly test property holds true many calls function. different regular property based tests don’t require generators. function repeat_test call function many times ensure expectation passes cases. kind test can useful testing functions randomness.","code":"test_that(\"runif generates random numbers between a min and max value\", {   repeat_test(     property = function() {       random_number <- runif(1, min = 0, max = 10)       expect_true(random_number >= 0 && random_number <= 10)     }   ) }) #> Test passed 😀"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Any atomic vector generator — any_atomic","title":"Any atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any atomic vector generator — any_atomic","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any atomic vector generator — any_atomic","text":"","code":"any_atomic() %>% show_example() #> [1] FALSE  TRUE  TRUE  TRUE FALSE any_atomic(len = 10L, any_na = TRUE) %>% show_example() #>  [1] NA                        \"961-02-26 14:47:08 UTC\"  #>  [3] \"587-01-03 22:00:00 UTC\"  \"190-12-25 15:23:24 UTC\"  #>  [5] \"2926-08-24 01:52:53 UTC\" \"2035-02-21 10:17:43 UTC\" #>  [7] \"587-11-14 06:42:04 UTC\"  NA                        #>  [9] \"1590-08-21 15:24:53 UTC\" NA"},{"path":"/reference/any_data.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data.table generator — any_data.table","title":"Any data.table generator — any_data.table","text":"Generate data.tables.","code":""},{"path":"/reference/any_data.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data.table generator — any_data.table","text":"","code":"any_data.table(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data.table generator — any_data.table","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data.table generator — any_data.table","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_data.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data.table generator — any_data.table","text":"","code":"any_data.table(rows = 3L, cols = 3L) %>% show_example() #>               ...1                ...2       ...3 #>              <hms>              <POSc>      <num> #> 1: 16:19:25.395917 2296-10-19 12:52:29 -369516495 #> 2: 11:58:19.761905 2309-01-10 05:36:54   63147082 #> 3: 15:24:00.454024 2972-02-20 05:17:32  558617252"},{"path":"/reference/any_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data frame generator — any_data_frame","title":"Any data frame generator — any_data_frame","text":"Generate data.frames.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data frame generator — any_data_frame","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data frame generator — any_data_frame","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = 3L, cols = 3L) %>% show_example() #>         ...1     ...2       ...3 #> 1 -616963937    $uAQ6 2094-02-26 #> 2          0    gZ\\\\  2076-11-11 #> 3   89206787 AC26oZ3k 1998-06-20"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any flat homogeneous list generator — any_flat_homogeneous_list","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic scalar class.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() %>% show_example() #> [[1]] #> [1] \"y&(}c-\\\"8\" #>  #> [[2]] #> [1] \"Av\" #>  #> [[3]] #> [1] \"]V#i\" #>  any_flat_homogeneous_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [1] -940322911 #>  #> [[2]] #> [1] 0 #>  #> [[3]] #> [1] -304758978 #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] 303875654 #>  #> [[6]] #> [1] 0 #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] -97803739 #>  #> [[9]] #> [1] -239386193 #>  #> [[10]] #> [1] -439213049 #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any flat list generator — any_flat_list","title":"Any flat list generator — any_flat_list","text":"Generate lists element atomic scalar.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any flat list generator — any_flat_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any flat list generator — any_flat_list","text":"","code":"any_flat_list() %>% show_example() #> [[1]] #> [1] \"1873-07-07 20:51:38 UTC\" #>  #> [[2]] #> [1] \"1149-08-01\" #>  #> [[3]] #> [1] \"2265-01-29\" #>  any_flat_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] \"2801-09-25\" #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] TRUE #>  #> [[5]] #> 18:51:19.50444 #>  #> [[6]] #> [1] 0 #>  #> [[7]] #> [1] F<2I\\\\`3 #> Levels: F<2I\\\\`3 #>  #> [[8]] #> 03:49:11.39228 #>  #> [[9]] #> [1] \"{8NVr&\" #>  #> [[10]] #> [1] \"@]:Y@1f0\" #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any list generator — any_list","title":"Any list generator — any_list","text":"Generate lists containing lists atomic vectors.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any list generator — any_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any list generator — any_list","text":"","code":"any_list() %>% show_example() #> [[1]] #> [1] -884086358 #>  #> [[2]] #> [1] 881882544 #>  #> [[3]] #> [1] -491272055 #>  any_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [[1]]$a #> [1] \"2499-09-20\" NA           \"2952-05-10\" \"1005-09-11\" NA           #> [6] \"1108-11-11\" #>  #> [[1]]$b #> 02:34:50.529544 #> 00:05:44.439508 #> 08:32:19.779608 #>  #>  #> [[2]] #> [[2]]$a #> [1] -629545214 -997383408          0 -837441289         NA -365262263  396609275 #> [8]         NA -847081338 #>  #> [[2]]$b #> 07:17:40.806859 #> 23:23:43.045356 #>              NA #>  #>  #> [[3]] #> [[3]]$a #> [1] TRUE   NA TRUE TRUE #>  #> [[3]]$b #> [1]   NA TRUE TRUE #>  #>  #> [[4]] #> [[4]]$a #> 10:15:27.442804 #>  #> [[4]]$b #> [1]  1  1 NA  1 #>  #>  #> [[5]] #> [[5]]$a #> [1] 2454 #>  #> [[5]]$b #>  [1]  335453450 -113521002         NA  132472284         NA         NA #>  [7]   -3222101 -968266140         NA  -65043271 #>  #>  #> [[6]] #> [[6]]$a #> [1]  1  1  1  1 NA  1  1 #>  #> [[6]]$b #> [1]  631793426         NA         NA -408063327 #>  #>  #> [[7]] #> [[7]]$a #> [1] \"1335-07-09 01:42:27 UTC\" \"1579-01-11 14:09:46 UTC\" #> [3] \"1324-05-15 23:20:32 UTC\" \"2338-05-27 06:28:19 UTC\" #> [5] \"510-08-23 00:26:29 UTC\"  \"124-06-13 23:00:42 UTC\"  #>  #> [[7]]$b #> 07:30:24.483558 #> 21:27:45.417999 #> 22:53:03.829084 #>              NA #> 14:11:43.342695 #>              NA #> 05:10:03.279430 #>              NA #>  #>  #> [[8]] #> [[8]]$a #>  [1]  467859636 -595068736 -399317824 -158914861         NA  448554142 #>  [7] -198047964 -511100523 -159704710 -354239552 #>  #> [[8]]$b #> [1]         NA -777798024  -93949915  593803027         NA   89391198 #>  #>  #> [[9]] #> [[9]]$a #> [1] \"1054-03-20 19:25:35 UTC\" \"2347-11-06 18:56:38 UTC\" #> [3] \"630-12-03 12:28:05 UTC\"  #>  #> [[9]]$b #> [1] FALSE  TRUE    NA    NA FALSE    NA    NA    NA  TRUE #>  #>  #> [[10]] #> [[10]]$a #> [1] \"1957-08-31\" \"2219-05-03\" NA           #>  #> [[10]]$b #> [1] -5265  7039 -3798  4796    NA #>  #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Any tibble generator — any_tibble","title":"Any tibble generator — any_tibble","text":"Generate tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any tibble generator — any_tibble","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble(rows = 3L, cols = 3L) %>% show_example() #> # A tibble: 3 × 3 #>   ...1       ...2       ...3             #>   <date>     <date>     <list>           #> 1 2509-02-11 1557-12-16 <named list [2]> #> 2 1786-10-05 1729-08-03 <named list [2]> #> 3 1300-02-08 1729-10-26 <named list [2]>"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Any undefined value generator — any_undefined","title":"Any undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any undefined value generator — any_undefined","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any undefined value generator — any_undefined","text":"","code":"any_undefined() %>% show_example() #> [1] Inf"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Any vector generator — any_vector","title":"Any vector generator — any_vector","text":"Generate atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any vector generator — any_vector","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any vector generator — any_vector","text":"","code":"any_vector() %>% show_example() #> [1] \"1842-11-21 19:47:56 UTC\" \"2267-05-23 09:45:43 UTC\" #> [3] \"2293-02-08 04:25:38 UTC\" \"1885-03-13 02:32:40 UTC\" #> [5] \"978-03-11 19:36:29 UTC\"  \"2755-06-27 17:00:24 UTC\" #> [7] \"1256-02-27 02:37:33 UTC\" any_vector(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [1] \":^_q/euI\" #>  #> [[2]] #> [1] NA #>  #> [[3]] #> [1] \"nGu\" #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] \")O%DBZV3\" #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] \"it/%5 }\" #>  #> [[8]] #> [1] \" z)|l\" #>  #> [[9]] #> [1] \"Gh2jO<%>c\" #>  #> [[10]] #> [1] \"V 1da{JWk\" #>"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, data.frames, tibbles, data.tables, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything(any_empty = TRUE, any_undefined = TRUE)"},{"path":"/reference/anything.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any R object generator — anything","text":"any_empty Whether empty vectors data frames allowed. any_undefined Whether undefined values allowed.","code":""},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator object.","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() %>% show_example() #> [[1]] #> [1] \"2940-07-05\" #>  #> [[2]] #> 05:01:13.192444 #>  #> [[3]] #> [1] -914490877 #>  #> [[4]] #> [1] n #> Levels: n #>  #> [[5]] #> [1] -174479700 #>  #> [[6]] #> [1] I #> Levels: I #>"},{"path":"/reference/as_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"Convert quickcheck generator hedgehog generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"as_hedgehog(generator)"},{"path":"/reference/as_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"generator quickcheck_generator object.","code":""},{"path":"/reference/as_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"quickcheck_generator object.","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"is_even <-   function(a) a %% 2L == 0L gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) %>%     as_hedgehog() %>%     hedgehog::gen.with(function(a) 2 ^ a) for_all(   a = from_hedgehog(gen_powers_of_two),   property = function(a) is_even(a) %>% testthat::expect_true() )"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_letters(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_numbers(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_alphanumeric(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_empty Whether empty character values allowed.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator object.","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() %>% show_example() #> [1] \"`stC/u<=\"   \"'[C!S&@s\"   \"!|5X\"       \"rI\"         \"U\"          #> [6] \"JrV'\"       \"PF;$\\\"Q`iJ\" \"{$\"         character_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] NA         NA         \" IICyL%\"  \"37/{s8a\"  \"=upZs\\\\\"  \"|qB48\"    #>  [7] \"4P&-s|h \" \"Vx'CV\"    NA         NA         character_(len = 10L, any_empty = TRUE) %>% show_example() #>  [1] \"!\"          \"5Uz^d\\\\+9*\" \"\"           \"R>]fzmU\"    \"\"           #>  [6] \"NxeHjML\"    \"\"           \"\"           \"h\"          \"\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator object.","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) %>% show_example() #> NULL"},{"path":"/reference/data.table_.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generators — data.table_","title":"data.table generators — data.table_","text":"Construct data.table generators similar way data.table::data.table.","code":""},{"path":"/reference/data.table_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generators — data.table_","text":"","code":"data.table_(..., rows = c(1L, 10L))"},{"path":"/reference/data.table_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generators — data.table_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data.table_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generators — data.table_","text":"quickcheck_generator object.","code":""},{"path":"/reference/data.table_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generators — data.table_","text":"","code":"data.table_(a = integer_()) %>% show_example() #>        a #>    <int> #> 1:  5227 data.table_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #>        a         b #>    <int>    <char> #> 1:  7216      }FjE #> 2: -5181  }M@m;~]n #> 3: -2982  jUD|)I/+ #> 4: -4530       pC~ #> 5:  8810    jt%I`b"},{"path":"/reference/data.table_of.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generator with randomized columns — data.table_of","title":"data.table generator with randomized columns — data.table_of","text":"data.table generator randomized columns","code":""},{"path":"/reference/data.table_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generator with randomized columns — data.table_of","text":"","code":"data.table_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data.table_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generator with randomized columns — data.table_of","text":"... set unnamed generators. generated data.tables built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data.table_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generator with randomized columns — data.table_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/data.table_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generator with randomized columns — data.table_of","text":"","code":"data.table_of(logical_(), date_()) %>% show_example() #>      ...1       ...2 #>    <lgcl>     <Date> #> 1:  FALSE 2736-05-21 #> 2:  FALSE 1402-12-13 #> 3:   TRUE 2165-04-10 #> 4:   TRUE 2861-05-18 #> 5:  FALSE 1254-12-07 data.table_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #>         ...1      ...2   ...3       ...4  ...5 #>       <char>    <fctr> <lgcl>      <num> <int> #>  1:       c'       tcS   TRUE  743837357 -6400 #>  2:   +N]&n_     EQz+Z   TRUE -276399987     0 #>  3:       }#    ejE'\")  FALSE  953490380  4038 #>  4:       #*   ^w6`Jj2   TRUE          0    46 #>  5:  dNF!%3/      Z~z6   TRUE          0 -2748 #>  6:      4N8      h 4V   TRUE   36600400  1903 #>  7:   _MC1m-         M  FALSE  712263728  4392 #>  8: _h`qB=\\\\        P$  FALSE -936497377   440 #>  9: oo)j9Se`        5S  FALSE -997568300  8066 #> 10:        + N6PL?)5gS  FALSE -494893717 -2018"},{"path":"/reference/data_frame_.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generators — data_frame_","title":"Data frame generators — data_frame_","text":"Construct data frame generators similar way base::data.frame.","code":""},{"path":"/reference/data_frame_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(..., rows = c(1L, 10L))"},{"path":"/reference/data_frame_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generators — data_frame_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data_frame_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generators — data_frame_","text":"quickcheck_generator object.","code":""},{"path":"/reference/data_frame_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(a = integer_()) %>% show_example() #>       a #> 1  9671 #> 2  4660 #> 3  3371 #> 4  7003 #> 5 -8117 #> 6 -3130 #> 7     0 data_frame_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #>       a       b #> 1 -7938    Mc8W #> 2  8649 k|P@vvH #> 3  8944    SGw' #> 4  3072   mgVY' #> 5     0      bM"},{"path":"/reference/data_frame_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generator with randomized columns — data_frame_of","title":"Data frame generator with randomized columns — data_frame_of","text":"Data frame generator randomized columns","code":""},{"path":"/reference/data_frame_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generator with randomized columns — data_frame_of","text":"","code":"data_frame_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data_frame_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generator with randomized columns — data_frame_of","text":"... set unnamed generators. generated data frames built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data_frame_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generator with randomized columns — data_frame_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/data_frame_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generator with randomized columns — data_frame_of","text":"","code":"data_frame_of(logical_(), date_()) %>% show_example() #>    ...1       ...2  ...3  ...4 #> 1  TRUE 2260-03-10  TRUE  TRUE #> 2  TRUE 2634-01-12  TRUE FALSE #> 3 FALSE 2855-02-04 FALSE FALSE #> 4  TRUE 1703-03-13  TRUE FALSE #> 5  TRUE 2878-07-24  TRUE FALSE #> 6  TRUE 2126-07-03  TRUE  TRUE #> 7  TRUE 2344-09-12 FALSE FALSE #> 8  TRUE 2000-06-17  TRUE  TRUE data_frame_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #>     ...1            ...2       ...3  ...4            ...5 #> 1  FALSE 19:51:42.098083 -915086967  TRUE 15:04:18.213348 #> 2  FALSE 13:48:33.028629  397175604  TRUE 05:34:21.045055 #> 3   TRUE 23:35:06.137909  373899705 FALSE 02:22:33.579206 #> 4   TRUE 02:36:00.014100  412865603 FALSE 11:37:48.120076 #> 5   TRUE 09:43:49.613527 -470052447  TRUE 17:20:57.290634 #> 6   TRUE 05:58:49.220943  456814791 FALSE 12:20:34.200336 #> 7   TRUE 14:48:55.353276  227404026  TRUE 02:14:22.890544 #> 8   TRUE 05:08:22.231580  402899707  TRUE 04:54:21.013874 #> 9   TRUE 07:34:19.138893 -355332551 FALSE 00:47:36.365287 #> 10  TRUE 09:50:55.971901  350473005  TRUE 20:15:23.620469"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), any_na = FALSE)  date_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  date_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  date_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator object.","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() %>% show_example() #> [1] \"2386-03-06\" \"2460-10-24\" \"1194-10-16\" \"1907-07-24\" \"2847-03-18\" #> [6] \"2354-02-01\" \"1405-04-19\" \"2949-10-20\" \"1881-07-24\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) %>% show_example() #> [1] \"2020-01-03\" \"2020-01-01\" \"2020-01-09\" date_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] \"2878-12-07\" \"2391-05-18\" \"2742-12-20\" NA           \"2891-05-23\" #>  [6] \"2413-09-09\" \"2487-01-12\" \"1241-07-18\" \"1020-08-16\" NA"},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE )  double_left_bounded(   left,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_nan Whether NaN values allowed. any_inf Whether Inf/-Inf values allowed. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator object.","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() %>% show_example() #> [1] -968483851 -669731608 -504100505          0  921076849  180909246 -163405034 double_(big_dbl = TRUE) %>% show_example() #> [1] -5.804423e+307  8.317088e+307  4.630117e+307  3.488433e+307 double_bounded(left = -5, right = 5) %>% show_example() #> [1]  1.646118 -4.611604  2.141787  1.061181  2.963768  1.155964  2.293829 double_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]   85571011 -157872294         NA -877696476  829550683 -892093692 #>  [7]  709069796 -375822419         NA         NA double_(len = 10L, any_nan = TRUE, any_inf = TRUE) %>% show_example() #>  [1]        Inf  203275205 -601960610 -321441341        NaN        Inf #>  [7] -907525519       -Inf  187608927       -Inf"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal length vector generator — equal_length","title":"Equal length vector generator — equal_length","text":"Generates equal length vectors contained list.","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(..., len = c(1L, 10L))"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal length vector generator — equal_length","text":"... set named unnamed vector generators. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal length vector generator — equal_length","text":"quickcheck_generator object.","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(integer_(), double_()) %>% show_example() #> [[1]] #> [1] -4800  8834 -9794  -340 -4181 #>  #> [[2]] #> [1] -237752855 -291463515  -22730364  713670346  210594929 #>  equal_length(a = logical_(), b = character_(), len = 5L) %>% show_example() #> $a #> [1]  TRUE  TRUE FALSE  TRUE  TRUE #>  #> $b #> [1] \"M@\"        \"Do D<bj_(\" \"I7eMW\"     \"q$525\"     \"`NiMq\"     #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator object.","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() %>% show_example() #> [1] OTZ@D #> Levels: OTZ@D factor_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  1  1  1  1  1  1 NA NA  1  1"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"Generate flat lists values coming single generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator quickcheck_generator object. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) %>% show_example() #> [[1]] #> [1] 7764 #>  #> [[2]] #> [1] 527 #>  #> [[3]] #> [1] 9959 #>  #> [[4]] #> [1] 628 #>  #> [[5]] #> [1] 9702 #>  #> [[6]] #> [1] 3060 #>  #> [[7]] #> [1] 0 #>  #> [[8]] #> [1] -8144 #>  #> [[9]] #> [1] -1895 #>  #> [[10]] #> [1] -3418 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes values generator calls expectation . function must parameters matching generator names. tests number tests run. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(len = 1L),   b = numeric_(len = 1L),   property = function(a, b) testthat::expect_equal(a + b, b + a),   tests = 10L )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen object.","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator object.","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"is_even <-   function(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) %>% hedgehog::gen.with(function(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = function(a) is_even(a) %>% testthat::expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), any_na = FALSE)  hms_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  hms_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  hms_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator object.","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() %>% show_example() #> 23:30:08.301169 #> 18:35:37.631957 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) %>% show_example() #> 07:03:00.243728 #> 03:02:12.006305 #> 03:42:25.124698 #> 04:35:22.816917 #> 04:56:36.718125 #> 02:23:58.039427 #> 06:00:29.415692 #> 05:29:00.445834 #> 10:42:21.357244 #> 09:13:01.564168 hms_(len = 10L, any_na = TRUE) %>% show_example() #> 06:21:21.207437 #> 20:42:18.392880 #> 14:03:15.997426 #>              NA #> 17:31:33.662637 #> 04:27:16.567437 #>              NA #> 12:29:44.878704 #> 17:11:49.684513 #>              NA"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  integer_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_positive(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_negative(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator object.","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() %>% show_example() #> [1] -2298 -5205  4838  2083  1889 -2968     0  7864 integer_(big_int = TRUE) %>% show_example() #> [1]   497496939  1697796661   128350288 -1658385106 integer_bounded(left = -5L, right = 5L) %>% show_example() #> [1] -1  4 -2  2 integer_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  1863  2544    NA -6266 -1779    NA  1590  9751 -4503    NA"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"Generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... set named unnamed generators.","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator object.","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) %>% show_example() #> [[1]] #> [1] -2139     0 -2209 -7620  7327  1820 -7147  3433 #>  #> [[2]] #>  [1] FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE #>  list_(a = any_vector(), b = any_vector()) %>% show_example() #> $a #> [1]  9450  5461 -4350     0 #>  #> $b #> [1] \"101-03-08 09:26:43 UTC\"  \"1757-11-26 06:39:55 UTC\" #> [3] \"1426-08-17 09:13:26 UTC\" \"1385-12-24 09:28:29 UTC\" #> [5] \"1816-09-17 15:41:12 UTC\" \"2797-05-16 12:48:16 UTC\" #> [7] \"1066-12-14 06:46:18 UTC\" #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"Generate lists values coming single generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator quickcheck_generator object. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) %>% show_example() #> [[1]] #> [1]     0  9155  8822 -8460 -8421     0 #>  #> [[2]] #> [1] -2948 #>  #> [[3]] #> [1]     0 -7876 -8680 -6033 -2368  2060 #>  #> [[4]] #> [1] -1442 -7610 -1489  5858 #>  #> [[5]] #> [1] 4310 #>  #> [[6]] #> [1] -3385 -5248 -2283 #>  #> [[7]] #> [1]  6524 -5021 -1283 -3807  8839     0 #>  #> [[8]] #> [1]   483  7879 -6753  7068   -87 -6836 -7690 #>  #> [[9]] #> [1]  9370  3047 -1392 -4576  -516   505 #>  #> [[10]] #> [1] -1086 -3091  6562  8453   600 -2467  3854 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator object.","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() %>% show_example() #> [1]  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE logical_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE    NA FALSE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  numeric_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_positive(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_negative(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator object.","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() %>% show_example() #>  [1]  5576     0  8807     0 -8232 -5011 -3918 -8639 -3960 -7239 numeric_(big_num = TRUE) %>% show_example() #> [1]  1609121792 -1439161337  -653921178 numeric_bounded(left = -5L, right = 5L) %>% show_example() #> [1] -3  0 -4 -4 numeric_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  5248    NA    NA -7010     0 -9208 -2732    NA -9412  6059"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... set unnamed generators. prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) %>% show_example() #>  [1] -2425 -6980 -7116  8755 -2385 -6147 -4026 -3311   171  9779 one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) %>% show_example() #> [1]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), any_na = FALSE)  posixct_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  posixct_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  posixct_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator object.","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() %>% show_example() #> [1] \"2796-08-18 05:30:47 UTC\" \"875-03-04 06:08:36 UTC\"  #> [3] \"57-05-05 01:05:35 UTC\"   \"1479-12-14 14:17:37 UTC\" #> [5] \"1670-11-12 04:55:11 UTC\" \"650-07-13 10:07:09 UTC\"  #> [7] \"1694-11-05 14:28:59 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) %>% show_example() #>  [1] \"2020-07-22 14:24:26 UTC\" \"2020-02-13 14:03:17 UTC\" #>  [3] \"2020-12-10 11:45:46 UTC\" \"2020-05-19 18:19:35 UTC\" #>  [5] \"2020-08-03 23:46:01 UTC\" \"2020-04-03 12:28:14 UTC\" #>  [7] \"2020-06-05 10:46:24 UTC\" \"2020-04-29 07:29:48 UTC\" #>  [9] \"2020-04-06 00:19:11 UTC\" \"2020-05-26 19:57:09 UTC\" posixct_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] \"576-07-14 09:03:01 UTC\"  \"2785-04-19 21:42:49 UTC\" #>  [3] \"2123-02-04 16:33:41 UTC\" \"1176-09-15 14:19:00 UTC\" #>  [5] \"1445-09-25 04:18:16 UTC\" \"1710-04-05 10:27:51 UTC\" #>  [7] NA                        \"985-08-07 10:39:34 UTC\"  #>  [9] NA                        NA"},{"path":"/reference/repeat_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly test properties of a function — repeat_test","title":"Repeatedly test properties of a function — repeat_test","text":"Repeatedly test properties function","code":""},{"path":"/reference/repeat_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(property, tests = getOption(\"quickcheck.tests\", 100L))"},{"path":"/reference/repeat_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly test properties of a function — repeat_test","text":"property function parameters includes expectation. tests number tests run.","code":""},{"path":"/reference/repeat_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly test properties of a function — repeat_test","text":"testthat expectation object.","code":""},{"path":"/reference/repeat_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(   property = function() {     num <- stats::runif(1, min = 0, max = 10)     testthat::expect_true(num >= 0 && num <= 10)   } )"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator quickcheck_generator object.","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() %>% show_example() #> [1]  TRUE FALSE  TRUE FALSE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way tibble::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator object.","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) %>% show_example() #> # A tibble: 9 × 1 #>       a #>   <int> #> 1  6916 #> 2 -6596 #> 3  5686 #> 4 -7209 #> 5  1235 #> 6  4013 #> 7 -6390 #> 8 -7864 #> 9  2139 tibble_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #> # A tibble: 5 × 2 #>       a b        #>   <int> <chr>    #> 1 -2302 )Bk9     #> 2  5849 :+eKKA   #> 3 -6166 i dwHiHU #> 4  2462 tHxNX    #> 5 -5884 }"},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) %>% show_example() #> # A tibble: 9 × 3 #>   ...1       ...2  ...3  #>   <date>     <lgl> <lgl> #> 1 1788-11-18 TRUE  TRUE  #> 2 1861-08-21 TRUE  TRUE  #> 3 2938-11-12 FALSE FALSE #> 4 1782-01-31 TRUE  TRUE  #> 5 2087-08-15 TRUE  FALSE #> 6 2786-09-22 TRUE  TRUE  #> 7 1233-08-08 TRUE  TRUE  #> 8 1947-03-26 FALSE TRUE  #> 9 1728-11-07 FALSE FALSE tibble_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #> # A tibble: 10 × 5 #>    ...1                ...2     ...3 ...4        ...5 #>    <dttm>              <chr>   <int> <date>     <int> #>  1 2311-10-24 23:03:52 g-5xF   -5761 2844-09-08  9381 #>  2 2131-03-04 06:19:54 {        2874 2578-10-21     0 #>  3 1543-06-03 04:01:18 %_      -2373 1465-03-13  -391 #>  4 237-12-27 05:27:39  dj9;&7c  6670 2037-05-09 -6748 #>  5 15-11-21 01:52:27   ;VT      1893 2795-06-06  1014 #>  6 1401-08-09 21:58:56 M'E01m  -3268 1104-02-17  4938 #>  7 748-11-15 22:53:42  ^(t     -9728 2332-12-30  8596 #>  8 2747-11-25 11:57:53 P/^     -1547 2352-08-18  2837 #>  9 34-04-08 11:10:52   5iBQ^@      0 2095-01-18   404 #> 10 1040-09-06 11:02:55 |R          0 1202-07-30 -5476"},{"path":"/news/index.html","id":"quickcheck-013","dir":"Changelog","previous_headings":"","what":"quickcheck 0.1.3","title":"quickcheck 0.1.3","text":"CRAN release: 2023-10-11","code":""},{"path":"/news/index.html","id":"internal-changes-0-1-3","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"quickcheck 0.1.3","text":"Prevented future failing test R 4.4.0 .atomic change.","code":""},{"path":"/news/index.html","id":"quickcheck-012","dir":"Changelog","previous_headings":"","what":"quickcheck 0.1.2","title":"quickcheck 0.1.2","text":"CRAN release: 2022-03-17","code":""},{"path":"/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"quickcheck 0.1.2","text":"Fixed bug date generator any_na = TRUE","code":""},{"path":"/news/index.html","id":"quickcheck-011","dir":"Changelog","previous_headings":"","what":"quickcheck 0.1.1","title":"quickcheck 0.1.1","text":"CRAN release: 2022-03-11","code":""},{"path":"/news/index.html","id":"internal-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"quickcheck 0.1.1","text":"Now doesn’t require R >= 4.1","code":""},{"path":"/news/index.html","id":"quickcheck-010","dir":"Changelog","previous_headings":"","what":"quickcheck 0.1.0","title":"quickcheck 0.1.0","text":"CRAN release: 2022-02-10","code":""},{"path":"/news/index.html","id":"major-breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Major breaking changes","title":"quickcheck 0.1.0","text":"default length vector generators changed 1 range 1 10. parameters form frac_ replaced any_, take logical value instead double value.","code":""},{"path":"/news/index.html","id":"features-0-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"quickcheck 0.1.0","text":"New character_letters generates character vectors letters. New character_numbers generates character vectors numbers. New character_alphanumeric generates character vectors letters numbers. New flat_list_of generates lists atomic scalars. New data_frame_ generate data.frames. New data_frame_of generate data.frames. New data.table_ generate data.tables. New data.table_of generate data.tables. New anything generates R object. New any_flat_homogeneous_list generates flat lists homogeneous elements. New any_data_frame generates data.frames. New any_data.table generates data.tables. New any_undefined generates undefined values. New equal_length generates equal length vectors. New from_hedgehog converts hedgehog quickcheck generator. New as_hedgehog converts quickcheck hedgehog generator. New repeat_test tests property repeatedly.","code":""},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
