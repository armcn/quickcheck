[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Examples.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing +","title":"Examples","text":"","code":"test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1L),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     c = numeric_(len = 1L),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           })"},{"path":"/articles/Examples.html","id":"testing-baserev","dir":"Articles","previous_headings":"","what":"Testing base::rev","title":"Examples","text":"","code":"test_that(\"reverse of reverse is identity\", {   for_all(     a = any_vector(len = c(1L, 10L)),     property = \\(a) a |> rev() |> rev() |> expect_equal(a)   ) })  test_that(\"reverse of concatenation is flipped concatenation of reversed\", {   for_all(     a = integer_(len = c(1L, 10L)),     b = integer_(len = c(1L, 10L)),     property = \\(a, b) rev(c(a, b)) |> expect_equal(c(rev(b), rev(a)))   ) })"},{"path":"/articles/Examples.html","id":"testing-stringrstr_c","dir":"Articles","previous_headings":"","what":"Testing stringr::str_c","title":"Examples","text":"","code":"test_that(\"str_c does nothing with a single input string\", {   for_all(     a = character_(len = 1L),     property = \\(a) str_c(a) |> expect_equal(a)   ) })  test_that(\"str_c returns a single string with multiple input strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     c = character_(len = 1L),     property = \\(a, b, c) str_c(a, b, c) |> length() |> expect_equal(1L)   ) })  test_that(\"concatenation of strings always contains the original strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     property = \\(a, b) {       str_c(a, b) |> str_detect(fixed(a)) |> expect_true()       str_c(a, b) |> str_detect(fixed(b)) |> expect_true()     }   ) })"},{"path":"/articles/Examples.html","id":"testing-dplyrdistinct","dir":"Articles","previous_headings":"","what":"Testing dplyr::distinct","title":"Examples","text":"","code":"test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) library(dplyr)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1] -750208318  721028772  445708055  196484240  546529977 -931505087          0 #> [8]  792481910  -65674377 any_atomic(len = 10L, frac_na = 0.5) |> show_example() #>              NA #> 21:22:26.564598 #> 22:12:48.650102 #>              NA #>              NA #>              NA #> 17:32:45.412554 #> 03:33:51.886225 #>              NA #>              NA"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] 1594 #>  #> [[2]] #> [1] \"`@/x6\" #>  #> [[3]] #> [1] \"P2\" #>  #> [[4]] #> [1] -4688 #>  #> [[5]] #> [1] \"1802-07-15 22:44:53 UTC\" #>  #> [[6]] #> [1] -486 #>  #> [[7]] #> [1] y2 #> Levels: y2 #>  any_flat_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] \"155-09-10 01:16:16 UTC\" #>  #> [[3]] #> [1] \"1234-07-14\" #>  #> [[4]] #> [1] \"!>\" #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] 639292399 #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] 0 #>  #> [[9]] #> NA #>  #> [[10]] #> [1] 6733 #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [[1]]$a #> [1] \"271-12-08 00:02:22 UTC\"  \"2837-07-13 18:11:28 UTC\" #> [3] \"2459-02-12 09:03:43 UTC\" #>  #> [[1]]$b #> [1] p8|~Wxh  v3H7/@N. #> Levels: p8|~Wxh v3H7/@N. #>  #>  #> [[2]] #> [[2]]$a #> [1] \"1607-11-11\" \"1246-05-21\" \"1523-08-06\" \"1838-08-21\" \"1022-06-11\" #> [6] \"2224-07-10\" \"1734-09-05\" \"2056-02-02\" #>  #> [[2]]$b #> 07:34:12.285681 #>  #>  #> [[3]] #> [[3]]$a #> [1] \"1038-11-18 09:07:55 UTC\" \"870-12-11 05:11:47 UTC\"  #> [3] \"1897-11-15 17:33:38 UTC\" #>  #> [[3]]$b #> 13:36:52.282222 #>  #>  #> [[4]] #> [[4]]$a #> [1] \"1103-03-28\" \"2728-02-28\" #>  #> [[4]]$b #> 05:03:00.943258 #> 03:07:24.529703 #> 15:36:59.700042 #> 00:53:06.604151 #> 07:29:40.023099 #> 19:36:26.058836 #>  #>  #> [[5]] #> [[5]]$a #>  [1]          0  175896303  609550854 -231508716  414653376  601386263 #>  [7]  -40868828  715954055  945725629 -165117242 #>  #> [[5]]$b #> [1] -731738003 -494821203  538494095 #>  #>  #> [[6]] #> [[6]]$a #> 02:41:49.468852 #> 10:38:56.501975 #> 11:59:05.188028 #> 03:48:21.420629 #> 17:22:06.529691 #> 09:28:01.304662 #> 03:47:40.069391 #> 12:38:02.819385 #> 00:03:46.167489 #> 14:52:05.819541 #>  #> [[6]]$b #> [1] \"1452-07-08\" \"1830-09-26\" \"2240-09-28\" #>  #>  any_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [[1]]$a #>              NA #>              NA #> 01:45:58.211736 #>              NA #>              NA #> 22:49:40.409186 #> 00:57:45.210661 #>  #> [[1]]$b #>  [1]    NA  TRUE    NA    NA    NA FALSE    NA    NA    NA    NA #>  #>  #> [[2]] #> [[2]]$a #> [1] p_n8<d #> Levels: p_n8<d #>  #> [[2]]$b #> [1]      NA -294944  -10969      NA  -50838 #>  #>  #> [[3]] #> [[3]]$a #>              NA #> 16:10:17.293445 #>              NA #> 15:25:49.820502 #> 17:35:53.022320 #>              NA #>  #> [[3]]$b #> [1] NA NA NA #>  #>  #> [[4]] #> [[4]]$a #> [1] \"302-11-22 08:48:00 UTC\"  NA                        #> [3] NA                        \"2262-11-11 20:30:18 UTC\" #> [5] \"669-11-14 03:56:24 UTC\"  NA                        #>  #> [[4]]$b #> [1]  TRUE FALSE  TRUE    NA FALSE FALSE FALSE #>  #>  #> [[5]] #> [[5]]$a #> [1] \"1771-02-24\" NA           #>  #> [[5]]$b #> [1] -20998223        NA #>  #>  #> [[6]] #> [[6]]$a #> [1]  TRUE  TRUE FALSE #>  #> [[6]]$b #> [1]    NA    NA    NA    NA  3842  8055  1116 -2370 #>  #>  #> [[7]] #> [[7]]$a #> [1]  1 NA #>  #> [[7]]$b #> [1] FALSE FALSE    NA #>  #>  #> [[8]] #> [[8]]$a #> [1] NA NA #>  #> [[8]]$b #> [1] FALSE    NA  TRUE    NA  TRUE  TRUE    NA    NA  TRUE #>  #>  #> [[9]] #> [[9]]$a #> [1] NA NA NA NA  1 NA #>  #> [[9]]$b #> [1] \"O\"         NA          \"Qp8JB\"     NA          NA          \"G/tHfB7mN\" #> [7] NA          #>  #>  #> [[10]] #> [[10]]$a #> [1]  0 NA #>  #> [[10]]$b #> [1]          NA          NA          NA 10065609143 #>  #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 3 × 8 #>   ...1             ...2  ...3            ...4            ...5  ...6  ...7  ...8  #>   <list>           <fct> <time>          <time>          <lis> <fct> <lis> <fct> #> 1 <named list [2]> m'/S… 08:33:59.787021 14:28:03.925604 <dat… \"[gp… <nam… \"y=`… #> 2 <named list [2]> aUNY… 05:31:24.755937 18:39:15.732434 <chr… \"<Q\\… <nam… \"1\"   #> 3 <named list [2]> .'J[… 11:05:19.520228 05:13:54.861814 <int… \"b\"   <nam… \"\\\"%… any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 3 #>    ...1       ...2             ...3             #>    <list>     <list>           <list>           #>  1 <chr [7]>  <named list [2]> <named list [2]> #>  2 <date [3]> <named list [2]> <named list [2]> #>  3 <dttm [1]> <named list [2]> <named list [2]> #>  4 <dbl [7]>  <named list [2]> <named list [2]> #>  5 <int [3]>  <named list [2]> <named list [2]> #>  6 <dttm [4]> <named list [2]> <named list [2]> #>  7 <fct [8]>  <named list [2]> <named list [2]> #>  8 <fct [10]> <named list [2]> <named list [2]> #>  9 <date [7]> <named list [2]> <named list [2]> #> 10 <dbl [5]>  <named list [2]> <named list [2]> any_tibble(cols = 5L, frac_na = 0.5) |> show_example() #> # A tibble: 7 × 5 #>   ...1             ...2  ...3             ...4 ...5             #>   <list>           <lgl> <chr>           <dbl> <list>           #> 1 <named list [2]> FALSE O`SHY[`           NA  <named list [2]> #> 2 <named list [2]> TRUE  NA      -50077878258. <named list [2]> #> 3 <named list [2]> TRUE  {%1&;%& -34095528060. <named list [2]> #> 4 <named list [2]> TRUE  NA                NA  <named list [2]> #> 5 <named list [2]> NA    T                 NA  <named list [2]> #> 6 <named list [2]> FALSE w1                NA  <named list [2]> #> 7 <named list [2]> NA    )                 NA  <named list [2]>"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [[1]] #> [[1]]$a #> [1] jwV  L    #> Levels: jwV  L #>  #> [[1]]$b #> [1] 5445 #>  #>  #> [[2]] #> [[2]]$a #> [1] FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE #>  #> [[2]]$b #> [1] \"V&;x)>r1\" \"uB\"       #>  #>  #> [[3]] #> [[3]]$a #> 22:34:46.271679 #>  #> [[3]]$b #>  [1]  122454703  634114810   46561704 -863190860  280499612  307653152 #>  [7]  248735835 -172154209  317829658  -70328821 #>  #>  any_vector(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [[1]]$a #>  [1] NA       NA       NA       \"0uy1;D\" \"t%E1/#\" NA       \"XndL/J\" NA       #>  [9] NA       NA       #>  #> [[1]]$b #> [1] \"1856-05-04\" NA           \"2516-04-17\" \"1645-08-10\" NA           #> [6] NA           #>  #>  #> [[2]] #> [[2]]$a #> [1]    NA -3461  4892 -4639 -7011    NA     0    NA #>  #> [[2]]$b #> [1]          NA          NA          NA 26088675411 #>  #>  #> [[3]] #> [[3]]$a #> [1] \"361-10-06 05:15:11 UTC\" NA                       NA                       #> [4] NA                       #>  #> [[3]]$b #> [1] NA      \"0V_`S\" #>  #>  #> [[4]] #> [[4]]$a #> [1]  9617 -5065    NA    NA -9077 -7295  -736    NA  6534 #>  #> [[4]]$b #> [1] \"==U7Q-m\"  NA         \">KUc{BJ%\" NA         \"V=\"       NA         #>  #>  #> [[5]] #> [[5]]$a #> [1] -9912    NA  2786    NA    NA  2323    NA #>  #> [[5]]$b #>  [1] \"Po\"      NA        NA        \"!\"       NA        \"1Jo\"     \"b<L0BU=\" #>  [8] NA        \"@=\"      NA        #>  #>  #> [[6]] #> [[6]]$a #> [1]           NA           NA -32902743236 #>  #> [[6]]$b #> [1]      NA      NA      NA      NA      NA  -79860      NA      NA -127136 #>  #>  #> [[7]] #> [[7]]$a #> [1]           NA           NA           NA           NA  20592875891 #> [6]           NA -25310092510 #>  #> [[7]]$b #> [1]    NA    NA -9779     0  4301 -2906 #>  #>  #> [[8]] #> [[8]]$a #> [1]      NA  258062      NA -203741      NA  -41630      NA #>  #> [[8]]$b #> [1] \"b*w\"        \"-C4r\\\\IO_F\" \"`xd xgf~\"   NA           #>  #>  #> [[9]] #> [[9]]$a #> [1] \"2889-11-25\" \"2352-05-13\" \"1895-02-25\" \"2279-06-13\" NA           #> [6] NA           \"2702-10-04\" #>  #> [[9]]$b #>  [1]    NA  TRUE    NA FALSE  TRUE FALSE  TRUE  TRUE    NA  TRUE #>  #>  #> [[10]] #> [[10]]$a #> [1] 129196757        NA #>  #> [[10]]$b #> [1]    NA    NA    NA     0    NA     0 -7134    NA #>  #>"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), frac_na = 0, frac_empty = 0)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_empty approximate fraction empty character values included vector. fraction 0, default, include empty values. fraction 0.5 include around 50% empty values.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"O;=~\"      \"{q<Trw\"    \"IW8 F#GIF\" \"/5~\"       \"V\"         \"w{`iTvx\"   character_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"AwQ:~30\"   NA          NA          \"MAnv|\"     NA          \"Z-R+NDz?\"  #>  [7] NA          NA          \"X&*<P?-vh\" \"AeFr/|(VZ\" character_(len = 10L, frac_empty = 0.5) |> show_example() #>  [1] \"hg2mB)lir\" \"\"          \"\"          \"9KnQ_p?-\"  \"<$SnuQ\"    \"}*\"        #>  [7] \"\"          \"w\"         \",Hwh'.\"    \"O+\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), frac_na = 0)  date_bounded(left, right, len = c(1L, 10L), frac_na = 0)  date_left_bounded(left, len = c(1L, 10L), frac_na = 0)  date_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"2459-06-18\" \"2895-03-18\" \"1916-09-27\" \"1852-01-11\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-05\" \"2020-01-06\" \"2020-01-07\" \"2020-01-02\" \"2020-01-06\" #> [6] \"2020-01-02\" \"2020-01-01\" date_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]      NA      NA -267961  161787      NA      NA      NA      NA      NA #> [10]      NA"},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0 )  double_left_bounded(   left,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_nan approximate fraction NaN values included vector. fraction 0, default, include NaN values. fraction 0.5 include around 50% NaN values. frac_inf approximate fraction Inf -Inf values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1]  446583846  529683634 -860567798 -681290128  634071237 double_(big_dbl = TRUE) |> show_example() #>  [1] -1.736945e+307  5.505051e+307 -8.763283e+307   0.000000e+00 -6.136321e+307 #>  [6] -4.183386e+307 -7.197855e+307 -6.782123e+307   0.000000e+00 -2.136410e+306 double_bounded(left = -5, right = 5) |> show_example() #> [1]  0.0000000  0.7418097 -1.9704675 -2.8331607 -2.3580203  0.5813484 -0.4837685 #> [8] -1.2673766 double_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] -548301890         NA         NA         NA          0          0 #>  [7]         NA         NA -992461031         NA double_(len = 10L, frac_nan = 0.2, frac_inf = 0.2) |> show_example() #>  [1] -329796009  983142730  -58826600  472875142 -459775142        Inf #>  [7]  911033434  438167965  349053687 -999849130"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] IFSl)    9        #O\"U4}74 l/8`qs   j        9=w%     /        #> Levels: IFSl) 9 #O\"U4}74 l/8`qs j 9=w% / factor_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA  1 NA  1  1 NA  1 NA  1 NA"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   size = getOption(\"quickcheck.size\", 50L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. size maximum length generators. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), frac_na = 0)  hms_bounded(left, right, len = c(1L, 10L), frac_na = 0)  hms_left_bounded(left, len = c(1L, 10L), frac_na = 0)  hms_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 18:57:20.294526 #> 22:36:26.989782 #> 13:35:51.015410 #> 10:04:08.279616 #> 16:51:20.065845 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 11:31:27.773822 #> 02:40:08.110438 #> 04:20:56.538001 #> 02:38:35.226381 #> 11:35:56.088228 #> 00:00:58.417949 #> 01:12:04.186352 #> 04:39:48.872254 #> 05:10:21.802123 #> 00:12:41.274286 hms_(len = 10L, frac_na = 0.5) |> show_example() #>              NA #> 00:18:57.285999 #>              NA #>              NA #> 20:00:59.933400 #>              NA #> 10:36:13.091657 #> 15:26:44.690380 #> 13:19:58.302416 #> 06:36:10.937354"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), frac_na = 0)  integer_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_positive(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_negative(len = c(1L, 10L), frac_na = 0, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1]  8861  4005  3591  -954 -3269 integer_(big_int = TRUE) |> show_example() #> [1] 1542381576 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1] -2  0 integer_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] -2914    NA  9168 -4816 -4814    NA    NA    NA   550  4467"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1] -4811 #>  #> [[2]] #> [1]  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> $a[[1]] #> 19:26:33.085009 #> 03:58:58.889154 #> 05:26:37.893503 #> 13:19:47.180999 #> 09:37:03.107623 #> 06:10:01.405756 #> 07:32:47.891159 #> 21:00:42.672238 #>  #> $a[[2]] #> [1]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE #>  #> $a[[3]] #> [1] [{P<]R>   ix        Br;XU__zy 3B'4:     /         :y>3      /R'`OjO   #> [8] B'@(\"&y4M #> Levels: [{P<]R> ix Br;XU__zy 3B'4: / :y>3 /R'`OjO B'@(\"&y4M #>  #> $a[[4]] #> [1] FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE #>  #>  #> $b #> $b[[1]] #> [1] \"1766-12-19\" \"2935-07-21\" \"1927-01-17\" \"1944-05-19\" \"1209-04-08\" #>  #> $b[[2]] #> [1] 6KC%v    BE)$Y^:W Pv(6_H'  {`yf     #> Levels: 6KC%v BE)$Y^:W Pv(6_H' {`yf #>  #> $b[[3]] #>  [1] \"1809-07-12\" \"1431-01-17\" \"2978-06-28\" \"2825-03-26\" \"2342-09-09\" #>  [6] \"2325-05-12\" \"2686-03-06\" \"1430-08-23\" \"2276-03-02\" \"1207-05-09\" #>  #> $b[[4]] #> [1] \"[bAKl->\" \"(T7D%[p\" \"in\"      \"e.q.\"    \"\\\"!/l{I\" \".J/yG\"   \"Lu{\"     #>  #> $b[[5]] #> [1] HfUG00}  (QqKFVBJ #> Levels: HfUG00} (QqKFVBJ #>  #> $b[[6]] #> [1] FALSE FALSE FALSE FALSE FALSE #>  #> $b[[7]] #> 13:35:39.271494 #> 01:59:49.802589 #> 20:02:19.494671 #> 21:47:52.789631 #> 02:34:14.140784 #>  #> $b[[8]] #> [1] FALSE  TRUE  TRUE FALSE #>  #> $b[[9]] #> [1] 251648710 653766124 723261431 106595190 163908202 #>  #> $b[[10]] #> [1]  -30106326  144740841 -784317660 #>  #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10.","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1]  9959 -1963 #>  #> [[2]] #> [1]   647 -9875  9662 #>  #> [[3]] #> [1] 0 #>  #> [[4]] #> [1] -8180  4581  4299     0  5864 -4851  8202  2196  5815 #>  #> [[5]] #> [1] -3392     0  6959  3428 -4424  5640 -3963 #>  #> [[6]] #> [1] -2169 #>  #> [[7]] #> [1]  2902  4476  5760  1303 -9230 -6381  6200 #>  #> [[8]] #> [1] -8499  2548  9605     0     0 #>  #> [[9]] #> [1] -7829 -8541 #>  #> [[10]] #> [1]  9228  8385 -5313  -181  9353 -7913  8052  2691 -3781 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1] FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE logical_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] FALSE    NA  TRUE FALSE    NA    NA  TRUE    NA FALSE  TRUE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), frac_na = 0)  numeric_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_positive(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_negative(len = c(1L, 10L), frac_na = 0, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1]  651181352 -495696450  899856078 -453238841 numeric_(big_num = TRUE) |> show_example() #> [1] -1867101021  1413100503  2009393947  1643019079  1821473214  -970684342 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1]  2.1687744  0.0000000  2.7275622 -2.7717648 -1.9485057  0.0000000 -4.6000181 #> [8]  0.5465577 numeric_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] -2760    NA -3566  4750  2473    NA -6373 -8485    NA    NA"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #>  [1] -8422  3166  2894 -6462     0  3482  2082 -4188 -2592 -1676 one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> [1] FALSE FALSE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), frac_na = 0)  posixct_bounded(left, right, len = c(1L, 10L), frac_na = 0)  posixct_left_bounded(left, len = c(1L, 10L), frac_na = 0)  posixct_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"960-04-19 04:32:13 UTC\"  \"2759-07-23 19:16:36 UTC\" #> [3] \"1233-12-13 03:17:02 UTC\" \"1564-01-26 17:49:38 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-02-05 02:34:07 UTC\" \"2020-09-08 02:21:47 UTC\" #> [3] \"2020-07-23 18:46:16 UTC\" \"2020-01-01 07:04:03 UTC\" #> [5] \"2020-07-18 02:46:54 UTC\" \"2020-12-04 22:17:31 UTC\" #> [7] \"2020-11-23 10:25:40 UTC\" \"2020-02-22 00:41:52 UTC\" posixct_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"1092-04-30 22:28:21 UTC\" NA                        #>  [3] NA                        \"2133-04-08 16:39:23 UTC\" #>  [5] NA                        \"475-02-25 19:50:03 UTC\"  #>  [7] \"575-01-13 23:35:03 UTC\"  NA                        #>  [9] NA                        \"1045-01-05 19:59:08 UTC\""},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1] FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10.","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 2 × 1 #>       a #>   <int> #> 1  7866 #> 2 -4283 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b           #>   <int> <chr>       #> 1  2938 \"=Q>u\"      #> 2  6340 \"YxK_cqqn\"  #> 3 -9534 \"RFlaW[\"    #> 4 -8904 \"03.?\"      #> 5 -1333 \">b<G6\\\"^'\""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10.","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 6 × 6 #>   ...1  ...2  ...3  ...4       ...5  ...6       #>   <lgl> <lgl> <lgl> <date>     <lgl> <date>     #> 1 TRUE  TRUE  TRUE  2473-06-22 TRUE  1581-01-28 #> 2 TRUE  FALSE TRUE  1762-06-24 TRUE  2321-11-05 #> 3 TRUE  TRUE  FALSE 2881-03-04 TRUE  2650-07-16 #> 4 TRUE  TRUE  FALSE 2174-10-05 TRUE  2353-07-04 #> 5 FALSE FALSE FALSE 2084-12-29 TRUE  2401-07-04 #> 6 FALSE TRUE  FALSE 1816-01-20 FALSE 2255-11-30 tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>    ...1            ...2        ...3  ...4      ...5        #>    <time>          <chr>       <lgl> <fct>     <chr>       #>  1 01:46:32.352757 \"c6'e\"      TRUE  ;:        \")1J\"       #>  2 16:41:03.695272 \"0t&7` \"    TRUE  }C @UxVi  \"TZ\"        #>  3 20:45:39.745905 \"`)(QQ4aF\"  TRUE  m=OxYVe~t \"J,tH2yU\"   #>  4 17:52:56.856939 \"EcCu?\"     TRUE  f/        \"\\\"\"        #>  5 05:04:32.497344 \"@(/W\\\\\"    TRUE  #<z V     \"hi^i!|\"    #>  6 15:32:52.335267 \"=|{h3\"     FALSE p         \"wL*\"       #>  7 02:57:05.467705 \"qXG\"       FALSE $sA5      \"7n.3rN|\"   #>  8 05:06:11.001725 \"t\"         FALSE f!H       \"$u6>Ehj`;\" #>  9 07:34:50.830610 \"3}I_@\"     FALSE hz87*>[   \"\\\"aL\"      #> 10 22:10:24.249438 \":yO8^I6gg\" TRUE  3         \"qdl\""},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
