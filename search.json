[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = \\(a) expect_equal(a, a + 0)   )           }) #> Test passed 🌈  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = \\(a, b) expect_equal(a + b, b + a)   )           }) #> Test passed 😀  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) #> Test passed 😸 library(dplyr, warn.conflicts = FALSE)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) }) #> Test passed 🥳  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) }) #> Test passed 🎊  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) }) #> Test passed 🥇"},{"path":"/index.html","id":"quickcheck-generators","dir":"","previous_headings":"","what":"Quickcheck generators","title":"Property Based Testing","text":"Many generators provided quickcheck. examples.","code":""},{"path":"/index.html","id":"atomic-vectors","dir":"","previous_headings":"Quickcheck generators","what":"Atomic vectors","title":"Property Based Testing","text":"","code":"integer_(len = 10) |> show_example() #>  [1] -9108 -5543  6373  1213 -2107     0  7866  9857  6110  1479 character_alphanumeric(len = 10) |> show_example() #>  [1] \"ftC8FL\"    \"i2Dq\"      \"x\"         \"BeyyrMTN4\" \"f\"         \"I\"         #>  [7] \"EMBbsIJ\"   \"yo6\"       \"9alAD\"     \"UAG90C04\" posixct_(len = 10, any_na = TRUE) |> show_example()  #>  [1] NA                        \"2619-09-17 23:40:21 PDT\" #>  [3] \"1953-06-14 14:25:35 PDT\" \"0374-11-01 03:41:06 LMT\" #>  [5] \"0322-09-13 15:12:58 LMT\" \"0554-02-23 09:16:14 LMT\" #>  [7] \"1958-06-08 23:36:55 PDT\" NA                        #>  [9] NA                        NA"},{"path":"/index.html","id":"lists","dir":"","previous_headings":"Quickcheck generators","what":"Lists","title":"Property Based Testing","text":"","code":"list_(a = constant(NULL), b = any_undefined()) |> show_example() #> $a #> NULL #>  #> $b #> [1] NA flat_list_of(logical_(), len = 3) |> show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] FALSE"},{"path":"/index.html","id":"tibbles","dir":"","previous_headings":"Quickcheck generators","what":"Tibbles","title":"Property Based Testing","text":"","code":"tibble_(a = date_(), b = hms_(), rows = 5) |> show_example() #> # A tibble: 5 x 2 #>   a          b               #>   <date>     <time>          #> 1 2648-05-19 04:24:18.293200 #> 2 1597-10-16 20:00:33.717330 #> 3 1536-10-15 00:50:35.396764 #> 4 2625-07-04 23:22:06.581214 #> 5 1463-03-09 12:40:52.299928 tibble_of(double_bounded(-10, 10), rows = 3, cols = 3) |> show_example() #> # A tibble: 3 x 3 #>    ...1  ...2  ...3 #>   <dbl> <dbl> <dbl> #> 1  7.79 -4.56  0    #> 2 -4.24 -6.08  0    #> 3  9.43 -4.64  4.95 any_tibble(rows = 3, cols = 3) |> show_example() #> # A tibble: 3 x 3 #>   ...1            ...2      ...3             #>   <time>          <list>    <list>           #> 1 20:46:02.552316 <dbl [1]> <named list [2]> #> 2 14:22:53.955335 <dbl [1]> <named list [2]> #> 3 03:48:52.731885 <dbl [1]> <named list [2]>"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used wrapping from_hedgehog. hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error: quickcheck generator can also converted hedgehog generator can used hedgehog functions.","code":"library(hedgehog)  is_even <-    \\(a) a %% 2 == 0  gen_powers_of_two <-    gen.element(1:10) |> gen.with(\\(a) 2 ^ a)  test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) |> expect_true()   ) }) #> Test passed 😀 test_that(\"powers of two and integers are both numeric values\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     b = integer_(),     property = \\(a, b) c(a, b) |> is.numeric() |> expect_true()   ) }) #> Test passed 🎉 test_that(\"composing hedgehog with quickcheck generators fails\", {   tibble_of(from_hedgehog(gen_powers_of_two)) |> expect_error() }) #> Test passed 🥳 gen_powers_of_two <-    integer_bounded(1L, 10L, len = 1L) |>      as_hedgehog() |>      gen.with(\\(a) 2 ^ a)   test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) |> expect_true()   ) }) #> Test passed 🥳"},{"path":"/index.html","id":"fuzz-tests","dir":"","previous_headings":"","what":"Fuzz tests","title":"Property Based Testing","text":"Fuzz testing special case property based testing property tested code doesn’t fail range inputs. example fuzz testing quickcheck. Let’s say want test purrr::map function won’t fail vector input.","code":"test_that(\"map won't fail with any vector as input\", {   for_all(     a = any_vector(),     property = \\(a) purrr::map(a, identity) |> expect_silent()   ) }) #> Test passed 🌈"},{"path":"/index.html","id":"repeat-tests","dir":"","previous_headings":"","what":"Repeat tests","title":"Property Based Testing","text":"Repeat tests can used repeatedly test property holds true many calls function. different regular property based tests don’t require generators. function repeat_test call function many times ensure expectation passes cases. kind test can useful testing functions randomness.","code":"test_that(\"runif generates random numbers between a min and max value\", {   repeat_test(     property = \\() {       random_number <- runif(1, min = 0, max = 10)       expect_true(random_number >= 0 && random_number <= 10)     }   ) }) #> Test passed 🌈"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Any atomic vector generator — any_atomic","title":"Any atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any atomic vector generator — any_atomic","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1] \"\\\"=l;\" \" noI\"  any_atomic(len = 10L, any_na = TRUE) |> show_example() #>  [1] \"1367-06-04 04:54:47 UTC\" \"2114-04-12 19:24:34 UTC\" #>  [3] \"2472-07-22 03:27:43 UTC\" \"1703-11-17 23:01:55 UTC\" #>  [5] \"353-02-22 16:53:55 UTC\"  \"2383-10-24 08:11:59 UTC\" #>  [7] \"1280-07-30 08:09:40 UTC\" NA                        #>  [9] NA                        \"1793-08-28 13:10:06 UTC\""},{"path":"/reference/any_data.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data.table generator — any_data.table","title":"Any data.table generator — any_data.table","text":"Generate data.tables.","code":""},{"path":"/reference/any_data.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data.table generator — any_data.table","text":"","code":"any_data.table(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data.table generator — any_data.table","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data.table generator — any_data.table","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_data.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data.table generator — any_data.table","text":"","code":"any_data.table(rows = 3L, cols = 3L) |> show_example() #>         ...1                ...2            ...3 #> 1: <list[2]> 1021-06-14 07:14:40 03:05:14.861941 #> 2: <list[2]> 1473-02-21 20:48:48 06:54:16.550645 #> 3: <list[2]>                TRUE 20:43:18.876704"},{"path":"/reference/any_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data frame generator — any_data_frame","title":"Any data frame generator — any_data_frame","text":"Generate data.frames.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data frame generator — any_data_frame","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data frame generator — any_data_frame","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = 3L, cols = 3L) |> show_example() #>         ...1                ...2  ...3 #> 1 2686-07-07 1068-10-22 09:42:22   818 #> 2 2624-08-20  182-09-10 03:05:29 -7789 #> 3 1431-07-13 2760-05-13 16:46:45     0"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any flat homogeneous list generator — any_flat_homogeneous_list","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic scalar class.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() |> show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] FALSE #>  #> [[4]] #> [1] FALSE #>  any_flat_homogeneous_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] \"{\" #>  #> [[2]] #> [1] \"`=E{LU!9Q\" #>  #> [[3]] #> [1] \"<d[+pLOX\" #>  #> [[4]] #> [1] \"3\" #>  #> [[5]] #> [1] \"D^h+!n\" #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] \"G`K|\\\\lW\" #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] \"vP\\\"=v|=\" #>  #> [[10]] #> [1] \"T_r/^\" #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any flat list generator — any_flat_list","title":"Any flat list generator — any_flat_list","text":"Generate lists element atomic scalar.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any flat list generator — any_flat_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] TRUE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 826388405 #>  #> [[4]] #> [1] FALSE #>  #> [[5]] #> 12:40:49.031044 #>  #> [[6]] #> [1] -176030075 #>  #> [[7]] #> [1] 599138175 #>  #> [[8]] #> 07:07:18.664789 #>  any_flat_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] 0 #>  #> [[2]] #> 01:07:52.97627 #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] \"Q~\" #>  #> [[6]] #> [1] NA #>  #> [[7]] #> 01:02:38.579844 #>  #> [[8]] #> [1] -2471 #>  #> [[9]] #> [1] \"946-04-22 22:30:22 UTC\" #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any list generator — any_list","title":"Any list generator — any_list","text":"Generate lists containing lists atomic vectors.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any list generator — any_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [[1]]$a #> [1] \"2167-05-14\" \"2898-06-21\" \"1567-09-28\" \"1352-09-19\" \"1003-08-22\" #> [6] \"2141-10-10\" \"1315-10-14\" \"1032-08-20\" \"1935-08-21\" #>  #> [[1]]$b #> [1]  -985  6087  5075  4876  4040 -2367  7187 #>  #>  #> [[2]] #> [[2]]$a #> [1] jL_D ^   fxLri+   K0       _Z+e!61  DP.>S\\\\T u+w      $\\\\      $]e      #> [9] Wr3.)1]  #> Levels: jL_D ^ fxLri+ K0 _Z+e!61 DP.>S\\\\T u+w $\\\\ $]e Wr3.)1] #>  #> [[2]]$b #> [1]     0  4675 -5270 -1044  2640 #>  #>  #> [[3]] #> [[3]]$a #> [1] \"9?:A\"    \"]NVCE\"   \"v{;3H8M\" \"r>d\"     \"aJi}T$\"  \"A<\"      \"TdRe@\"   #> [8] \"1\"       #>  #> [[3]]$b #> 17:43:10.358177 #> 06:54:46.030127 #> 21:58:59.368825 #> 23:34:57.355861 #>  #>  #> [[4]] #> [[4]]$a #> [1]          0 -506226439  420542602  271885982          0 #>  #> [[4]]$b #> [1] +    Ye_a BZ/  |Q8k ^w   }.H  #> Levels: + Ye_a BZ/ |Q8k ^w }.H #>  #>  #> [[5]] #> [[5]]$a #> 08:31:15.068497 #> 12:52:04.442616 #> 07:11:04.804216 #> 14:27:25.306224 #> 02:31:51.791202 #> 16:51:36.193634 #> 18:57:54.054101 #> 10:08:55.413298 #> 04:02:13.470779 #> 08:52:40.479417 #>  #> [[5]]$b #> [1] FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE #>  #>  #> [[6]] #> [[6]]$a #> [1] \"EOG5w\"   \"#\"       \"{kJ\"     \"tM6:NMi\" #>  #> [[6]]$b #> [1] \"378-11-12 12:12:29 UTC\"  \"2934-07-27 13:54:16 UTC\" #>  #>  #> [[7]] #> [[7]]$a #> [1] \"1694-10-22 05:11:04 UTC\" #>  #> [[7]]$b #> [1] \"B8^_q\" \"+@%b\"  \"=G`T,\" #>  #>  #> [[8]] #> [[8]]$a #> 18:12:55.942249 #>  #> [[8]]$b #> [1] ]q0.ZU=r\\\\ 4          8i6|'1]    OQ=;T      ;Mebk99    H}6J%      #+m~=^X    #> [8] N,eIZoI    dMF/       #> Levels: ]q0.ZU=r\\\\ 4 8i6|'1] OQ=;T ;Mebk99 H}6J% #+m~=^X N,eIZoI dMF/ #>  #>  #> [[9]] #> [[9]]$a #> [1]          0  378603683 -853143874  706378580 -670633692  443018833          0 #> [8]  114617475 #>  #> [[9]]$b #> [1] \"1129-04-30\" \"2426-08-18\" \"1392-11-08\" \"2500-02-16\" \"2207-09-25\" #> [6] \"2352-11-08\" #>  #>  any_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] \"2078-03-02 16:20:29 UTC\" #>  #> [[2]] #> [1] NA #>  #> [[3]] #> [1] \"502-10-09 03:06:26 UTC\" #>  #> [[4]] #> [1] \"944-12-15 07:48:21 UTC\" #>  #> [[5]] #> [1] \"475-07-25 22:47:56 UTC\" #>  #> [[6]] #> [1] \"1399-12-24 11:17:51 UTC\" #>  #> [[7]] #> [1] \"2291-03-18 19:23:25 UTC\" #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] \"2469-05-09 19:35:03 UTC\" #>  #> [[10]] #> [1] \"387-07-23 17:32:30 UTC\" #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Any tibble generator — any_tibble","title":"Any tibble generator — any_tibble","text":"Generate tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any tibble generator — any_tibble","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble(rows = 3L, cols = 3L) |> show_example() #> # A tibble: 3 × 3 #>   ...1             ...2 ...3                #>   <list>          <dbl> <dttm>              #> 1 <lgl [1]> -746244049. 1938-01-12 18:49:07 #> 2 <lgl [1]> -549014551. 922-02-03 19:16:21  #> 3 <lgl [1]> -186460414. 141-03-28 10:24:20"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Any undefined value generator — any_undefined","title":"Any undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any undefined value generator — any_undefined","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any undefined value generator — any_undefined","text":"","code":"any_undefined() |> show_example() #> [1] -Inf"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Any vector generator — any_vector","title":"Any vector generator — any_vector","text":"Generate atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any vector generator — any_vector","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [[1]] #> [[1]]$a #> [1] kaq(t     I-_[/z)r  /:<}60rw4 StvA7=hy2 KR        i!x3{f|f  \\\\6\"el&M  #> [8] xct0S7    m*;&+\"    #> 9 Levels: kaq(t I-_[/z)r /:<}60rw4 StvA7=hy2 KR i!x3{f|f \\\\6\"el&M ... m*;&+\" #>  #> [[1]]$b #> [1]  2545  5151 -5538  5915 -7415  3568 #>  #>  #> [[2]] #> [[2]]$a #> [1] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE #>  #> [[2]]$b #> [1] \"1092-07-14\" \"2807-11-11\" \"1819-11-19\" \"1701-11-06\" \"1393-08-03\" #> [6] \"2187-06-07\" \"2185-02-02\" #>  #>  #> [[3]] #> [[3]]$a #> 17:34:01.389557 #> 15:13:17.514320 #> 12:32:12.745895 #> 08:16:35.408213 #>  #> [[3]]$b #> [1] \"?`ng<\"    \"wFJ~gPkA\" #>  #>  #> [[4]] #> [[4]]$a #> 11:33:04.133594 #> 16:40:31.269672 #> 01:43:25.278186 #> 16:30:25.304555 #>  #> [[4]]$b #> [1] \"':cziH\" #>  #>  #> [[5]] #> [[5]]$a #> [1] \"2491-01-12\" \"2871-07-08\" \"1905-11-11\" \"2519-11-15\" \"1672-11-08\" #> [6] \"1006-12-12\" #>  #> [[5]]$b #>  [1] \"1958-04-20\" \"2977-11-09\" \"1285-12-21\" \"1778-06-16\" \"1269-04-25\" #>  [6] \"2314-01-27\" \"1596-05-20\" \"1318-10-14\" \"1513-02-10\" \"2410-03-31\" #>  #>  #> [[6]] #> [[6]]$a #> 18:43:51.879842 #> 16:17:30.601449 #> 01:47:40.116220 #> 04:28:22.639137 #> 13:04:40.806364 #> 21:14:38.471750 #> 13:16:50.078618 #> 23:49:23.915865 #>  #> [[6]]$b #> [1] \"1691-05-22\" \"1175-12-02\" \"2565-06-17\" \"2477-12-28\" \"2248-10-28\" #> [6] \"2685-10-06\" \"1482-12-10\" \"1220-03-06\" #>  #>  any_vector(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [[1]]$a #> [1]  1  1 NA NA  1  1  1  1  1 #>  #> [[1]]$b #>  [1]          0  795944285  744855782         NA  998289858 -914205161 #>  [7] -936002489 -797950496   92622818         NA #>  #>  #> [[2]] #> [[2]]$a #> [1] FALSE    NA    NA    NA FALSE FALSE #>  #> [[2]]$b #> [1] : e1! U     #> Levels: : e1! U #>  #>  #> [[3]] #> [[3]]$a #> 19:03:45.821466 #>              NA #> 01:12:39.111781 #> 19:11:20.648054 #> 17:19:58.873301 #>  #> [[3]]$b #> [1] FALSE  TRUE #>  #>  #> [[4]] #> [[4]]$a #> [1] -276582243 #>  #> [[4]]$b #> [1] \"120-05-21 00:03:27 UTC\"  \"708-09-18 13:29:52 UTC\"  #> [3] \"1304-05-09 20:37:17 UTC\" \"1928-03-11 18:29:26 UTC\" #> [5] \"122-07-29 05:39:11 UTC\"  \"1652-04-14 19:36:06 UTC\" #> [7] \"31-09-25 23:45:03 UTC\"   #>  #>  #> [[5]] #> [[5]]$a #> [1]   NA  169 -778 #>  #> [[5]]$b #> 21:40:38.674419 #> 09:44:37.351943 #> 12:49:52.346471 #> 22:10:35.450757 #> 16:15:37.047475 #> 23:49:46.083201 #> 16:40:02.859533 #> 05:19:26.944864 #>  #>  #> [[6]] #> [[6]]$a #> 10:49:29.742126 #> 06:38:19.206266 #> 15:11:24.864756 #>              NA #>  #> [[6]]$b #> [1]  1  1 NA NA  1  1 NA #>  #>  #> [[7]] #> [[7]]$a #> [1] \"1569-03-10\" \"2957-03-11\" NA           \"2554-12-10\" \"2324-05-13\" #> [6] \"1916-07-03\" \"2063-02-01\" \"1244-02-09\" NA           #>  #> [[7]]$b #> [1] \"2091-07-06 06:19:11 UTC\" \"207-04-12 21:21:09 UTC\"  #> [3] \"453-07-04 00:04:12 UTC\"  \"620-10-19 14:22:08 UTC\"  #> [5] NA                        \"1906-10-12 02:35:51 UTC\" #> [7] \"1956-07-23 16:39:30 UTC\" #>  #>  #> [[8]] #> [[8]]$a #> [1]  1  1  1 NA  1  1  1  1 #>  #> [[8]]$b #>              NA #>              NA #> 09:00:07.580548 #> 11:36:27.237525 #>              NA #> 02:48:22.506770 #> 19:16:56.034206 #> 15:22:50.225023 #>  #>  #> [[9]] #> [[9]]$a #> 12:08:30.377335 #>  #> [[9]]$b #> [1] 410992851 -67696101 -41014827 310189201        NA #>  #>  #> [[10]] #> [[10]]$a #> [1] \"D>\"        \".\\\\%fND\"   \"K\"         \"6RAAH|ic`\" \"`_T:Hwq\"   \"] P\"       #> [7] NA          \", 95d7=Za\" NA          #>  #> [[10]]$b #> 22:56:58.754139 #> 12:17:18.238630 #>              NA #>  #>"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, data.frames, tibbles, data.tables, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything(any_empty = TRUE, any_undefined = TRUE)"},{"path":"/reference/anything.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any R object generator — anything","text":"any_empty Whether empty vectors data frames allowed. any_undefined Whether undefined values allowed.","code":""},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator object.","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() |> show_example() #>                  ...1      ...2     ...3  ...4            ...5       ...6 #> 1 2020-11-25 00:43:58  BWC$)nid    O!v56 FALSE 12:12:39.958327       <NA> #> 2 1196-05-03 13:56:46      ,_Vq     <NA> FALSE 07:56:01.833668       <NA> #> 3                <NA>     3 k^d  Fv\".]12    NA 21:42:03.193964 2627-09-17 #> 4  486-12-25 21:00:50     HgSc>     <NA> FALSE 16:46:56.927288 1267-09-14 #> 5 2191-05-12 03:46:29         [ '0@8%f$H  TRUE 19:01:28.269671 1620-09-29 #> 6 1404-09-01 18:38:33 ^DfQO.dmq      A{p  TRUE 14:00:23.838373 2246-05-07 #> 7                <NA>    s{rR^f    zZ'+6  TRUE              NA 2736-08-18 #> 8                <NA>      <NA>     <NA>    NA 13:44:41.086967 1053-01-30 #> 9 1477-12-02 10:48:13    ~MAVr'   Zgv5]m FALSE 23:47:35.344948 2002-10-26 anything(any_empty = FALSE, any_undefined = FALSE) |> show_example() #>                  ...1 #> 1 1179-10-13 10:14:33 #> 2 2519-09-30 10:40:26 #> 3 1939-06-16 02:42:11 #> 4 1453-01-27 21:14:01 #> 5    6-01-24 08:30:40 #> 6 2632-06-29 08:02:50"},{"path":"/reference/as_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"Convert quickcheck generator hedgehog generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"as_hedgehog(generator)"},{"path":"/reference/as_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"generator quickcheck_generator object.","code":""},{"path":"/reference/as_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"quickcheck_generator object.","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) |>     as_hedgehog() |>     hedgehog::gen.with(\\(a) 2 ^ a) for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_letters(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_numbers(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_alphanumeric(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_empty Whether empty character values allowed.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator object.","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"2LR*->df\"  \".*jPADpJ\"  \"P`S}\"      \"rQB~>J\"    \"#VY7o&|$h\" \"Eo(`M!t\"   #> [7] \"<*#^\"      character_(len = 10L, any_na = TRUE) |> show_example() #>  [1] \"&bb\"       \"&>.3P6.>\"  \";Ju0xg>3_\" NA          \"n#?y\"      NA          #>  [7] \"W4\"        \"WnGdq^\"    NA          NA          character_(len = 10L, any_empty = TRUE) |> show_example() #>  [1] \"\"        \"a*m3]\"   \")Ix\"     \"^U2V7bC\" \"u[vt-\"   \"_l>I\"    \"kk~X'<\"  #>  [8] \"E>e\"     \"\"        \"<F\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator object.","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/data.table_.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generators — data.table_","title":"data.table generators — data.table_","text":"Construct data.table generators similar way data.table::data.table.","code":""},{"path":"/reference/data.table_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generators — data.table_","text":"","code":"data.table_(..., rows = c(1L, 10L))"},{"path":"/reference/data.table_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generators — data.table_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data.table_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generators — data.table_","text":"quickcheck_generator object.","code":""},{"path":"/reference/data.table_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generators — data.table_","text":"","code":"data.table_(a = integer_()) |> show_example() #>        a #> 1:  2479 #> 2: -8623 #> 3: -9355 #> 4: -2343 #> 5:     0 #> 6: -5873 #> 7: -1081 #> 8:  -257 #> 9:  7608 data.table_(a = integer_(), b = character_(), rows = 5L) |> show_example() #>        a      b #> 1:  3483 R^ hg& #> 2: -9168 7&N<f} #> 3:  7797   \"~?N #> 4: -5934      ' #> 5: -3552      d"},{"path":"/reference/data.table_of.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generator with randomized columns — data.table_of","title":"data.table generator with randomized columns — data.table_of","text":"data.table generator randomized columns","code":""},{"path":"/reference/data.table_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generator with randomized columns — data.table_of","text":"","code":"data.table_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data.table_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generator with randomized columns — data.table_of","text":"... set unnamed generators. generated data.tables built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data.table_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generator with randomized columns — data.table_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/data.table_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generator with randomized columns — data.table_of","text":"","code":"data.table_of(logical_(), date_()) |> show_example() #>          ...1 #> 1: 2354-02-23 #> 2: 1106-12-08 #> 3: 2204-04-06 #> 4: 2329-05-31 #> 5: 2189-12-18 #> 6: 2129-03-12 data.table_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #>      ...1       ...2                ...3      ...4       ...5 #>  1:  TRUE -894467781 2788-08-01 07:37:46    [iBzHd 2326-01-05 #>  2: FALSE   40878687  738-09-09 23:55:13     sBF3I 2355-05-31 #>  3:  TRUE  291874221 1913-10-17 16:39:15   Xti_Dr6 1794-04-16 #>  4: FALSE -218166642   62-11-11 01:01:56 R'eh=siTZ 2383-04-24 #>  5: FALSE  766954412  923-01-18 01:55:18         N 2875-12-01 #>  6: FALSE  953766222 2039-06-15 15:54:52   4KHV5%g 2393-04-14 #>  7: FALSE -572397198 1689-02-04 01:34:12         w 2955-10-27 #>  8: FALSE  161262389 1432-01-25 21:17:20      >H}H 1430-03-07 #>  9:  TRUE -344529607 2213-02-15 05:11:47   (X=wg)1 2290-07-03 #> 10: FALSE -237651832 2906-10-30 21:34:37      %SeK 1311-07-08"},{"path":"/reference/data_frame_.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generators — data_frame_","title":"Data frame generators — data_frame_","text":"Construct data frame generators similar way base::data.frame.","code":""},{"path":"/reference/data_frame_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(..., rows = c(1L, 10L))"},{"path":"/reference/data_frame_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generators — data_frame_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data_frame_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generators — data_frame_","text":"quickcheck_generator object.","code":""},{"path":"/reference/data_frame_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(a = integer_()) |> show_example() #>       a #> 1  1019 #> 2 -9433 #> 3     0 #> 4  8576 #> 5  5761 #> 6  8561 #> 7     0 data_frame_(a = integer_(), b = character_(), rows = 5L) |> show_example() #>       a         b #> 1 -2037       &,p #> 2 -6980         x #> 3  8676       <f[ #> 4 -8829 //>1y!r\"2 #> 5 -6418      p\"9r"},{"path":"/reference/data_frame_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generator with randomized columns — data_frame_of","title":"Data frame generator with randomized columns — data_frame_of","text":"Data frame generator randomized columns","code":""},{"path":"/reference/data_frame_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generator with randomized columns — data_frame_of","text":"","code":"data_frame_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data_frame_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generator with randomized columns — data_frame_of","text":"... set unnamed generators. generated data frames built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data_frame_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generator with randomized columns — data_frame_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/data_frame_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generator with randomized columns — data_frame_of","text":"","code":"data_frame_of(logical_(), date_()) |> show_example() #>    ...1  ...2       ...3       ...4       ...5       ...6 ...7 #> 1  TRUE FALSE 1102-03-02 2842-06-12 1800-09-22 2524-04-05 TRUE #> 2 FALSE  TRUE 1927-03-15 1361-12-05 2844-11-20 1242-04-01 TRUE data_frame_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #>          ...1                ...2      ...3  ...4       ...5 #> 1   731212313 1892-07-31 10:24:25   |eMPL9q  7075          0 #> 2   709684805   26-10-16 03:14:23         h  3532 -965216411 #> 3   317778698 1382-04-10 10:23:58  gBNK$x[U  5447   12802818 #> 4   621515669  909-01-16 03:15:18        $I  2757 -237369677 #> 5   974053553  781-09-06 03:55:53  >}~'b+7%   942  858300520 #> 6   568239714 1773-06-17 07:12:47 k5^lr\"7.k     0 -134130568 #> 7   942581385  476-03-12 18:11:27 Sp`5%~O@F  -767 -951583316 #> 8           0 1197-06-09 22:06:53    ].?KA3 -1742 -110029173 #> 9   979863669 2526-07-29 16:57:44    KIJfet  3122  511062434 #> 10 -631723626 1301-03-19 13:32:39     tV@jh -1996  295929324"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), any_na = FALSE)  date_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  date_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  date_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator object.","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"2897-03-04\" \"2510-06-27\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-06\" \"2020-01-02\" \"2020-01-06\" \"2020-01-04\" \"2020-01-03\" #> [6] \"2020-01-04\" date_(len = 10L, any_na = TRUE) |> show_example() #>  [1] NA           \"2676-10-15\" NA           NA           NA           #>  [6] \"1215-05-01\" NA           \"2546-01-24\" \"1430-02-04\" \"1346-01-04\""},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE )  double_left_bounded(   left,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_nan Whether NaN values allowed. any_inf Whether Inf/-Inf values allowed. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator object.","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1]          0  914815426 -238384765  634652324 double_(big_dbl = TRUE) |> show_example() #> [1] -4.026918e+307 -4.810243e+307 -7.691550e+307  3.744518e+307 double_bounded(left = -5, right = 5) |> show_example() #> [1] 0.4351005 4.5767929 double_(len = 10L, any_na = TRUE) |> show_example() #>  [1] -315832525 -672171155         NA -924572624 -411538478 -513121257 #>  [7] -694196894          0  843611436  816115465 double_(len = 10L, any_nan = TRUE, any_inf = TRUE) |> show_example() #>  [1]       Inf 296876170       NaN         0       Inf         0       NaN #>  [8]       Inf 654075849       NaN"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal length vector generator — equal_length","title":"Equal length vector generator — equal_length","text":"Generates equal length vectors contained list.","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(..., len = c(1L, 10L))"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal length vector generator — equal_length","text":"... set named unnamed vector generators. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal length vector generator — equal_length","text":"quickcheck_generator object.","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(integer_(), double_()) |> show_example() #> [[1]] #> [1]  3472  1977 -9851     0 #>  #> [[2]] #> [1]   87011367 -734433485  422880255 -632663627 #>  equal_length(a = logical_(), b = character_(), len = 5L) |> show_example() #> $a #> [1] FALSE FALSE FALSE FALSE  TRUE #>  #> $b #> [1] \"Qp0\"      \"%8omNHU&\" \"P:D\"      \"NjyZpk?U\" \";Zp$S&:$\" #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator object.","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] 5g`r4`p=u ~B        }         ew%       )f<       bZKkNMBCR t: fT     #> Levels: 5g`r4`p=u ~B } ew% )f< bZKkNMBCR t: fT factor_(len = 10L, any_na = TRUE) |> show_example() #>  [1]  1  1  1  1 NA  1 NA  1 NA  1"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"Generate flat lists values coming single generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator quickcheck_generator object. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] -1028 #>  #> [[2]] #> [1] 0 #>  #> [[3]] #> [1] 1089 #>  #> [[4]] #> [1] -5602 #>  #> [[5]] #> [1] 0 #>  #> [[6]] #> [1] 1938 #>  #> [[7]] #> [1] 6566 #>  #> [[8]] #> [1] -4431 #>  #> [[9]] #> [1] -6396 #>  #> [[10]] #> [1] 7807 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes values generator calls expectation . function must parameters matching generator names. tests number tests run. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(len = 1L),   b = numeric_(len = 1L),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen object.","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator object.","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) |> hedgehog::gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), any_na = FALSE)  hms_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  hms_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  hms_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator object.","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 04:12:56.895750 #> 03:26:06.956047 #> 13:01:05.845021 #> 21:10:39.700130 #> 07:04:47.812133 #> 09:27:20.479707 #> 08:24:27.302706 #> 09:30:26.237141 #> 04:59:14.642377 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 08:05:13.066933 #> 02:47:10.025923 #> 08:11:02.928041 #> 08:01:51.826836 #> 04:52:48.577288 hms_(len = 10L, any_na = TRUE) |> show_example() #> 20:51:20.862536 #> 09:30:04.381347 #> 16:03:20.853330 #> 16:59:10.150974 #>              NA #> 18:24:22.464617 #> 05:28:09.418381 #> 05:10:11.353202 #> 00:54:19.510918 #> 15:05:35.797907"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  integer_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_positive(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_negative(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator object.","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1] -3990 -2680 -3061  6483  7366  -194  1617  6070  5757 integer_(big_int = TRUE) |> show_example() #> [1]  1819829395 -1810592805           0  -104691551 -1734033267  2056311748 #> [7]  1666723249 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1] -2 -3 -2 integer_(len = 10L, any_na = TRUE) |> show_example() #>  [1]  7188  7982 -8758    NA -6339 -1740 -3194  8158     0    NA"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"Generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... set named unnamed generators.","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator object.","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1]  9649   657 -4119 -6496 -9153 #>  #> [[2]] #> [1]  TRUE FALSE FALSE FALSE  TRUE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> $a[[1]] #> 19:02:22.736256 #>  #> $a[[2]] #> 18:24:34.404506 #>  #> $a[[3]] #> 02:59:20.989803 #>  #> $a[[4]] #> 22:05:42.541956 #>  #> $a[[5]] #> 06:54:12.401289 #>  #>  #> $b #>  [1] \"AP1Fj6O~G\" \"[+f\\\"3}H\"  \"1.[mz6\"    \")|Df`&\"    \"9.SZ\"      \"PgDaAgt|u\" #>  [7] \"t1,p\"      \"5(ELI}xz_\" \"t}\"        \"1x\\\"RO\\\\=\" #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"Generate lists values coming single generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator quickcheck_generator object. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] 0 #>  #> [[2]] #> [1] -8621   563  2291 -5275 -6648 -7478  7510 -1674 #>  #> [[3]] #> [1]  -806  2429   642 -5644     0  1913  4607  3549 #>  #> [[4]] #> [1] -7910  1454     0  4336 #>  #> [[5]] #> [1]     0 -4183     0  6887  7372 -3681 #>  #> [[6]] #> [1]  8237 -1515  1870 -8634 #>  #> [[7]] #> [1] -1880 -5952 -2633 -2214     0  9022 #>  #> [[8]] #> [1]  3754  7728 -3960    36     0 -2348 #>  #> [[9]] #> [1] -1532  6326 #>  #> [[10]] #> [1] -2062  6016  2617 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator object.","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE logical_(len = 10L, any_na = TRUE) |> show_example() #>  [1]    NA  TRUE FALSE  TRUE    NA    NA  TRUE  TRUE    NA FALSE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  numeric_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_positive(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_negative(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator object.","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1]  623827882          0 -902259357  907651168  260793098          0  -79525588 numeric_(big_num = TRUE) |> show_example() #> [1] -1843997620  1142746355 -1678458497  2102921344   383176465  1696350700 #> [7] -1756880082  2020197422 -1469891261 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1] -1 -2 numeric_(len = 10L, any_na = TRUE) |> show_example() #>  [1] -4028     0  9032 -4233 -3025    NA    NA  9041     0  9854"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... set unnamed generators. prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1] \"^6\"       \"y\"        \"M}M\"      \"0\"        \"p;^lab^\"  \"v=9|C)2\"  \"l0};1_v#\" one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> NULL"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), any_na = FALSE)  posixct_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  posixct_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  posixct_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator object.","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"2781-04-29 08:51:13 UTC\" \"85-10-16 14:24:28 UTC\"   #> [3] \"2425-01-11 18:00:07 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #>  [1] \"2020-10-19 17:52:42 UTC\" \"2020-09-05 06:22:19 UTC\" #>  [3] \"2020-07-02 06:59:39 UTC\" \"2020-09-12 04:01:35 UTC\" #>  [5] \"2020-05-18 11:37:32 UTC\" \"2020-06-03 08:58:56 UTC\" #>  [7] \"2020-10-04 20:52:20 UTC\" \"2020-04-14 02:18:43 UTC\" #>  [9] \"2020-05-21 04:42:15 UTC\" \"2020-10-04 09:41:30 UTC\" posixct_(len = 10L, any_na = TRUE) |> show_example() #>  [1] \"2188-06-20 07:35:20 UTC\" \"910-09-13 05:56:16 UTC\"  #>  [3] \"1802-07-10 12:34:56 UTC\" \"1261-08-30 16:35:48 UTC\" #>  [5] \"2057-10-09 08:52:30 UTC\" NA                        #>  [7] NA                        NA                        #>  [9] NA                        NA"},{"path":"/reference/repeat_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly test properties of a function — repeat_test","title":"Repeatedly test properties of a function — repeat_test","text":"Repeatedly test properties function","code":""},{"path":"/reference/repeat_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(property, tests = getOption(\"quickcheck.tests\", 100L))"},{"path":"/reference/repeat_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly test properties of a function — repeat_test","text":"property function parameters includes expectation. tests number tests run.","code":""},{"path":"/reference/repeat_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly test properties of a function — repeat_test","text":"testthat expectation object.","code":""},{"path":"/reference/repeat_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(   property = \\() {     num <- stats::runif(1, min = 0, max = 10)     testthat::expect_true(num >= 0 && num <= 10)   } )"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator quickcheck_generator object.","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1] FALSE  TRUE  TRUE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way tibble::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator object.","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 6 × 1 #>       a #>   <int> #> 1     0 #> 2  5035 #> 3   507 #> 4  8063 #> 5     0 #> 6  3542 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b        #>   <int> <chr>    #> 1  6063 :R~Em.%u #> 2 -5633 1H{4+    #> 3 -9541 vM[      #> 4 -9087 Y$o)     #> 5  6574 jk"},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 5 × 2 #>   ...1  ...2  #>   <lgl> <lgl> #> 1 TRUE  FALSE #> 2 FALSE FALSE #> 3 FALSE TRUE  #> 4 FALSE FALSE #> 5 FALSE TRUE  tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>    ...1       ...2      ...3        ...4         ...5 #>    <date>     <fct>     <chr>       <lgl>       <dbl> #>  1 2636-09-20 IC.9z     \"L\\\"=D'AE~\" TRUE   587216549. #>  2 1718-10-22 Q9}:CV    \"{kezuS\"    FALSE -809638153. #>  3 2484-06-12 I6I&+     \"|d6V\"      TRUE   611113533. #>  4 1107-12-18 4ce&a     \"pXdA(v\"    FALSE          0  #>  5 1019-12-18 >o        \"2R<bnWm\"   TRUE  -207078769. #>  6 2574-06-04 5iITs     \"EEE\\\\]p\"   FALSE -358316482. #>  7 1050-02-06 8(d       \"#\"         FALSE          0  #>  8 2582-05-02 7IYZOG    \"edO\"       TRUE  -568752459. #>  9 1154-05-02 ^WlrA//   \"Tr>Oxg^f\"  TRUE  -925424027. #> 10 1951-01-06 _#gH{E|PI \"7*N}`z]\"   TRUE  -784161462."},{"path":[]},{"path":"/news/index.html","id":"major-breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Major breaking changes","title":"quickcheck 0.1.0","text":"default length vector generators changed 1 range 1 10. parameters form frac_ replaced any_, take logical value instead double value.","code":""},{"path":"/news/index.html","id":"features-0-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"quickcheck 0.1.0","text":"New character_letters generates character vectors letters. New character_numbers generates character vectors numbers. New character_alphanumeric generates character vectors letters numbers. New flat_list_of generates lists atomic scalars. New data_frame_ generate data.frames. New data_frame_of generate data.frames. New data.table_ generate data.tables. New data.table_of generate data.tables. New anything generates R object. New any_flat_homogeneous_list generates flat lists homogeneous elements. New any_data_frame generates data.frames. New any_data.table generates data.tables. New any_undefined generates undefined values. New equal_length generates equal length vectors. New from_hedgehog converts hedgehog quickcheck generator. New as_hedgehog converts quickcheck hedgehog generator. New repeat_test tests property repeatedly.","code":""},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
