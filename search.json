[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Examples.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing +","title":"Examples","text":"","code":"test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1L),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     c = numeric_(len = 1L),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           })"},{"path":"/articles/Examples.html","id":"testing-baserev","dir":"Articles","previous_headings":"","what":"Testing base::rev","title":"Examples","text":"","code":"test_that(\"reverse of reverse is identity\", {   for_all(     a = any_vector(len = c(1L, 10L)),     property = \\(a) a |> rev() |> rev() |> expect_equal(a)   ) })  test_that(\"reverse of concatenation is flipped concatenation of reversed\", {   for_all(     a = integer_(len = c(1L, 10L)),     b = integer_(len = c(1L, 10L)),     property = \\(a, b) rev(c(a, b)) |> expect_equal(c(rev(b), rev(a)))   ) })"},{"path":"/articles/Examples.html","id":"testing-stringrstr_c","dir":"Articles","previous_headings":"","what":"Testing stringr::str_c","title":"Examples","text":"","code":"test_that(\"str_c does nothing with a single input string\", {   for_all(     a = character_(len = 1L),     property = \\(a) str_c(a) |> expect_equal(a)   ) })  test_that(\"str_c returns a single string with multiple input strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     c = character_(len = 1L),     property = \\(a, b, c) str_c(a, b, c) |> length() |> expect_equal(1L)   ) })  test_that(\"concatenation of strings always contains the original strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     property = \\(a, b) {       str_c(a, b) |> str_detect(fixed(a)) |> expect_true()       str_c(a, b) |> str_detect(fixed(b)) |> expect_true()     }   ) })"},{"path":"/articles/Examples.html","id":"testing-dplyrdistinct","dir":"Articles","previous_headings":"","what":"Testing dplyr::distinct","title":"Examples","text":"","code":"test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = \\(a) expect_equal(a, a + 0)   )           }) #> Test passed 😸  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = \\(a, b) expect_equal(a + b, b + a)   )           }) #> Test passed 😸  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) #> Test passed 🌈 library(dplyr, warn.conflicts = FALSE)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) }) #> Test passed 🥳  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) }) #> Test passed 🎉  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) }) #> Test passed 🎊"},{"path":"/index.html","id":"quickcheck-generators","dir":"","previous_headings":"","what":"Quickcheck generators","title":"Property Based Testing","text":"Many generators provided quickcheck. examples.","code":""},{"path":"/index.html","id":"atomic-vectors","dir":"","previous_headings":"Quickcheck generators","what":"Atomic vectors","title":"Property Based Testing","text":"","code":"integer_(len = 10) |> show_example() #>  [1] -6439 -7255 -8538 -4753 -7722     0     0 -9116  -981  7219 character_alphanumeric(len = 10) |> show_example() #>  [1] \"4nRd0\"     \"xHZ\"       \"Cr\"        \"h\"         \"IYQ\"       \"EN9mLq530\" #>  [7] \"8gCYVI\"    \"8\"         \"3fq\"       \"buD\" posixct_(len = 10, any_na = TRUE) |> show_example()  #>  [1] \"0540-10-28 15:39:47 LMT\" \"1710-08-04 22:32:48 LMT\" #>  [3] NA                        NA                        #>  [5] NA                        \"2560-01-25 11:40:22 PST\" #>  [7] \"2775-08-25 15:59:04 PDT\" \"1328-06-08 23:42:18 LMT\" #>  [9] \"1514-12-20 01:15:39 LMT\" \"2201-08-15 14:26:48 PDT\""},{"path":"/index.html","id":"lists","dir":"","previous_headings":"Quickcheck generators","what":"Lists","title":"Property Based Testing","text":"","code":"list_(a = constant(NULL), b = any_undefined()) |> show_example() #> $a #> NULL #>  #> $b #> [1] NA flat_list_of(logical_(), len = 3) |> show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] FALSE"},{"path":"/index.html","id":"tibbles","dir":"","previous_headings":"Quickcheck generators","what":"Tibbles","title":"Property Based Testing","text":"","code":"tibble_(a = date_(), b = hms_(), rows = 5) |> show_example() #> # A tibble: 5 x 2 #>   a          b               #>   <date>     <time>          #> 1 2556-03-01 06:54:03.370342 #> 2 1674-02-21 00:24:27.965290 #> 3 1067-01-06 02:55:22.667964 #> 4 2163-07-01 06:41:40.328154 #> 5 2175-03-31 09:35:31.354103 tibble_of(double_bounded(-10, 10), rows = 3, cols = 3) |> show_example() #> # A tibble: 3 x 3 #>    ...1  ...2   ...3 #>   <dbl> <dbl>  <dbl> #> 1  1.20  7.22  1.60  #> 2  3.01 -8.17 -0.583 #> 3  0    -9.76  4.06 any_tibble(rows = 3, cols = 3) |> show_example() #> # A tibble: 3 x 3 #>   ...1     ...2      ...3      #>   <fct>    <fct>     <list>    #> 1 *7|27<r@ '6VlypbL  <dbl [1]> #> 2 vg       oMP_      <dbl [1]> #> 3 (+JmT{|1 0AaJhuatl <dbl [1]>"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used wrapping from_hedgehog. hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error: quickcheck generator can also converted hedgehog generator can used hedgehog functions.","code":"library(hedgehog)  is_even <-    \\(a) a %% 2 == 0  gen_powers_of_two <-    gen.element(1:10) |> gen.with(\\(a) 2 ^ a)  test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) |> expect_true()   ) }) #> Test passed 😀 test_that(\"powers of two and integers are both numeric values\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     b = integer_(),     property = \\(a, b) c(a, b) |> is.numeric() |> expect_true()   ) }) #> Test passed 🥳 test_that(\"composing hedgehog with quickcheck generators fails\", {   tibble_of(from_hedgehog(gen_powers_of_two)) |> expect_error() }) #> Test passed 🎉 gen_powers_of_two <-    integer_bounded(1L, 10L, len = 1L) |>      as_hedgehog() |>      gen.with(\\(a) 2 ^ a)   test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) |> expect_true()   ) }) #> Test passed 😀"},{"path":"/index.html","id":"fuzz-tests","dir":"","previous_headings":"","what":"Fuzz tests","title":"Property Based Testing","text":"Fuzz testing special case property based testing property tested code doesn’t fail range inputs. example fuzz testing quickcheck. Let’s say want test purrr::map function won’t fail vector input.","code":"test_that(\"map won't fail with any vector as input\", {   for_all(     a = any_vector(),     property = \\(a) purrr::map(a, identity) |> expect_silent()   ) }) #> Test passed 🥇"},{"path":"/index.html","id":"repeat-tests","dir":"","previous_headings":"","what":"Repeat tests","title":"Property Based Testing","text":"Repeat tests can used repeatedly test property holds true many calls function. different regular property based tests don’t require generators. function repeat_test call function many times ensure expectation passes cases. kind test can useful testing functions randomness.","code":"test_that(\"runif generates random numbers between a min and max value\", {   repeat_test(     property = \\() {       random_number <- runif(1, min = 0, max = 10)       expect_true(random_number >= 0 && random_number <= 10)     }   ) }) #> Test passed 🌈"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1] \"1717-11-05\" \"2575-05-24\" \"2087-03-02\" any_atomic(len = 10L, any_na = TRUE) |> show_example() #>  [1] \"2374-04-26\" \"1501-05-03\" \"1183-10-13\" \"2610-11-10\" \"1729-10-09\" #>  [6] \"2948-07-26\" \"1024-12-10\" \"2047-01-19\" \"1514-10-03\" \"2199-09-23\""},{"path":"/reference/any_data.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data.table generator — any_data.table","title":"Random data.table generator — any_data.table","text":"Generate random data.tables.","code":""},{"path":"/reference/any_data.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data.table generator — any_data.table","text":"","code":"any_data.table(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data.table generator — any_data.table","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data.table generator — any_data.table","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_data.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data.table generator — any_data.table","text":"","code":"any_data.table() |> show_example() #>                  ...1 #> 1: 844-04-22 20:55:00 #> 2:          663413764 #> 3:         p&\\\\dnu,_| #> 4:           G^&1HdD; any_data.table(rows = 10L) |> show_example() #>                    ...1  ...2      ...3 #>  1:                   0 -3958      :rH! #>  2:                sV)U -6582     []~f  #>  3:            78872905  4099       a0& #>  4:          1578-11-20 -9410     i<9H@ #>  5: 2116-05-23 07:39:09    94  Bo;QHeXX #>  6: 2926-07-18 11:18:24   273 l8hk]4=-1 #>  7:  631-02-06 06:46:47     0         ) #>  8: 2537-07-27 13:25:22  6834   1M}^Q%v #>  9:               -4212  3542     sDe_| #> 10:            P6l(DQgx -7267       u&Y #>                                                                             ...4 #>  1:                                                              11:54:23.750185 #>  2: 99-08-08 02:38:16,1217-04-02 13:06:51,810-08-21 20:22:15,2679-01-12 23:40:41 #>  3:        1144-03-29,2766-11-05,1987-11-01,2834-12-19,1731-01-18,1665-04-15,... #>  4:                                             2662-05-09,2681-04-11,1672-02-21 #>  5:                                              06:16:59.467046,04:59:39.600130 #>  6:                                                      sNTwGQn,,^:+,+4,o6T@!=N #>  7:                                                                U1T,Psk,\\\\BWG #>  8:        2674-11-22,2287-08-09,1125-03-29,2434-09-18,1213-01-06,1622-10-15,... #>  9:                    446-08-25 06:06:06,1418-04-20 06:10:50,875-01-19 11:41:38 #> 10:                                       657-08-22 05:46:40,2077-03-27 18:20:39 #>                    ...5  ...6       ...7       ...8 #>  1:                   0 -8246        PTN 2898-01-09 #>  2:      09:21:12.60835  9861 Y\\\\$YmLW=M 1206-01-31 #>  3:               -8607  7429  Gdp6MnR 3 2755-04-17 #>  4:          1950-03-08     0         '. 1646-05-19 #>  5:                TRUE -4355         BF 1098-11-27 #>  6: 1713-08-30 17:41:42 -9474    Z'K'@tj 1464-09-08 #>  7:            -8634596  -425       rmEd 2410-04-24 #>  8:                TRUE  3624          # 2773-02-18 #>  9:               FALSE -9001         ?> 1489-02-21 #> 10:                TRUE -9573    9c6a\\\\= 2282-01-30 any_data.table(cols = 5L, any_na = TRUE) |> show_example() #>    ...1 ...2 ...3            ...4                         ...5 #> 1: <NA> TRUE   NA 07:04:21.840074 NA,aJY,3Uw,8,NA,t*8x=K=0,..."},{"path":"/reference/any_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data frame generator — any_data_frame","title":"Random data frame generator — any_data_frame","text":"Generate random data frames.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data frame generator — any_data_frame","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data frame generator — any_data_frame","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data frame generator — any_data_frame","text":"","code":"any_data_frame() |> show_example() #>     ...1       ...2  ...3 #> 1 )Djqz/ 1089-04-15 q_WR_ any_data_frame(rows = 10L) |> show_example() #>     ...1 #> 1  -6814 #> 2  -6232 #> 3  -7032 #> 4  -6261 #> 5  -3914 #> 6  -2685 #> 7      0 #> 8   4752 #> 9   9846 #> 10  3506 any_data_frame(cols = 5L, any_na = TRUE) |> show_example() #>    ...1                ...2       ...3       ...4       ...5 #> 1    NA 2609-08-15 14:54:16 2388-12-04   OG Gbc;T       <NA> #> 2    NA 2083-10-02 22:05:34 1813-08-17       <NA>       <NA> #> 3    NA                <NA> 1603-09-20   ,ezinudQ 1268-09-30 #> 4    NA 1484-01-05 22:18:24 2612-11-01    E(A^6jK 2637-04-12 #> 5     1 2334-01-12 10:48:41       <NA>      ]Giwn 1524-11-03 #> 6     1                <NA>       <NA>       <NA> 1492-11-07 #> 7     1 2787-10-15 15:15:07       <NA>  cJ'rJC:dU 1446-01-24 #> 8     1                <NA> 2730-05-30 l&\\\\?LT\"L(       <NA> #> 9    NA 1896-06-28 10:38:07 1643-10-07     9)2Kj' 1748-02-17 #> 10    1  848-09-23 07:15:29 1754-10-27  QsmL9f\\\\. 2954-05-06"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat homogeneous list generator — any_flat_homogeneous_list","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic vector length 1 class.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() |> show_example() #> [[1]] #> [1] 807366463 #>  #> [[2]] #> [1] 30026226 #>  #> [[3]] #> [1] 932701371 #>  #> [[4]] #> [1] 919230613 #>  #> [[5]] #> [1] -542076261 #>  #> [[6]] #> [1] 0 #>  #> [[7]] #> [1] -484638321 #>  #> [[8]] #> [1] 490792961 #>  any_flat_homogeneous_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] TRUE #>  #> [[4]] #> [1] FALSE #>  #> [[5]] #> [1] TRUE #>  #> [[6]] #> [1] TRUE #>  #> [[7]] #> [1] TRUE #>  #> [[8]] #> [1] FALSE #>  #> [[9]] #> [1] FALSE #>  #> [[10]] #> [1] TRUE #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] 5513 #>  #> [[2]] #> [1] 832638094 #>  #> [[3]] #> [1] \"2275-02-08 11:17:28 UTC\" #>  #> [[4]] #> [1] \"941-04-29 06:06:43 UTC\" #>  #> [[5]] #> [1] |l #> Levels: |l #>  #> [[6]] #> [1] -389422749 #>  any_flat_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] -803243400 #>  #> [[3]] #> [1] -2605 #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] \"5+<9>w\" #>  #> [[6]] #> [1] 98989360 #>  #> [[7]] #> [1] FALSE #>  #> [[8]] #> [1] TRUE #>  #> [[9]] #> [1] -284218219 #>  #> [[10]] #> [1] -510 #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [1] -2038 #>  #> [[2]] #> [1] -5215 #>  #> [[3]] #> 02:16:26.227333 #>  #> [[4]] #> [1] \"2332-05-15\" #>  any_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] @ #> Levels: @ #>  #> [[2]] #> [1] -8407 -5258  3594 #>  #> [[3]] #> [1]  1 NA NA  1 #>  #> [[4]] #> [1] NA       \"vYdsyG\" #>  #> [[5]] #> [1]     0  3743  4871 -4580    NA  8761 -9812 -6365    NA #>  #> [[6]] #> 04:57:33.179547 #>              NA #>              NA #>  #> [[7]] #> [1] NA           \"1167-12-18\" NA           #>  #> [[8]] #> [1] \"2681-01-25 23:20:18 UTC\" #>  #> [[9]] #> [1]  132311081 -754386607         NA -528016620 #>  #> [[10]] #>  [1] \"\\\\^*kaoKf8\" \"ig#U2`#k\"   \"SgD\"        \"k)V@XzQ\"    \"Sr.xD\\\"%\"   #>  [6] \"c.SNoUn7@\"  \"eK,\\\"j.$\"   \"ZNQUj\"      \"~cL-*Yx{\"   NA           #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 4 × 5 #>   ...1                    ...2 ...3      ...4       ...5     #>   <list>                 <dbl> <list>    <list>     <chr>    #> 1 <named list [2]>  139861046. <fct [1]> <time [1]> z0r?d    #> 2 <named list [2]> -337711878. <fct [1]> <date [1]> ,7eX[HK) #> 3 <named list [2]>  305434308. <fct [1]> <dttm [1]> 8/       #> 4 <named list [2]> -297801097. <fct [1]> <chr [1]>  XR!(Ev%` any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 8 #>    ...1       ...2   ...3 ...4        ...5 ...6         ...7 ...8  #>    <list>     <lgl> <int> <list>     <int> <fct>       <int> <lgl> #>  1 <date [2]> FALSE  5699 <dbl [1]>  -2537 \"E1K?]8Jaf\"     0 FALSE #>  2 <dbl [1]>  TRUE    620 <chr [1]>  -6789 \"rdV9s\"      9312 TRUE  #>  3 <time [8]> FALSE   687 <chr [1]>   6098 \"FSNKO\"         0 FALSE #>  4 <lgl [3]>  TRUE  -7375 <fct [1]>  -3688 \"XA!\"        6623 FALSE #>  5 <dbl [10]> TRUE   8514 <chr [1]>  -9187 \"=R!\\\"CP(T\"  4463 TRUE  #>  6 <int [5]>  TRUE   8582 <int [1]>      0 \"<ir\"        9283 FALSE #>  7 <dttm [9]> FALSE -8614 <chr [1]>  -5582 \"?t!Z/\"     -2129 TRUE  #>  8 <date [1]> TRUE   3673 <chr [1]>    309 \"X'6B-)@\"   -6814 FALSE #>  9 <dbl [4]>  TRUE  -6285 <dbl [1]>   5600 \"eqah\\\"\"     9859 TRUE  #> 10 <time [3]> TRUE   3021 <dttm [1]> -6692 \"^5kL'\"      4953 TRUE  any_tibble(cols = 5L, any_na = TRUE) |> show_example() #> # A tibble: 5 × 5 #>   ...1              ...2 ...3       ...4       ...5       #>   <date>           <dbl> <list>     <list>     <list>     #> 1 1151-10-13  947732203. <lgl [7]>  <int [1]>  <lgl [6]>  #> 2 1841-04-24         NA  <fct [2]>  <time [1]> <lgl [1]>  #> 3 2296-11-15 -617909088. <int [4]>  <lgl [1]>  <dbl [6]>  #> 4 2964-05-13         NA  <int [6]>  <int [1]>  <chr [10]> #> 5 NA          513270560. <time [8]> <dttm [1]> <chr [5]>"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Undefined value generator — any_undefined","title":"Undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Undefined value generator — any_undefined","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined() |> show_example() #> [1] NaN"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [[1]] #> [1] \"c`E>\" #>  any_vector(len = 10L, any_na = TRUE) |> show_example() #>  [1] NA  1  1 NA  1  1  1 NA  1  1"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, data.frames, tibbles, data.tables, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything(any_empty = TRUE, any_undefined = TRUE)"},{"path":"/reference/anything.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any R object generator — anything","text":"any_empty Whether empty vectors data frames allowed. any_undefined Whether undefined values allowed.","code":""},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator generator","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() |> show_example() #> # A tibble: 6 × 9 #>   ...1                ...2  ...3    ...4 ...5         ...6   ...7         ...8   #>   <dttm>              <lgl> <list> <int> <list>       <list> <list>       <list> #> 1 133-11-30 03:17:42  NA    <date>  3160 <named list> <chr>  <named list> <int>  #> 2 210-12-04 16:59:18  NA    <chr>    263 <named list> <chr>  <named list> <int>  #> 3 926-07-11 21:19:31  NA    <dttm>  5289 <named list> <chr>  <named list> <dbl>  #> 4 1362-11-13 12:54:33 FALSE <dttm>    NA <named list> <chr>  <named list> <dbl>  #> 5 NA                  NA    <dbl>     NA <named list> <chr>  <named list> <dttm> #> 6 145-04-05 20:17:40  NA    <chr>     NA <named list> <chr>  <named list> <dttm> #> # … with 1 more variable: ...9 <dttm> anything(any_empty = FALSE, any_undefined = FALSE) |> show_example() #> # A tibble: 2 × 4 #>   ...1      ...2   ...3       ...4             #>   <list>    <fct>  <list>     <list>           #> 1 <lgl [1]> )*8)B; <chr [5]>  <named list [2]> #> 2 <lgl [1]> L      <int [10]> <named list [2]>"},{"path":"/reference/as_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"Convert quickcheck generator hedgehog generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"as_hedgehog(generator)"},{"path":"/reference/as_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"generator quickcheck_generator generator","code":""},{"path":"/reference/as_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) |>     as_hedgehog() |>     hedgehog::gen.with(\\(a) 2 ^ a) for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_letters(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_numbers(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_alphanumeric(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_empty Whether empty character values allowed.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"&-\"        \"ke*&U||i\"  \")Xz<5~:n\"  \"=8^3$g'\"   \")\\\\MU=&X~\" character_(len = 10L, any_na = TRUE) |> show_example() #>  [1] NA         NA         \"i7\"       NA         \"q!wtKVc_\" \"y1s~\"     #>  [7] \"2h,:Suh\"  \"5%&;U\"    NA         NA         character_(len = 10L, any_empty = TRUE) |> show_example() #>  [1] \"v\"         \"\"          \"\"          \"\"          \"*i;52cg\"   \"\"          #>  [7] \"c>hif9\"    \"$.\"        \"c!|%0o>=%\" \"qm$9I\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/data.table_.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generators — data.table_","title":"data.table generators — data.table_","text":"Construct data.table generators similar way data.table::data.table.","code":""},{"path":"/reference/data.table_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generators — data.table_","text":"","code":"data.table_(..., rows = c(1L, 10L))"},{"path":"/reference/data.table_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generators — data.table_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data.table_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generators — data.table_","text":"quickcheck_generator generator","code":""},{"path":"/reference/data.table_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generators — data.table_","text":"","code":"data.table_(a = integer_()) |> show_example() #>        a #> 1:  9332 #> 2:  3210 #> 3: -7697 #> 4:  7616 #> 5: -2636 #> 6: -9643 #> 7:  2821 #> 8: -5195 #> 9:  1569 data.table_(a = integer_(), b = character_(), rows = 5L) |> show_example() #>       a        b #> 1: 8240     (\\\\; #> 2: 1286 c\\\\8:5u) #> 3: 5580   \\\\94rz #> 4: 4253   YfuHyh #> 5:    0    ]5g q"},{"path":"/reference/data.table_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data.table generator — data.table_of","title":"Random data.table generator — data.table_of","text":"Random data.table generator","code":""},{"path":"/reference/data.table_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data.table generator — data.table_of","text":"","code":"data.table_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data.table_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data.table generator — data.table_of","text":"... set unnamed generators. generated data.tables built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data.table_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data.table generator — data.table_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/data.table_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data.table generator — data.table_of","text":"","code":"data.table_of(logical_(), date_()) |> show_example() #>          ...1  ...2  ...3       ...4       ...5       ...6       ...7 #> 1: 2327-05-19  TRUE FALSE 1124-01-06 1819-10-31 1809-06-22 2222-07-23 #> 2: 2254-07-07  TRUE  TRUE 1006-12-22 2545-11-01 1662-01-19 2899-03-12 #> 3: 2053-09-04  TRUE  TRUE 2996-03-16 1590-07-20 1935-04-28 1904-06-02 #> 4: 2246-07-09 FALSE  TRUE 1794-06-09 1288-04-23 1419-09-25 2322-02-18 #> 5: 2077-12-10 FALSE  TRUE 2841-11-26 1394-12-05 2651-10-16 2641-07-23 #> 6: 1800-02-13  TRUE FALSE 2259-05-01 1416-05-19 2885-03-21 2254-07-04 #> 7: 2744-02-20  TRUE FALSE 1270-06-18 2891-09-21 1356-01-23 1123-03-26 #> 8: 2055-10-26  TRUE FALSE 2595-06-26 2156-02-18 1451-09-13 1708-10-26 #> 9: 2074-04-25  TRUE  TRUE 1905-07-28 1318-12-19 2254-02-07 1068-04-30 #>          ...8       ...9 ...10 #> 1: 1632-09-30 1336-06-04 FALSE #> 2: 2388-02-09 1298-03-09  TRUE #> 3: 1961-05-07 1634-05-20 FALSE #> 4: 1841-07-09 1243-12-28 FALSE #> 5: 2423-07-01 1254-10-09  TRUE #> 6: 1829-03-14 2918-10-28 FALSE #> 7: 2412-03-29 2157-12-10  TRUE #> 8: 1713-04-03 2028-03-17 FALSE #> 9: 2590-01-18 2413-10-18 FALSE data.table_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #>          ...1       ...2       ...3       ...4                ...5 #>  1:       Q=r  -20037655          0 1644-06-30 2550-09-22 03:02:01 #>  2: Arm|mTDWZ -421961054  722144607 2423-12-08  875-11-09 02:49:15 #>  3:     xU4-E  409182623  865335608 1560-10-07 1760-10-19 11:50:34 #>  4:     /9Jud          0  750073798 1953-04-09  732-08-09 09:30:27 #>  5:        \\\\ -644697727 -392545585 1156-12-01  588-05-30 07:04:24 #>  6: AO\\\\vG{%N  617838989  228471166 2127-01-07 1406-05-12 19:44:53 #>  7:         Y -207329682          0 2546-01-15 1299-04-27 14:47:21 #>  8: #{_`y'4&A  829511247 -472410047 2504-11-19 1452-06-22 13:58:58 #>  9:  ;#&XEA6U -515959830  779554240 2969-05-18 2424-03-15 03:36:27 #> 10:       ?S? -932979626 -428285163 2484-03-30 1705-02-13 20:22:44"},{"path":"/reference/data_frame_.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generators — data_frame_","title":"Data frame generators — data_frame_","text":"Construct data frame generators similar way data_frame.","code":""},{"path":"/reference/data_frame_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(..., rows = c(1L, 10L))"},{"path":"/reference/data_frame_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generators — data_frame_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data_frame_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generators — data_frame_","text":"quickcheck_generator generator","code":""},{"path":"/reference/data_frame_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(a = integer_()) |> show_example() #>      a #> 1 8114 #> 2 7546 data_frame_(a = integer_(), b = character_(), rows = 5L) |> show_example() #>       a         b #> 1 -7029       N_% #> 2 -4980    PTOc\\\\ #> 3  2667  J/\"Poi;t #> 4  -547 NM'KA42Z= #> 5  7477  @n6s10Qh"},{"path":"/reference/data_frame_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data frame generator — data_frame_of","title":"Random data frame generator — data_frame_of","text":"Random data frame generator","code":""},{"path":"/reference/data_frame_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data frame generator — data_frame_of","text":"","code":"data_frame_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data_frame_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data frame generator — data_frame_of","text":"... set unnamed generators. generated data frames built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data_frame_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data frame generator — data_frame_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/data_frame_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data frame generator — data_frame_of","text":"","code":"data_frame_of(logical_(), date_()) |> show_example() #>    ...1  ...2       ...3       ...4 #> 1 FALSE  TRUE 2835-09-13 1493-09-04 #> 2 FALSE  TRUE 2790-04-29 1822-03-20 #> 3  TRUE FALSE 2954-10-10 2059-07-07 #> 4 FALSE FALSE 1894-03-03 2791-09-21 #> 5  TRUE FALSE 1642-06-24 2971-07-26 #> 6  TRUE  TRUE 1007-05-23 2280-10-03 #> 7  TRUE  TRUE 1737-08-17 2053-11-29 #> 8 FALSE FALSE 2928-04-06 2102-07-03 #> 9 FALSE FALSE 2978-02-15 1233-01-15 data_frame_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #>         ...1       ...2  ...3                ...4  ...5 #> 1       pyX7 -878824948 -5791  108-06-11 06:20:35 FALSE #> 2    &Q+FDrL  302457417   415 2741-08-16 06:53:59  TRUE #> 3         {(  -10269924 -2586  923-06-27 19:31:26  TRUE #> 4       lb,p -825371704 -9918 2027-03-06 05:25:06 FALSE #> 5   'b8AEm(Q -277439768 -7622  159-09-22 11:10:21  TRUE #> 6       Ef\"3          0 -1598  113-01-13 02:03:13  TRUE #> 7       ynpy          0  5356 1004-02-07 19:59:16 FALSE #> 8      [B68T -529064248 -3856  681-07-10 20:59:03 FALSE #> 9   o|mWAStb -945006428 -3868 2049-01-08 20:00:32 FALSE #> 10 !4z\\\\dZ5/  716470504   450 2951-09-09 21:53:58  TRUE"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), any_na = FALSE)  date_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  date_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  date_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"2656-02-22\" \"1471-06-17\" \"1823-03-13\" \"1509-11-16\" \"2718-04-26\" #> [6] \"2062-07-29\" \"1090-06-09\" \"2628-02-13\" \"1540-09-26\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-02\" \"2020-01-03\" \"2020-01-01\" \"2020-01-01\" \"2020-01-09\" #> [6] \"2020-01-05\" \"2020-01-04\" \"2020-01-10\" \"2020-01-03\" date_(len = 10L, any_na = TRUE) |> show_example() #>  [1] \"2820-08-17\" \"2768-01-22\" \"2778-10-11\" \"1439-10-09\" \"1429-04-20\" #>  [6] \"2835-09-25\" \"2233-05-31\" \"2758-04-06\" NA           NA"},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE )  double_left_bounded(   left,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_nan Whether NaN values allowed. any_inf Whether Inf/-Inf values allowed. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1] -543379167          0 -116917762  290235828  108002402 -385267624          0 #> [8] -666344500 double_(big_dbl = TRUE) |> show_example() #> [1] -7.119227e+307 -2.790302e+307 -5.886042e+307   0.000000e+00  1.990745e+307 #> [6]   0.000000e+00 double_bounded(left = -5, right = 5) |> show_example() #> [1] 0 double_(len = 10L, any_na = TRUE) |> show_example() #>  [1]  840299423  -43071975         NA         NA -420000570          0 #>  [7] -691174615  180570139 -815639839         NA double_(len = 10L, any_nan = TRUE, any_inf = TRUE) |> show_example() #>  [1] -651711985       -Inf       -Inf        Inf  788391651 -797851412 #>  [7]  235142801 -689052241        NaN        NaN"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal length vector generator — equal_length","title":"Equal length vector generator — equal_length","text":"Generates equal length vectors contained list.","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(..., len = c(1L, 10L))"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal length vector generator — equal_length","text":"... set vector generators. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal length vector generator — equal_length","text":"quickcheck_generator generator","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(integer_(), double_()) |> show_example() #> [[1]] #> [1] 0 #>  #> [[2]] #> [1] 0 #>  equal_length(a = logical_(), b = character_(), len = 5L) |> show_example() #> $a #> [1] FALSE  TRUE FALSE FALSE  TRUE #>  #> $b #> [1] \"<\"          \">qxP(LZ\"    \"[RO\\\\$\"     \"#,EALp\\\"\\\\\" \"\\\\{cW9[KC\"  #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] j #> Levels: j factor_(len = 10L, any_na = TRUE) |> show_example() #>  [1]  1  1 NA  1  1  1 NA  1  1  1"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"generate flat lists values coming single input generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] -7899 #>  #> [[2]] #> [1] -3202 #>  #> [[3]] #> [1] -2189 #>  #> [[4]] #> [1] 1524 #>  #> [[5]] #> [1] 9016 #>  #> [[6]] #> [1] 0 #>  #> [[7]] #> [1] 4406 #>  #> [[8]] #> [1] -8431 #>  #> [[9]] #> [1] -327 #>  #> [[10]] #> [1] -1636 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen generator","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) |> hedgehog::gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), any_na = FALSE)  hms_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  hms_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  hms_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 03:26:09.425850 #> 07:00:20.724277 #> 20:47:41.186467 #> 03:57:30.957577 #> 23:55:55.316252 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 06:45:18.028790 #> 03:16:35.674231 #> 01:04:10.588126 #> 03:35:09.283289 #> 07:42:19.748744 hms_(len = 10L, any_na = TRUE) |> show_example() #> 05:35:42.693033 #> 22:14:57.770780 #> 17:40:50.578779 #> 08:40:17.062040 #>              NA #> 12:19:09.758239 #>              NA #>              NA #> 04:38:28.938265 #> 06:03:15.192041"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  integer_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_positive(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_negative(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1] -4563 integer_(big_int = TRUE) |> show_example() #> [1]          0   17839959 1356416855 1703762469          0  131186232  906593385 #> [8] 1468843130  118816657 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1]  4 -3  0 -3 -5 -1  2  2  2 integer_(len = 10L, any_na = TRUE) |> show_example() #>  [1] 6417   NA 7694   NA 2931 -716   NA 5692 4750 4591"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #>  [1]  1145  -122  1872  5005  4872  1966  7839 -5316 -9228     0 #>  #> [[2]] #> [1] FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> 08:13:30.719480 #> 20:38:17.513430 #> 19:40:04.240583 #> 07:59:27.876514 #> 08:25:29.615266 #> 16:56:32.813717 #> 01:23:07.710651 #> 02:30:06.105672 #> 00:35:21.661964 #>  #> $b #> [1] -2982     0 -6370  7137 -6203 #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1]  7952  2788 -6402 -9230  8920  2467 -9054 #>  #> [[2]] #> [1]  2646     0 -5348 -3404 -1500  4387     0 #>  #> [[3]] #> [1]  6627  3502   932     0  5288 -8359 -8551 -5489 #>  #> [[4]] #> [1] -4346  1616  2009 -5591 #>  #> [[5]] #> [1]  5368 -8921  3981  6590     0 -4567 -8459   530  8190 #>  #> [[6]] #> [1]  4501 -3044  9623 #>  #> [[7]] #> [1] -2334  2744  1453 #>  #> [[8]] #> [1]  8458  6901  1606 -7000  -493  2330 #>  #> [[9]] #> [1] -6073 -1887 -5687   988     0  7613  5292  5771 #>  #> [[10]] #> [1] -9661     0 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1]  TRUE FALSE FALSE  TRUE  TRUE logical_(len = 10L, any_na = TRUE) |> show_example() #>  [1]    NA  TRUE    NA FALSE  TRUE FALSE    NA FALSE  TRUE    NA"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  numeric_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_positive(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_negative(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1] -7537  3843 -8470 numeric_(big_num = TRUE) |> show_example() #> [1]  -146146093  -572023827 -1210015790 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1] -1.5486614  0.7953143  0.3946589 -1.8543630  4.2089877 -2.5257700 -3.3471750 numeric_(len = 10L, any_na = TRUE) |> show_example() #>  [1]  698264695 -260471046 -631147172 -152755140 -587782242          0 #>  [7]         NA -528451793   29624850          0"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1] -4321 -5408  1137 -9792     0  4500  9062     0 one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> [1] FALSE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), any_na = FALSE)  posixct_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  posixct_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  posixct_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"352-02-09 12:19:28 UTC\"  \"1189-08-22 22:33:29 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-08-16 23:17:05 UTC\" \"2020-08-29 00:59:41 UTC\" #> [3] \"2020-06-11 21:40:47 UTC\" \"2020-06-08 15:25:13 UTC\" #> [5] \"2020-03-17 07:14:48 UTC\" \"2020-12-29 03:34:19 UTC\" posixct_(len = 10L, any_na = TRUE) |> show_example() #>  [1] \"385-03-21 18:21:15 UTC\"  \"2959-04-19 03:33:31 UTC\" #>  [3] NA                        \"238-09-17 04:56:48 UTC\"  #>  [5] \"523-04-15 07:36:04 UTC\"  \"1869-07-21 13:24:26 UTC\" #>  [7] \"1299-02-25 15:12:21 UTC\" \"2473-04-26 01:10:12 UTC\" #>  [9] \"2325-10-17 17:40:16 UTC\" \"2954-09-26 21:59:06 UTC\""},{"path":"/reference/repeat_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly test properties of a function — repeat_test","title":"Repeatedly test properties of a function — repeat_test","text":"Repeatedly test properties function","code":""},{"path":"/reference/repeat_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(property, tests = getOption(\"quickcheck.tests\", 100L))"},{"path":"/reference/repeat_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly test properties of a function — repeat_test","text":"property anonymous function arguments includes expectation. tests number tests run.","code":""},{"path":"/reference/repeat_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly test properties of a function — repeat_test","text":"testthat expectation object.","code":""},{"path":"/reference/repeat_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(   property = \\() {     num <- stats::runif(1, min = 0, max = 10)     testthat::expect_true(num >= 0 && num <= 10)   } )"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 10 × 1 #>        a #>    <int> #>  1  8232 #>  2 -5288 #>  3 -2634 #>  4  -333 #>  5     0 #>  6   360 #>  7  7277 #>  8    37 #>  9 -5957 #> 10 -5689 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b        #>   <int> <chr>    #> 1  5035 \"([\"     #> 2 -9622 \"mB=\"    #> 3   664 \"S-P\"    #> 4 -2873 \"s/)J\"   #> 5  6441 \"gF(\\\"}\""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 10 × 5 #>    ...1  ...2       ...3       ...4  ...5  #>    <lgl> <date>     <date>     <lgl> <lgl> #>  1 FALSE 1332-01-16 2540-04-14 FALSE FALSE #>  2 TRUE  1948-02-27 2191-05-11 TRUE  FALSE #>  3 TRUE  1028-08-04 2128-06-22 TRUE  FALSE #>  4 TRUE  2882-06-19 1705-04-02 FALSE FALSE #>  5 FALSE 1342-06-30 1419-05-02 FALSE FALSE #>  6 FALSE 2521-10-08 2888-12-03 TRUE  FALSE #>  7 FALSE 1157-11-01 2532-01-31 TRUE  TRUE  #>  8 TRUE  1976-01-02 2634-05-21 FALSE TRUE  #>  9 TRUE  2965-03-23 1511-07-29 FALSE FALSE #> 10 TRUE  1124-09-03 1174-10-30 TRUE  TRUE  tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>    ...1  ...2      ...3            ...4  ...5     #>    <lgl> <fct>     <time>          <lgl> <chr>    #>  1 FALSE \"i5}&\"    11:46:43.134800 TRUE  }54{D5/  #>  2 FALSE \"jaI8bBg\" 07:12:46.653561 TRUE  r eoBr   #>  3 FALSE \"$E@OUn\"  03:17:04.302950 FALSE 9='UQ$!  #>  4 FALSE \"~V\"      11:52:14.167475 TRUE  [}%5T    #>  5 TRUE  \"1s\"      02:43:13.053068 TRUE  f        #>  6 TRUE  \"}s\"      15:13:04.293623 TRUE  vI8cO5zn #>  7 TRUE  \"^xj]lY\"  10:17:14.106491 TRUE  aE#s0    #>  8 TRUE  \"N^NB\"    10:21:33.239403 TRUE  ^C       #>  9 TRUE  \"\\\\.\"     10:19:57.395608 FALSE ]?}}     #> 10 FALSE \"M\"       17:58:48.888633 TRUE  H|:9u9W"},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
