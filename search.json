[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = function(a) expect_equal(a, a + 0)   ) }) #> Test passed 🎉  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = function(a, b) expect_equal(a + b, b + a)   ) }) #> Test passed 😸  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = function(a, b, c) expect_equal(a + (b + c), (a + b) + c)   ) }) #> Test passed 😀 library(dplyr, warn.conflicts = FALSE)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = function(a) {       distinct(a) %>% expect_equal(a)     }   ) }) #> Test passed 🎊  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = function(a) {       bind_rows(a, a) %>%         distinct() %>%         expect_equal(a)     }   ) }) #> Test passed 🎊  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = function(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) %>% expect_equal(unique_rows)     }   ) }) #> Test passed 😀"},{"path":"/index.html","id":"quickcheck-generators","dir":"","previous_headings":"","what":"Quickcheck generators","title":"Property Based Testing","text":"Many generators provided quickcheck. examples.","code":""},{"path":"/index.html","id":"atomic-vectors","dir":"","previous_headings":"Quickcheck generators","what":"Atomic vectors","title":"Property Based Testing","text":"","code":"integer_(len = 10) %>% show_example() #>  [1]  -833  5111 -8831 -3495 -1899  1051  9964  2473  9557 -2465 character_alphanumeric(len = 10) %>% show_example() #>  [1] \"y5Ph\"      \"8\"         \"B8\"        \"3vOcYf\"    \"qr\"        \"o\"         #>  [7] \"5rW2nHdrA\" \"88\"        \"umU\"       \"vJpqr\" posixct_(len = 10, any_na = TRUE) %>% show_example() #>  [1] \"1652-02-25 11:34:40 LMT\" \"1683-08-15 05:26:47 LMT\" #>  [3] \"2339-08-19 19:19:07 PDT\" \"0244-05-09 12:26:30 LMT\" #>  [5] \"0756-11-24 03:23:10 LMT\" \"0660-04-16 21:21:08 LMT\" #>  [7] \"2993-05-14 04:45:47 PDT\" NA                        #>  [9] \"1301-04-09 00:40:00 LMT\" NA"},{"path":"/index.html","id":"lists","dir":"","previous_headings":"Quickcheck generators","what":"Lists","title":"Property Based Testing","text":"","code":"list_(a = constant(NULL), b = any_undefined()) %>% show_example() #> $a #> NULL #>  #> $b #> [1] -Inf flat_list_of(logical_(), len = 3) %>% show_example() #> [[1]] #> [1] TRUE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] TRUE"},{"path":"/index.html","id":"tibbles","dir":"","previous_headings":"Quickcheck generators","what":"Tibbles","title":"Property Based Testing","text":"","code":"tibble_(a = date_(), b = hms_(), rows = 5) %>% show_example() #> # A tibble: 5 x 2 #>   a          b               #>   <date>     <time>          #> 1 1271-08-16 22:32:16.108893 #> 2 2788-05-31 20:37:31.119791 #> 3 1246-05-10 09:14:29.411623 #> 4 2434-06-08 16:01:39.498445 #> 5 1074-10-19 04:07:18.552658 tibble_of(double_bounded(-10, 10), rows = 3, cols = 3) %>% show_example() #> # A tibble: 3 x 3 #>    ...1  ...2  ...3 #>   <dbl> <dbl> <dbl> #> 1  0     2.55  5.81 #> 2  4.42  8.87 -5.43 #> 3  9.45  7.02 -3.97 any_tibble(rows = 3, cols = 3) %>% show_example() #> # A tibble: 3 x 3 #>   ...1             ...2       ...3       #>   <list>           <list>     <date>     #> 1 <named list [2]> <time [2]> 1628-11-24 #> 2 <named list [2]> <time [7]> 2989-06-25 #> 3 <named list [2]> <fct [4]>  2175-02-14"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used wrapping from_hedgehog. hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error: quickcheck generator can also converted hedgehog generator can used hedgehog functions.","code":"library(hedgehog)  is_even <-   function(a) a %% 2 == 0  gen_powers_of_two <-   gen.element(1:10) %>% gen.with(function(a) 2^a)  test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = function(a) is_even(a) %>% expect_true()   ) }) #> Test passed 😀 test_that(\"powers of two and integers are both numeric values\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     b = integer_(),     property = function(a, b) {       c(a, b) %>%         is.numeric() %>%         expect_true()     }   ) }) #> Test passed 🎉 test_that(\"composing hedgehog with quickcheck generators fails\", {   tibble_of(from_hedgehog(gen_powers_of_two)) %>% expect_error() }) #> Test passed 🥇 gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) %>%   as_hedgehog() %>%   gen.with(function(a) 2^a)   test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = function(a) is_even(a) %>% expect_true()   ) }) #> Test passed 😀"},{"path":"/index.html","id":"fuzz-tests","dir":"","previous_headings":"","what":"Fuzz tests","title":"Property Based Testing","text":"Fuzz testing special case property based testing property tested code doesn’t fail range inputs. example fuzz testing quickcheck. Let’s say want test purrr::map function won’t fail vector input.","code":"test_that(\"map won't fail with any vector as input\", {   for_all(     a = any_vector(),     property = function(a) purrr::map(a, identity) %>% expect_silent()   ) }) #> Test passed 🎉"},{"path":"/index.html","id":"repeat-tests","dir":"","previous_headings":"","what":"Repeat tests","title":"Property Based Testing","text":"Repeat tests can used repeatedly test property holds true many calls function. different regular property based tests don’t require generators. function repeat_test call function many times ensure expectation passes cases. kind test can useful testing functions randomness.","code":"test_that(\"runif generates random numbers between a min and max value\", {   repeat_test(     property = function() {       random_number <- runif(1, min = 0, max = 10)       expect_true(random_number >= 0 && random_number <= 10)     }   ) }) #> Test passed 🎉"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Any atomic vector generator — any_atomic","title":"Any atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any atomic vector generator — any_atomic","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any atomic vector generator — any_atomic","text":"","code":"any_atomic() %>% show_example() #> [1] 7veT3   ZqW     2       -R]Gk]+ #> Levels: 7veT3 ZqW 2 -R]Gk]+ any_atomic(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  1  1 NA NA  1  1 NA NA  1 NA"},{"path":"/reference/any_data.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data.table generator — any_data.table","title":"Any data.table generator — any_data.table","text":"Generate data.tables.","code":""},{"path":"/reference/any_data.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data.table generator — any_data.table","text":"","code":"any_data.table(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data.table generator — any_data.table","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data.table generator — any_data.table","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_data.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data.table generator — any_data.table","text":"","code":"any_data.table(rows = 3L, cols = 3L) %>% show_example() #>                   ...1            ...2       ...3 #> 1:               \"Vg+q 12:12:41.035174 2908-05-23 #> 2: i8,-5,(EQ<!@EIJ,jH? 09:43:53.218898 1592-10-16 #> 3:          -781783973 16:31:26.777881 2142-07-24"},{"path":"/reference/any_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data frame generator — any_data_frame","title":"Any data frame generator — any_data_frame","text":"Generate data.frames.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data frame generator — any_data_frame","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data frame generator — any_data_frame","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = 3L, cols = 3L) %>% show_example() #>    ...1     ...2  ...3 #> 1 FALSE      })j FALSE #> 2 FALSE qR&H.m.y  TRUE #> 3  TRUE    WH/kh FALSE"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any flat homogeneous list generator — any_flat_homogeneous_list","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic scalar class.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() %>% show_example() #> [[1]] #> 19:37:00.804614 #>  any_flat_homogeneous_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] FALSE #>  #> [[5]] #> [1] FALSE #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] FALSE #>  #> [[8]] #> [1] TRUE #>  #> [[9]] #> [1] TRUE #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any flat list generator — any_flat_list","title":"Any flat list generator — any_flat_list","text":"Generate lists element atomic scalar.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any flat list generator — any_flat_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any flat list generator — any_flat_list","text":"","code":"any_flat_list() %>% show_example() #> [[1]] #> 22:20:50.520989 #>  #> [[2]] #> 19:02:30.308125 #>  #> [[3]] #> [1] TRUE #>  any_flat_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [1] 736826436 #>  #> [[2]] #> [1] \"2963-07-03\" #>  #> [[3]] #> [1] IPm #> Levels: IPm #>  #> [[4]] #> 15:10:39.245475 #>  #> [[5]] #> 20:46:04.42563 #>  #> [[6]] #> [1] NA #>  #> [[7]] #> 06:40:19.200807 #>  #> [[8]] #> [1] -502942623 #>  #> [[9]] #> [1] \" \" #>  #> [[10]] #> [1] FALSE #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any list generator — any_list","title":"Any list generator — any_list","text":"Generate lists containing lists atomic vectors.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any list generator — any_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any list generator — any_list","text":"","code":"any_list() %>% show_example() #> [[1]] #> [1]  Y- #> Levels:  Y- #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> 22:54:51.078941 #>  #> [[4]] #> [1] 0 #>  #> [[5]] #> [1] FALSE #>  any_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] ~J #> Levels: ~J #>  #> [[5]] #> [1] 0 #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] \"1639-09-21\" #>  #> [[8]] #> [1] \"858-07-25 10:06:42 UTC\" #>  #> [[9]] #> [1] -87962685 #>  #> [[10]] #> [1] \"1049-12-04\" #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Any tibble generator — any_tibble","title":"Any tibble generator — any_tibble","text":"Generate tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any tibble generator — any_tibble","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble(rows = 3L, cols = 3L) %>% show_example() #> # A tibble: 3 × 3 #>   ...1                ...2  ...3       #>   <dttm>              <lgl> <list>     #> 1 988-10-02 22:21:18  TRUE  <time [1]> #> 2 222-10-07 07:34:11  TRUE  <time [1]> #> 3 1101-07-08 16:08:54 FALSE <time [1]>"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Any undefined value generator — any_undefined","title":"Any undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any undefined value generator — any_undefined","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any undefined value generator — any_undefined","text":"","code":"any_undefined() %>% show_example() #> [1] NA"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Any vector generator — any_vector","title":"Any vector generator — any_vector","text":"Generate atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any vector generator — any_vector","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any vector generator — any_vector","text":"","code":"any_vector() %>% show_example() #>  [1]  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE any_vector(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> NA #>  #> [[2]] #> [1] \"1297-08-24\" #>  #> [[3]] #> [1] 5W #> Levels: 5W #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] FALSE #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] i #> Levels: i #>  #> [[8]] #> [1] -627341549 #>  #> [[9]] #> [1] 7v#S7{ #> Levels: 7v#S7{ #>  #> [[10]] #> [1] \"996-06-13 21:03:01 UTC\" #>"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, data.frames, tibbles, data.tables, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything(any_empty = TRUE, any_undefined = TRUE)"},{"path":"/reference/anything.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any R object generator — anything","text":"any_empty Whether empty vectors data frames allowed. any_undefined Whether undefined values allowed.","code":""},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator object.","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() %>% show_example() #> [1] -7460     0"},{"path":"/reference/as_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"Convert quickcheck generator hedgehog generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"as_hedgehog(generator)"},{"path":"/reference/as_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"generator quickcheck_generator object.","code":""},{"path":"/reference/as_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"quickcheck_generator object.","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"is_even <-   function(a) a %% 2L == 0L gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) %>%     as_hedgehog() %>%     hedgehog::gen.with(function(a) 2 ^ a) for_all(   a = from_hedgehog(gen_powers_of_two),   property = function(a) is_even(a) %>% testthat::expect_true() )"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_letters(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_numbers(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_alphanumeric(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_empty Whether empty character values allowed.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator object.","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() %>% show_example() #> [1] \"14yDw}\"    \"14yDw}\"    \"~X9fQ\"     \"G\"         \"X$mhm~9;+\" \"\\\"Sp}#/\"   #> [7] \"@}%\"       character_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] \"bn6:2j\"    \"rP\"        \"2{n\"       \"^\"         NA          \"gMLPA\"     #>  [7] \"hD, \"      NA          \"f/SRrlm P\" \"Tm4l9x/o\"  character_(len = 10L, any_empty = TRUE) %>% show_example() #>  [1] \"Cb\"      \"\"        \"C<_qhm7\" \"_BtX\"    \"\"        \"k\"       \"j?6djC0\" #>  [8] \"\"        \")K;x6w\"  \"\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator object.","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) %>% show_example() #> NULL"},{"path":"/reference/data.table_.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generators — data.table_","title":"data.table generators — data.table_","text":"Construct data.table generators similar way data.table::data.table.","code":""},{"path":"/reference/data.table_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generators — data.table_","text":"","code":"data.table_(..., rows = c(1L, 10L))"},{"path":"/reference/data.table_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generators — data.table_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data.table_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generators — data.table_","text":"quickcheck_generator object.","code":""},{"path":"/reference/data.table_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generators — data.table_","text":"","code":"data.table_(a = integer_()) %>% show_example() #>       a #> 1: 9426 data.table_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #>        a         b #> 1:     0    3x1{e* #> 2:     0      R6\\\\ #> 3: -2770 av:{FLV#y #> 4: -3221        }f #> 5: -6892      O;gB"},{"path":"/reference/data.table_of.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generator with randomized columns — data.table_of","title":"data.table generator with randomized columns — data.table_of","text":"data.table generator randomized columns","code":""},{"path":"/reference/data.table_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generator with randomized columns — data.table_of","text":"","code":"data.table_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data.table_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generator with randomized columns — data.table_of","text":"... set unnamed generators. generated data.tables built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data.table_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generator with randomized columns — data.table_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/data.table_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generator with randomized columns — data.table_of","text":"","code":"data.table_of(logical_(), date_()) %>% show_example() #>          ...1       ...2       ...3  ...4  ...5  ...6  ...7       ...8 #> 1: 2062-02-23 2879-11-08 1888-06-01  TRUE FALSE FALSE  TRUE 2749-10-17 #> 2: 2734-04-08 1405-06-24 1458-10-10  TRUE FALSE  TRUE  TRUE 2581-08-16 #> 3: 1379-06-18 1396-06-12 1257-05-06  TRUE  TRUE FALSE FALSE 1707-02-05 #> 4: 1250-10-14 1667-04-30 2872-03-03  TRUE  TRUE FALSE  TRUE 2453-04-27 #> 5: 1601-07-07 2858-11-08 2908-02-09 FALSE  TRUE  TRUE FALSE 2289-07-25 #> 6: 1639-07-21 1760-05-04 1889-04-24 FALSE  TRUE  TRUE  TRUE 2895-03-27 #> 7: 2144-05-12 1678-10-01 2850-08-19 FALSE FALSE FALSE  TRUE 1655-04-18 #> 8: 1542-06-19 2353-03-20 2388-07-05 FALSE FALSE FALSE FALSE 2584-08-06 #> 9: 1782-07-01 1749-12-17 2950-11-06 FALSE  TRUE FALSE  TRUE 2512-09-15 #>          ...9 #> 1: 1152-06-08 #> 2: 2659-06-18 #> 3: 2878-06-23 #> 4: 2281-07-13 #> 5: 1642-10-16 #> 6: 2331-07-05 #> 7: 1813-02-19 #> 8: 2569-03-29 #> 9: 2509-08-29 data.table_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #>                    ...1  ...2       ...3      ...4                ...5 #>  1: 2927-03-23 12:53:07  3370 -485971679  $vp(DvYy 2181-08-19 10:07:52 #>  2: 2251-08-24 14:51:11 -4215 -682373391         _ 1846-03-29 16:53:03 #>  3: 2088-07-06 06:22:46   169 -655147674   6!#^tIK 2667-03-31 19:32:10 #>  4: 1453-01-19 04:55:41  7782 -240459864    D$Zru$ 2189-09-26 03:55:40 #>  5: 1740-07-03 07:38:10   -21          0        G^ 1245-12-07 19:28:07 #>  6: 1948-12-07 21:26:00  7774  596492078        yN  974-03-11 00:01:39 #>  7: 1020-11-14 02:51:06   442  124292782    c8pnw/  128-12-06 22:08:54 #>  8: 2786-06-05 07:57:58     0 -538525549   r9J7Vdf 1122-11-27 10:16:43 #>  9: 2529-07-22 16:53:13 -2008 -742085282       yVo 1789-05-29 01:54:36 #> 10:  887-12-15 00:37:07  9248  569610885 ;giWyy2t% 1141-10-18 04:31:21"},{"path":"/reference/data_frame_.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generators — data_frame_","title":"Data frame generators — data_frame_","text":"Construct data frame generators similar way base::data.frame.","code":""},{"path":"/reference/data_frame_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(..., rows = c(1L, 10L))"},{"path":"/reference/data_frame_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generators — data_frame_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data_frame_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generators — data_frame_","text":"quickcheck_generator object.","code":""},{"path":"/reference/data_frame_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(a = integer_()) %>% show_example() #>       a #> 1   -84 #> 2 -1161 data_frame_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #>       a      b #> 1 -1883   |hOt #> 2  9598 C_nv]v #> 3 -4625  4&Aa/ #> 4  3067     ;7 #> 5 -1139   If~A"},{"path":"/reference/data_frame_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generator with randomized columns — data_frame_of","title":"Data frame generator with randomized columns — data_frame_of","text":"Data frame generator randomized columns","code":""},{"path":"/reference/data_frame_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generator with randomized columns — data_frame_of","text":"","code":"data_frame_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data_frame_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generator with randomized columns — data_frame_of","text":"... set unnamed generators. generated data frames built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data_frame_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generator with randomized columns — data_frame_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/data_frame_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generator with randomized columns — data_frame_of","text":"","code":"data_frame_of(logical_(), date_()) %>% show_example() #>   ...1 #> 1 TRUE #> 2 TRUE data_frame_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #>          ...1  ...2      ...3                ...4            ...5 #> 1   891946155  2781       B!P  460-09-08 01:04:21 15:34:20.855187 #> 2   297477548  5051      ^^3W  505-06-13 18:36:30 16:23:02.282534 #> 3    30077937  9637 T^S[z2e>q 1133-01-15 06:47:37 16:32:30.343005 #> 4  -113909787     0  k.kX-m>W 1889-08-17 12:01:22 16:45:53.057946 #> 5   865563010 -7757    &ro6'y   78-06-13 13:10:56 00:08:04.943135 #> 6   794088516  3372    x\\\\|,l 1050-12-23 09:54:35 18:35:24.639702 #> 7           0     0      D8CZ 2424-08-02 14:55:12 02:30:58.820829 #> 8           0 -9731      1i1;  669-06-25 19:23:14 06:30:33.354177 #> 9   682177116 -5933   KQH8ism  521-11-17 22:04:01 19:54:17.140006 #> 10 -430039204 -9614      mp:~  871-10-14 01:00:36 10:19:13.396558"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), any_na = FALSE)  date_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  date_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  date_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator object.","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() %>% show_example() #> [1] \"2219-10-08\" \"2213-10-10\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) %>% show_example() #> [1] \"2020-01-03\" \"2020-01-02\" \"2020-01-07\" date_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] \"2846-07-20\" NA           \"2533-08-07\" \"1612-09-15\" \"1832-06-23\" #>  [6] NA           NA           \"1987-12-09\" \"2116-11-15\" \"1931-03-25\""},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE )  double_left_bounded(   left,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_nan Whether NaN values allowed. any_inf Whether Inf/-Inf values allowed. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator object.","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() %>% show_example() #> [1] -248290885 -573757044  489768845  909733732 -814180398  -41872906  998599259 #> [8]          0  705814015 double_(big_dbl = TRUE) %>% show_example() #> [1] -5.614592e+306  6.707993e+307  6.334951e+307 double_bounded(left = -5, right = 5) %>% show_example() #> [1]  1.905521  4.127300  2.608408 -2.284974 -4.737470  4.076355  0.000000 double_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  207102162          0         NA          0  501544583 -471992450 #>  [7]  190471978         NA -371140123  743533940 double_(len = 10L, any_nan = TRUE, any_inf = TRUE) %>% show_example() #>  [1]        NaN -584682728        Inf -454366380       -Inf -698469685 #>  [7]        NaN          0  227681524  234329896"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal length vector generator — equal_length","title":"Equal length vector generator — equal_length","text":"Generates equal length vectors contained list.","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(..., len = c(1L, 10L))"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal length vector generator — equal_length","text":"... set named unnamed vector generators. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal length vector generator — equal_length","text":"quickcheck_generator object.","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(integer_(), double_()) %>% show_example() #> [[1]] #> [1] 9583 #>  #> [[2]] #> [1] 248887228 #>  equal_length(a = logical_(), b = character_(), len = 5L) %>% show_example() #> $a #> [1]  TRUE FALSE FALSE  TRUE  TRUE #>  #> $b #> [1] \"E;7)\\\\~\" \"1&M\"     \"#+P\"     \"'kh1(%1\" \"n/73`\"   #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator object.","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() %>% show_example() #> [1] byKy2X    LM        NC\"MNN    >>        ~l6-2,F   cE        R7JDlGWiB #> [8] gU\"}jY{   {di}~k%o  #> Levels: byKy2X LM NC\"MNN >> ~l6-2,F cE R7JDlGWiB gU\"}jY{ {di}~k%o factor_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  1  1  1  1  1  1  1 NA  1  1"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"Generate flat lists values coming single generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator quickcheck_generator object. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) %>% show_example() #> [[1]] #> [1] -3753 #>  #> [[2]] #> [1] 3947 #>  #> [[3]] #> [1] 7514 #>  #> [[4]] #> [1] -8907 #>  #> [[5]] #> [1] 5067 #>  #> [[6]] #> [1] 0 #>  #> [[7]] #> [1] -8190 #>  #> [[8]] #> [1] -3753 #>  #> [[9]] #> [1] -6227 #>  #> [[10]] #> [1] 5832 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes values generator calls expectation . function must parameters matching generator names. tests number tests run. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(len = 1L),   b = numeric_(len = 1L),   property = function(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen object.","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator object.","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"is_even <-   function(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) %>% hedgehog::gen.with(function(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = function(a) is_even(a) %>% testthat::expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), any_na = FALSE)  hms_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  hms_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  hms_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator object.","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() %>% show_example() #> 08:14:49.721537 #> 13:59:30.018125 #> 22:32:58.290594 #> 22:06:00.637102 #> 03:08:57.679296 #> 02:20:26.408525 #> 01:48:44.637855 #> 03:06:25.004744 #> 18:03:07.573896 #> 10:02:03.966822 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) %>% show_example() #> 09:54:17.262125 #> 08:11:14.866590 hms_(len = 10L, any_na = TRUE) %>% show_example() #>              NA #>              NA #> 04:41:28.188809 #> 03:10:12.834305 #> 23:17:13.977659 #>              NA #>              NA #> 13:32:24.451712 #> 23:27:51.029996 #> 17:11:46.023340"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  integer_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_positive(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_negative(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator object.","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() %>% show_example() #> [1]   813  9366   194 -1528  3591 -2926 -6316 -2127  8291 integer_(big_int = TRUE) %>% show_example() #> [1] 1715213656 1352402910 1785525573  -16558248 1321817326 integer_bounded(left = -5L, right = 5L) %>% show_example() #>  [1] -4  2  1  1 -1  1  0 -4 -1 -3 integer_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  9186 -6797    NA -4640 -1701    NA -7098  5833 -6317 -8860"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"Generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... set named unnamed generators.","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator object.","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) %>% show_example() #> [[1]] #>  [1] -1338  -599     0 -6442  -738  -384 -5251  4359  4262  3564 #>  #> [[2]] #> [1]  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE #>  list_(a = any_vector(), b = any_vector()) %>% show_example() #> $a #> $a[[1]] #> $a[[1]]$a #> [1]  185950196  731720809 -103959185  156334068  441612019 #>  #> $a[[1]]$b #> [1] \"1262-06-20\" \"2568-04-12\" \"1721-03-06\" \"1671-01-10\" #>  #>  #>  #> $b #> [1] C}        #{H       7UAX%iD4J 6d;       )tAHvQrT  E_rpL     FpS%O5(B  #> [8] K,7)kd    D         #> Levels: C} #{H 7UAX%iD4J 6d; )tAHvQrT E_rpL FpS%O5(B K,7)kd D #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"Generate lists values coming single generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator quickcheck_generator object. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) %>% show_example() #> [[1]] #> [1]  4658 -1546 -3203  8942   843 #>  #> [[2]] #> [1] -7703  5368     0 -6771 -6548  1059 -9377 -2651 #>  #> [[3]] #> [1]  7391  3679     0  6706 -6090     0 #>  #> [[4]] #> [1]  8526 -2503 -5469  1397     0 -1720 -7843  3381 #>  #> [[5]] #> [1] 7701 #>  #> [[6]] #> [1] -9313  9300 -5093 #>  #> [[7]] #> [1] -710 #>  #> [[8]] #> [1]  2537 -9354 #>  #> [[9]] #> [1] -6736 -1890  4505  7746  7469 -2135 -3838  7137  -574 #>  #> [[10]] #> [1] 7756   52 3446 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator object.","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() %>% show_example() #> [1] FALSE  TRUE  TRUE FALSE  TRUE  TRUE logical_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] FALSE    NA FALSE  TRUE    NA    NA  TRUE  TRUE  TRUE FALSE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  numeric_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_positive(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_negative(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator object.","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() %>% show_example() #> [1]  449114257 -708363930 -338916648 numeric_(big_num = TRUE) %>% show_example() #> [1] 1808279380 1619802888 numeric_bounded(left = -5L, right = 5L) %>% show_example() #> [1] -3  5  2 numeric_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]   41948966 -732196653         NA          0          0  540908227 #>  [7] -518145548         NA  529611095  501944814"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... set unnamed generators. prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) %>% show_example() #> [1] -3582  -295 -7437 one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) %>% show_example() #> [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), any_na = FALSE)  posixct_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  posixct_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  posixct_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator object.","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() %>% show_example() #> [1] \"1897-01-25 06:01:33 UTC\" \"364-06-04 05:42:46 UTC\"  #> [3] \"265-08-18 03:39:05 UTC\"  \"1111-01-20 03:13:35 UTC\" #> [5] \"1526-07-03 16:48:13 UTC\" \"170-10-13 22:38:47 UTC\"  #> [7] \"470-05-28 05:43:52 UTC\"  posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) %>% show_example() #> [1] \"2020-08-26 06:50:00 UTC\" posixct_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] NA                        NA                        #>  [3] \"2720-04-02 10:48:05 UTC\" \"1289-03-17 18:36:47 UTC\" #>  [5] NA                        \"2305-04-12 03:50:23 UTC\" #>  [7] \"980-12-04 13:12:17 UTC\"  \"2847-07-23 10:56:17 UTC\" #>  [9] NA                        \"320-08-19 04:12:09 UTC\""},{"path":"/reference/repeat_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly test properties of a function — repeat_test","title":"Repeatedly test properties of a function — repeat_test","text":"Repeatedly test properties function","code":""},{"path":"/reference/repeat_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(property, tests = getOption(\"quickcheck.tests\", 100L))"},{"path":"/reference/repeat_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly test properties of a function — repeat_test","text":"property function parameters includes expectation. tests number tests run.","code":""},{"path":"/reference/repeat_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly test properties of a function — repeat_test","text":"testthat expectation object.","code":""},{"path":"/reference/repeat_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(   property = function() {     num <- stats::runif(1, min = 0, max = 10)     testthat::expect_true(num >= 0 && num <= 10)   } )"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator quickcheck_generator object.","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() %>% show_example() #> [1]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way tibble::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator object.","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) %>% show_example() #> # A tibble: 6 × 1 #>       a #>   <int> #> 1   373 #> 2  5439 #> 3  7326 #> 4  8958 #> 5  7502 #> 6     0 tibble_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #> # A tibble: 5 × 2 #>       a b           #>   <int> <chr>       #> 1  8678 \"_uC!r\"     #> 2  8461 \"#I\\\"%u)L@\" #> 3  9245 \"_\\\"c(\"     #> 4   211 \"Z9;pA7/O\"  #> 5  -439 \"R.\""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) %>% show_example() #> # A tibble: 7 × 2 #>   ...1       ...2  #>   <date>     <lgl> #> 1 2180-05-13 TRUE  #> 2 2939-05-26 FALSE #> 3 2010-10-24 TRUE  #> 4 1764-11-08 FALSE #> 5 2867-08-11 TRUE  #> 6 2130-02-12 FALSE #> 7 1367-03-29 TRUE  tibble_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #> # A tibble: 10 × 5 #>    ...1  ...2      ...3        ...4       ...5       #>    <lgl> <chr>     <fct>       <date>     <date>     #>  1 FALSE 9*GMZ979S \"tLI,80UC\"  1668-08-11 1231-01-29 #>  2 TRUE  U         \"!pFo5\"     2877-03-03 2761-02-11 #>  3 TRUE  cdJ85!    \"8_C'7e&X\"  1824-02-05 1177-02-07 #>  4 FALSE G!Csl#?.  \"t3?.\"      1713-02-01 1187-03-24 #>  5 FALSE R,        \"<*\"        1417-03-06 1243-07-19 #>  6 FALSE N6$@,     \"Vm+EN}\\\\\"  1105-09-27 2391-04-03 #>  7 TRUE  h~QFvH!T  \"=\"         2398-11-09 1904-06-20 #>  8 FALSE #Rs=Sl    \"\\\\&cs_F>]\" 1835-06-24 1821-05-20 #>  9 TRUE  LWP-      \"Td{?'P\"    2458-04-14 1103-11-11 #> 10 TRUE  k%G=8jU   \"!*o]Q\"     1268-09-30 2161-11-30"},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"quickcheck 0.1.2","text":"Fixed bug date generator any_na = TRUE","code":""},{"path":"/news/index.html","id":"quickcheck-011","dir":"Changelog","previous_headings":"","what":"quickcheck 0.1.1","title":"quickcheck 0.1.1","text":"CRAN release: 2022-03-11","code":""},{"path":"/news/index.html","id":"internal-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"quickcheck 0.1.1","text":"Now doesn’t require R >= 4.1","code":""},{"path":"/news/index.html","id":"quickcheck-010","dir":"Changelog","previous_headings":"","what":"quickcheck 0.1.0","title":"quickcheck 0.1.0","text":"CRAN release: 2022-02-10","code":""},{"path":"/news/index.html","id":"major-breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Major breaking changes","title":"quickcheck 0.1.0","text":"default length vector generators changed 1 range 1 10. parameters form frac_ replaced any_, take logical value instead double value.","code":""},{"path":"/news/index.html","id":"features-0-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"quickcheck 0.1.0","text":"New character_letters generates character vectors letters. New character_numbers generates character vectors numbers. New character_alphanumeric generates character vectors letters numbers. New flat_list_of generates lists atomic scalars. New data_frame_ generate data.frames. New data_frame_of generate data.frames. New data.table_ generate data.tables. New data.table_of generate data.tables. New anything generates R object. New any_flat_homogeneous_list generates flat lists homogeneous elements. New any_data_frame generates data.frames. New any_data.table generates data.tables. New any_undefined generates undefined values. New equal_length generates equal length vectors. New from_hedgehog converts hedgehog quickcheck generator. New as_hedgehog converts quickcheck hedgehog generator. New repeat_test tests property repeatedly.","code":""},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
