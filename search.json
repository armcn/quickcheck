[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install development version quickcheck GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(),     b = numeric_(),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(),     b = numeric_(),     c = numeric_(),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) library(dplyr)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = 1L, frac_na = 0)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> 19:59:02.295287 any_atomic(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA NA  1  1 NA NA  1  1 NA  1"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = 1L, frac_na = 0)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] \"1608-01-18 19:01:49 UTC\" #>  any_flat_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] \"1381-06-17 17:12:14 UTC\" #>  #> [[3]] #> [1] -7915 #>  #> [[4]] #> NA #>  #> [[5]] #> [1] TRUE #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] -8663 #>  #> [[8]] #> [1] 818147376 #>  #> [[9]] #> [1] 0 #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = 1L, frac_na = 0)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> 22:32:44.012925 #>  any_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> NA #>  #> [[2]] #> 20:46:52.963972 #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] \"v7[L>\\\\\" #>  #> [[5]] #> [1] \"1219-03-18\" #>  #> [[6]] #> [1] haYsk` #> Levels: haYsk` #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] -7766 #>  #> [[9]] #> [1] TRUE #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 3 × 2 #>   ...1             ...2             #>   <list>           <list>           #> 1 <named list [2]> <named list [2]> #> 2 <named list [2]> <named list [2]> #> 3 <named list [2]> <named list [2]> any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 9 #>    ...1        ...2        ...3       ...4     ...5     ...6 ...7   ...8   ...9  #>    <list>      <chr>       <list>     <list>   <chr>   <int> <fct>  <list> <chr> #>  1 <chr [6]>   \"v/KBh'R9s\" <lgl [6]>  <named … \"}GFMF… -3967 \"&iGT\" <chr … *TSX  #>  2 <fct [2]>   \"x[p[wKt\"   <time [3]> <named … \"Fd|E\"  -3954 \"X|9Y… <int … xaVo… #>  3 <chr [6]>   \"HX \"       <fct [6]>  <named … \"f6\"     1943 \":P@8… <fct … Fa    #>  4 <time [3]>  \"LS\\\"O3\"    <date [8]> <named … \"ob \"   -4363 \"J>Qb… <chr … y     #>  5 <dttm [5]>  \"w\"         <dbl [6]>  <named … \"bga$k… -2299 \"6Cb=… <date… wth   #>  6 <lgl [3]>   \".?9^lNvq)\" <dbl [1]>  <named … \"#BHD~\" -3432 \"|/Yg… <lgl … *&    #>  7 <fct [3]>   \"t\"         <fct [1]>  <named … \"5'LI'\"   194 \"O_xu… <date… t)X~… #>  8 <fct [6]>   \"Kcg9W:\"    <dbl [9]>  <named … \"c?lBe… -9518 \"hz0j… <chr … `a*&… #>  9 <date [10]> \">+u82\"     <date [3]> <named … \". cua… -1954 \",52@… <date… -7;j… #> 10 <lgl [6]>   \"#BHD~\"     <int [5]>  <named … \"$-\"     3817 \"Qi`l… <dttm… 27    any_tibble(cols = 5L, frac_na = 0.5) |> show_example() #> # A tibble: 10 × 5 #>           ...1 ...2             ...3       ...4              ...5 #>          <dbl> <list>           <list>     <list>           <dbl> #>  1         NA  <named list [2]> <lgl [6]>  <lgl [5]>  -442860484. #>  2         NA  <named list [2]> <int [9]>  <dttm [2]>   28317552. #>  3 -589298559. <named list [2]> <chr [8]>  <lgl [2]>          NA  #>  4         NA  <named list [2]> <dttm [6]> <chr [3]>   421891871. #>  5  209434712. <named list [2]> <lgl [2]>  <time [8]>         NA  #>  6         NA  <named list [2]> <dttm [2]> <dbl [6]>  -654852636. #>  7 -828000628. <named list [2]> <dbl [5]>  <dbl [10]>         NA  #>  8         NA  <named list [2]> <chr [1]>  <chr [3]>   931460722. #>  9 -734089801. <named list [2]> <lgl [8]>  <date [6]> -837708271. #> 10         NA  <named list [2]> <dbl [6]>  <time [4]>         NA"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = 1L, frac_na = 0)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [1] 2098 any_vector(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [[1]]$a #> [1] \"2091-09-21\" \"1277-02-16\" NA           \"1299-10-05\" \"2449-04-23\" #>  #> [[1]]$b #> [1] NA  1 NA #>  #>  #> [[2]] #> [[2]]$a #> [1]    NA  1081   119 -9427 -9777  5895 #>  #> [[2]]$b #> [1] TRUE TRUE   NA #>  #>  #> [[3]] #> [[3]]$a #> [1] NA      \"Pd*I.\" NA      #>  #> [[3]]$b #> [1]   NA 8830 #>  #>  #> [[4]] #> [[4]]$a #> [1] \"2701-05-26\" NA           NA           NA           NA           #> [6] NA           NA           \"1555-07-13\" #>  #> [[4]]$b #> [1] NA #>  #>  #> [[5]] #> [[5]]$a #> [1]    NA    NA 62896 #>  #> [[5]]$b #>  [1]  1  1 NA NA NA NA  1 NA  1  1 #>  #>  #> [[6]] #> [[6]]$a #> [1] NA NA  1 NA NA  1 NA  1 NA #>  #> [[6]]$b #> [1] \"(b\"     NA       NA       \"mG<?3B\" \"Mw\"     \"@!7E_\"  \"c9$ _\"  #>  #>  #> [[7]] #> [[7]]$a #> [1] \"65-07-08 10:19:05 UTC\"   \"769-11-13 06:08:06 UTC\"  #> [3] NA                        \"341-11-02 09:35:44 UTC\"  #> [5] \"2285-12-02 11:43:48 UTC\" NA                        #> [7] \"2688-08-14 03:12:46 UTC\" \"2223-12-06 08:48:46 UTC\" #> [9] \"718-02-02 06:17:32 UTC\"  #>  #> [[7]]$b #> [1]           NA           NA           NA -36890755938           NA #> [6]           NA #>  #>  #> [[8]] #> [[8]]$a #>              NA #> 20:17:41.551116 #> 16:26:28.732153 #> 00:05:17.482372 #>              NA #>  #> [[8]]$b #> [1]         NA         NA -390792071 #>  #>  #> [[9]] #> [[9]]$a #> [1] \"2865-01-14\" \"2192-12-26\" \"1727-10-09\" \"1726-09-23\" \"1836-07-01\" #> [6] \"2663-08-30\" NA           NA           \"1033-02-21\" #>  #> [[9]]$b #> [1] 4213 6602 2704 #>  #>  #> [[10]] #> [[10]]$a #> [1] NA NA  1 NA  1 NA #>  #> [[10]]$b #> [1]   NA TRUE TRUE TRUE   NA #>  #>"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = 1L, frac_na = 0, frac_empty = 0)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_empty approximate fraction empty character values included vector. fraction 0, default, include empty values. fraction 0.5 include around 50% empty values.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"fba[V;=\\\"k\" character_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA            NA            \"|'6B\"        NA            NA            #>  [6] \"\\\\v@&+\\\"wf<\" NA            NA            \"(&yQ(ae6$\"   NA            character_(len = 10L, frac_empty = 0.5) |> show_example() #>  [1] \"Zuj;u\\\\2h\" \"\"          \"\"          \"\"          \"eSjY1\"     \"P\"         #>  [7] \"\"          \"\"          \"?n\"        \"I\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = 1L, frac_na = 0)  date_bounded(left, right, len = 1L, frac_na = 0)  date_left_bounded(left, len = 1L, frac_na = 0)  date_right_bounded(right, len = 1L, frac_na = 0)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"1719-11-05\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-06\" date_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"1448-08-01\" \"2266-06-12\" NA           \"2397-04-15\" NA           #>  [6] \"2858-09-29\" NA           NA           \"2224-01-25\" NA"},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(len = 1L, frac_na = 0, frac_nan = 0, frac_inf = 0, big_dbl = FALSE)  double_bounded(left, right, len = 1L, frac_na = 0, frac_nan = 0, frac_inf = 0)  double_left_bounded(   left,   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_right_bounded(   right,   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_positive(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_negative(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_fractional(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_whole(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_nan approximate fraction NaN values included vector. fraction 0, default, include NaN values. fraction 0.5 include around 50% NaN values. frac_inf approximate fraction Inf -Inf values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1] 990783289 double_(big_dbl = TRUE) |> show_example() #> [1] 2.846259e+307 double_bounded(left = -5, right = 5) |> show_example() #> [1] 4.046076 double_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]        NA         0        NA        NA 471902769        NA 722807319 #>  [8]  88879607        NA 665732758 double_(len = 10L, frac_nan = 0.2, frac_inf = 0.2) |> show_example() #>  [1] -968553696       -Inf        NaN  720948605       -Inf        NaN #>  [7] -424629035  285534682       -Inf       -Inf"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = 1L, frac_na = 0)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] i9)`*f #> Levels: i9)`*f factor_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA NA  1 NA  1 NA  1 NA NA  1"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   size = getOption(\"quickcheck.size\", 50L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. size maximum length generators. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = 1L, frac_na = 0)  hms_bounded(left, right, len = 1L, frac_na = 0)  hms_left_bounded(left, len = 1L, frac_na = 0)  hms_right_bounded(right, len = 1L, frac_na = 0)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 08:38:37.532812 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 07:04:29.64085 hms_(len = 10L, frac_na = 0.5) |> show_example() #>              NA #> 11:42:23.991026 #> 10:33:23.841385 #> 22:57:26.601463 #> 20:57:09.155912 #> 13:04:32.828829 #>              NA #>              NA #> 06:13:53.674750 #> 16:18:12.486736"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = 1L, frac_na = 0, big_int = FALSE)  integer_bounded(left, right, len = 1L, frac_na = 0)  integer_left_bounded(left, len = 1L, frac_na = 0, big_int = FALSE)  integer_right_bounded(right, len = 1L, frac_na = 0, big_int = FALSE)  integer_positive(len = 1L, frac_na = 0, big_int = FALSE)  integer_negative(len = 1L, frac_na = 0, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1] -1489 integer_(big_int = TRUE) |> show_example() #> [1] -102485650 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1] -1 integer_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] -9026    NA    NA    NA -2100    NA -4969 -9648  7940    NA"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1] 5937 #>  #> [[2]] #> [1] TRUE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> [1] \"2898-01-02\" #>  #> $b #> $b[[1]] #> [1] FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE #>  #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = 1L)"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10.","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] -1018 #>  #> [[2]] #> [1] -4158 #>  #> [[3]] #> [1] 5901 #>  #> [[4]] #> [1] 9412 #>  #> [[5]] #> [1] -1924 #>  #> [[6]] #> [1] -4950 #>  #> [[7]] #> [1] 3025 #>  #> [[8]] #> [1] 426 #>  #> [[9]] #> [1] -3948 #>  #> [[10]] #> [1] 0 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = 1L, frac_na = 0)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1] FALSE logical_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  TRUE FALSE    NA  TRUE FALSE  TRUE    NA  TRUE    NA    NA"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = 1L, frac_na = 0, big_num = FALSE)  numeric_bounded(left, right, len = 1L, frac_na = 0)  numeric_left_bounded(left, len = 1L, frac_na = 0, big_num = FALSE)  numeric_right_bounded(right, len = 1L, frac_na = 0, big_num = FALSE)  numeric_positive(len = 1L, frac_na = 0, big_num = FALSE)  numeric_negative(len = 1L, frac_na = 0, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1] 6044 numeric_(big_num = TRUE) |> show_example() #> [1] -818573780 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1] -2.042034 numeric_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]         NA         NA         NA -248180994 -939066352 -619103407 #>  [7]         NA -343629376  453611623          0"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1] \"BVheRy8d`\" one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> [1] FALSE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = 1L, frac_na = 0)  posixct_bounded(left, right, len = 1L, frac_na = 0)  posixct_left_bounded(left, len = 1L, frac_na = 0)  posixct_right_bounded(right, len = 1L, frac_na = 0)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"1613-08-10 21:48:14 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-07-05 06:37:12 UTC\" posixct_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"2991-06-03 13:33:36 UTC\" \"1780-03-09 00:50:29 UTC\" #>  [3] NA                        NA                        #>  [5] NA                        \"1629-12-26 18:00:48 UTC\" #>  [7] NA                        NA                        #>  [9] NA                        NA"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1] FALSE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10.","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 9 × 1 #>       a #>   <int> #> 1  6703 #> 2     0 #> 3 -7938 #> 4     0 #> 5 -4394 #> 6 -2497 #> 7 -9203 #> 8  1700 #> 9  4586 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b        #>   <int> <chr>    #> 1  9035 \"BES\"    #> 2 -9677 \"(L\"     #> 3     0 \"\\\\\"     #> 4  8238 \"3U<3eh\" #> 5     0 \"'P! \""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10.","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 10 × 3 #>    ...1       ...2       ...3       #>    <date>     <date>     <date>     #>  1 1982-05-18 1346-02-02 1544-08-18 #>  2 1212-04-28 2024-09-09 2177-01-12 #>  3 1432-03-24 1859-08-10 2426-05-22 #>  4 1482-12-27 1833-01-24 2372-07-13 #>  5 1408-03-07 2663-04-12 2903-05-16 #>  6 1515-06-01 1535-11-26 2716-01-08 #>  7 2515-11-06 1933-11-07 2062-05-19 #>  8 2450-12-28 2760-08-24 1054-04-29 #>  9 1411-12-03 2671-03-10 2367-12-11 #> 10 2915-10-30 2636-08-08 1248-07-13 tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>    ...1  ...2        ...3 ...4  ...5        #>    <lgl> <date>     <int> <lgl> <fct>       #>  1 TRUE  1484-05-03  5471 TRUE  \"og*avl\"    #>  2 TRUE  2950-10-30  6304 FALSE \"3 '\"       #>  3 FALSE 2582-03-12     0 FALSE \"\\\"8J\"      #>  4 TRUE  2527-04-12  5993 FALSE \"?fW~c\"     #>  5 TRUE  1949-11-22  3382 FALSE \"4@\\\\KZW*\"  #>  6 FALSE 1404-11-24  3352 TRUE  \"'I}'5m6\"   #>  7 TRUE  2010-11-29     0 FALSE \",WW]\"      #>  8 FALSE 2086-04-25 -3923 TRUE  \"v\"         #>  9 TRUE  1236-02-25 -2995 TRUE  \"NAt1Z5o`;\" #> 10 FALSE 2916-10-13  7551 TRUE  \"A4K^\""},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"Initial version","code":""}]
