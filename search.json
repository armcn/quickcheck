[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Examples.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing +","title":"Examples","text":"","code":"test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1L),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     c = numeric_(len = 1L),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           })"},{"path":"/articles/Examples.html","id":"testing-baserev","dir":"Articles","previous_headings":"","what":"Testing base::rev","title":"Examples","text":"","code":"test_that(\"reverse of reverse is identity\", {   for_all(     a = any_vector(len = c(1L, 10L)),     property = \\(a) a |> rev() |> rev() |> expect_equal(a)   ) })  test_that(\"reverse of concatenation is flipped concatenation of reversed\", {   for_all(     a = integer_(len = c(1L, 10L)),     b = integer_(len = c(1L, 10L)),     property = \\(a, b) rev(c(a, b)) |> expect_equal(c(rev(b), rev(a)))   ) })"},{"path":"/articles/Examples.html","id":"testing-stringrstr_c","dir":"Articles","previous_headings":"","what":"Testing stringr::str_c","title":"Examples","text":"","code":"test_that(\"str_c does nothing with a single input string\", {   for_all(     a = character_(len = 1L),     property = \\(a) str_c(a) |> expect_equal(a)   ) })  test_that(\"str_c returns a single string with multiple input strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     c = character_(len = 1L),     property = \\(a, b, c) str_c(a, b, c) |> length() |> expect_equal(1L)   ) })  test_that(\"concatenation of strings always contains the original strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     property = \\(a, b) {       str_c(a, b) |> str_detect(fixed(a)) |> expect_true()       str_c(a, b) |> str_detect(fixed(b)) |> expect_true()     }   ) })"},{"path":"/articles/Examples.html","id":"testing-dplyrdistinct","dir":"Articles","previous_headings":"","what":"Testing dplyr::distinct","title":"Examples","text":"","code":"test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) library(dplyr)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used simply wrapping from_hedgehog. hood function wrap hedgehog generator anonymous function add quickcheck_generator class . hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error:","code":"library(hedgehog)  is_even <-    \\(a) a %% 2 == 0  gen_powers_of_two <-    gen.element(1:10) |> gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> expect_true() ) for_all(   a = from_hedgehog(gen_powers_of_two),   b = integer_(),   property = \\(a, b) c(a, b) |> is.numeric() |> expect_true() ) for_all(   a = tibble_of(from_hedgehog(gen_powers_of_two)),   property = \\(a) is_tibble(a) |> expect_true() )"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1] \"lz0Q\\\\M\" \"]\"       \"$!%;9d\"  \"+\"       \"-wiJoi\"  \"/pcI|Wh\" \"P]6dV/B\" #> [8] \"M^$_aw\"  \"iuQr\"    any_atomic(len = 10L, frac_na = 0.5) |> show_example() #>  [1] FALSE  TRUE  TRUE  TRUE    NA FALSE FALSE  TRUE  TRUE  TRUE"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat homogeneous list generator — any_flat_homogeneous_list","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic scalar type.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() |> show_example() #> [[1]] #> [1] 4049 #>  #> [[2]] #> [1] -8184 #>  #> [[3]] #> [1] -5718 #>  #> [[4]] #> [1] -1973 #>  #> [[5]] #> [1] -9013 #>  #> [[6]] #> [1] -4808 #>  #> [[7]] #> [1] -4619 #>  #> [[8]] #> [1] 8929 #>  any_flat_homogeneous_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] \"1306-11-30 05:01:45 UTC\" #>  #> [[3]] #> [1] \"1857-11-22 15:31:01 UTC\" #>  #> [[4]] #> [1] \"1231-11-01 19:47:48 UTC\" #>  #> [[5]] #> [1] \"2338-04-20 00:13:21 UTC\" #>  #> [[6]] #> [1] \"1326-01-01 06:26:09 UTC\" #>  #> [[7]] #> [1] \"1297-05-30 16:20:35 UTC\" #>  #> [[8]] #> [1] \"978-04-19 04:24:23 UTC\" #>  #> [[9]] #> [1] \"1216-05-25 06:31:21 UTC\" #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] -9112 #>  #> [[2]] #> [1] \"{lA\" #>  #> [[3]] #> [1] aY6$ #> Levels: aY6$ #>  #> [[4]] #> 07:25:58.833115 #>  #> [[5]] #> [1] 583910667 #>  #> [[6]] #> [1] \"1369-11-09\" #>  #> [[7]] #> [1] \"2821-05-02\" #>  #> [[8]] #> [1] \"}rC&/<A[R\" #>  any_flat_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] \"422-07-21 10:40:33 UTC\" #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] -472571810 #>  #> [[5]] #> [1] $/#Oa? #> Levels: $/#Oa? #>  #> [[6]] #> [1] T: #> Levels: T: #>  #> [[7]] #> [1] yy]yp!Q #> Levels: yy]yp!Q #>  #> [[8]] #> [1] \")PuuZY\" #>  #> [[9]] #> [1] NA #>  #> [[10]] #> [1] Z]1=\\\\0I #> Levels: Z]1=\\\\0I #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [1] -572527033 #>  #> [[2]] #> [1] 518391292 #>  #> [[3]] #> [1] -242286121 #>  any_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] \"*;UM5{_x\" \"M\"        \"gU%RV\"    \"RF\"       NA         NA         NA         #> [8] NA         #>  #> [[2]] #> [1] \"8hy=*/l;\"  NA          \"9$/Cwm\\\";\" NA          \")\"         NA          #> [7] NA          NA          NA          #>  #> [[3]] #> [1]           NA           NA  -9921994440           NA -10589057023 #> [6]  27197991585 -55986424242  -4171778177 #>  #> [[4]] #> [1] \"260-02-18 16:39:45 UTC\"  \"573-07-07 13:19:40 UTC\"  #> [3] NA                        \"2562-01-10 06:32:58 UTC\" #> [5] NA                        \"2033-08-13 12:34:53 UTC\" #>  #> [[5]] #> [1] NA NA #>  #> [[6]] #> 09:29:12.817709 #>              NA #>  #> [[7]] #> [1]        NA        NA        NA 621693482 -91945667        NA        NA #>  #> [[8]] #> [1]  TRUE FALSE    NA FALSE #>  #> [[9]] #> [1] NA NA #>  #> [[10]] #> [1] \"l]e\" NA    \"kj\"  #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 6 × 3 #>   ...1        ...2 ...3             #>   <list>     <int> <list>           #> 1 <time [1]>  3183 <named list [2]> #> 2 <time [1]>  -951 <named list [2]> #> 3 <time [1]> -3818 <named list [2]> #> 4 <time [1]>  3192 <named list [2]> #> 5 <time [1]> -4401 <named list [2]> #> 6 <time [1]>  4823 <named list [2]> any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 6 #>    ...1       ...2       ...3        ...4       ...5               ...6 #>    <chr>      <list>     <list>      <list>     <list>            <dbl> #>  1 \"m5k{;1D\"  <lgl [1]>  <chr [6]>   <date [1]> <fct [4]>    614272725. #>  2 \"IZX?\"     <dttm [1]> <dbl [9]>   <date [1]> <time [10]>  678128326. #>  3 \"fiPe6~d\"  <date [1]> <int [4]>   <date [1]> <dbl [9]>    276050188. #>  4 \"e?\"       <dbl [1]>  <int [5]>   <date [1]> <lgl [1]>   -621526399. #>  5 \"Rg%,\\\\\"   <int [1]>  <int [4]>   <date [1]> <lgl [2]>    683952226. #>  6 \"R\"        <fct [1]>  <lgl [8]>   <date [1]> <date [4]>  -614694056. #>  7 \"y^AU*J\"   <int [1]>  <date [10]> <date [1]> <date [5]>   -82762315. #>  8 \"+TmF`s}~\" <dbl [1]>  <fct [3]>   <date [1]> <fct [9]>     90493638. #>  9 \"5?o**S\"   <dbl [1]>  <chr [4]>   <date [1]> <date [5]>   588442957. #> 10 \"_us94n/p\" <time [1]> <dbl [1]>   <date [1]> <time [10]> -401570143. any_tibble(cols = 5L, frac_na = 0.5) |> show_example() #> # A tibble: 4 × 5 #>   ...1  ...2       ...3      ...4       ...5             #>   <chr> <list>     <list>    <list>     <list>           #> 1 NA    <lgl [1]>  <int [1]> <dbl [1]>  <named list [2]> #> 2 i}t0  <fct [1]>  <fct [1]> <dbl [1]>  <named list [2]> #> 3 NA    <dbl [1]>  <int [1]> <time [1]> <named list [2]> #> 4 NA    <time [1]> <int [1]> <time [1]> <named list [2]>"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Undefined value generator — any_undefined","title":"Undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Undefined value generator — any_undefined","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined() |> show_example() #> [1] NA"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [[1]] #> [[1]]$a #> [1] -442994332 -229608035 -908390759 -952270947 -437643923 #>  #> [[1]]$b #>  [1] *r        !t|D`     ydZ*v     ]4G*eE1Qi )W'9zfGr& )^A|I/+   \\\\VE)0Yff #>  [8] v$|?w     &z        ycI       #> 10 Levels: *r !t|D` ydZ*v ]4G*eE1Qi )W'9zfGr& )^A|I/+ \\\\VE)0Yff v$|?w ... ycI #>  #>  #> [[2]] #> [[2]]$a #> [1] \"757-11-10 05:22:40 UTC\" \"948-05-21 19:24:00 UTC\" \"563-09-11 20:51:15 UTC\" #>  #> [[2]]$b #> [1]   429  2903 -3053  2980 -8536 -9676  8415     0 #>  #>  #> [[3]] #> [[3]]$a #> [1] U|Y@yT   !UNh     h}[P0NBT nc       '`0&v6   Q$o      #> Levels: U|Y@yT !UNh h}[P0NBT nc '`0&v6 Q$o #>  #> [[3]]$b #> [1] FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE #>  #>  #> [[4]] #> [[4]]$a #> [1] \"831-01-08 11:58:22 UTC\"  \"2968-10-17 23:55:22 UTC\" #> [3] \"1566-02-01 07:48:52 UTC\" \"1980-05-19 11:26:25 UTC\" #> [5] \"586-02-27 00:56:14 UTC\"  \"2808-04-14 14:41:05 UTC\" #> [7] \"834-07-09 10:15:55 UTC\"  \"2047-08-04 09:19:35 UTC\" #> [9] \"199-09-28 02:42:20 UTC\"  #>  #> [[4]]$b #> [1] \"2954-10-19 06:20:06 UTC\" \"1374-10-28 19:30:06 UTC\" #> [3] \"2682-09-03 23:44:16 UTC\" #>  #>  #> [[5]] #> [[5]]$a #> [1] FALSE FALSE FALSE #>  #> [[5]]$b #> [1] \"2150-08-03 00:58:29 UTC\" \"221-01-26 22:09:19 UTC\"  #> [3] \"1554-07-01 03:26:41 UTC\" \"1544-04-01 02:50:29 UTC\" #> [5] \"1357-01-18 13:41:23 UTC\" \"2834-02-17 07:53:18 UTC\" #>  #>  #> [[6]] #> [[6]]$a #> [1] \"a\"         \"s]#p@&0\\\"\" \"N\"         \"*l)\\\"<?I|\" \"<ZZP9\"     \"{\"         #>  #> [[6]]$b #> [1] YjR        v0W`\\\\)~A@ 0$EZsL:3^  \\\\\"$OV     WQa4Y      sV]wt      5GFw>f     #> Levels: YjR v0W`\\\\)~A@ 0$EZsL:3^ \\\\\"$OV WQa4Y sV]wt 5GFw>f #>  #>  #> [[7]] #> [[7]]$a #> [1] 814932105 845995541 195540267 469913034 414657607 #>  #> [[7]]$b #> [1] FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE #>  #>  #> [[8]] #> [[8]]$a #> 19:06:37.836165 #> 12:39:25.695204 #> 14:20:08.747924 #> 10:44:08.386876 #> 02:51:24.355439 #>  #> [[8]]$b #> [1]  TRUE  TRUE  TRUE FALSE  TRUE #>  #>  #> [[9]] #> [[9]]$a #> [1] FALSE  TRUE  TRUE #>  #> [[9]]$b #> [1] \"1620-01-07\" \"1578-09-17\" \"2219-02-26\" \"2901-07-02\" #>  #>  #> [[10]] #> [[10]]$a #> [1] 5859 2556 7677 5508    0 5949 #>  #> [[10]]$b #> 10:24:09.634672 #> 20:13:02.257533 #> 08:19:12.102170 #> 09:24:17.244641 #> 11:45:54.101455 #> 21:55:01.080942 #> 16:43:19.789459 #> 08:16:00.861043 #>  #>  any_vector(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [[1]]$a #>  [1]    NA  1246    NA    NA -2121  2963 -8714    NA    NA -1636 #>  #> [[1]]$b #> [1]  1  1 NA  1 NA NA #>  #>  #> [[2]] #> [[2]]$a #>  [1]         NA  765594163  930620327         NA         NA         NA #>  [7]  402511770 -886119782         NA         NA #>  #> [[2]]$b #> [1]    NA    NA  TRUE FALSE  TRUE FALSE    NA #>  #>  #> [[3]] #> [[3]]$a #> [1] \"W&]!\" #>  #> [[3]]$b #> [1] -8479  7997 -3449  2491    NA    NA    NA #>  #>  #> [[4]] #> [[4]]$a #> [1] NA #>  #> [[4]]$b #> [1]  1  1  1  1 NA  1 #>  #>  #> [[5]] #> [[5]]$a #> NA #> NA #> NA #> NA #>  #> [[5]]$b #> [1] -256741264         NA         NA         NA #>  #>  #> [[6]] #> [[6]]$a #> [1] \"q$={9^\"  NA        NA        NA        \"<7ovADJ\" \"yUEn\"    \"Hf#'\"    #> [8] \"3\"       #>  #> [[6]]$b #> [1]   NA TRUE TRUE #>  #>  #> [[7]] #> [[7]]$a #> [1] FALSE    NA #>  #> [[7]]$b #> [1]  1 NA  1  1 NA NA NA NA  1 #>  #>  #> [[8]] #> [[8]]$a #> [1] FALSE    NA    NA FALSE #>  #> [[8]]$b #> [1]      NA -212893      NA  -76819 -141961      NA   76133 #>  #>  #> [[9]] #> [[9]]$a #> [1]  1 NA  1 NA NA NA #>  #> [[9]]$b #> [1]  10181329 559319823        NA 634470065        NA 713727660 #>  #>  #> [[10]] #> [[10]]$a #> [1] \"1998-08-08\" NA           NA           NA           \"1022-02-05\" #> [6] NA           \"1318-06-11\" #>  #> [[10]]$b #> [1] \"900-05-08 08:43:20 UTC\"  NA                        #> [3] NA                        NA                        #> [5] NA                        \"2106-05-31 10:55:21 UTC\" #> [7] NA                        #>  #>"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, tibbles, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything()"},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator generator","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() |> show_example() #> [1] NA"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), frac_na = 0, frac_empty = 0)  character_letter(len = c(1L, 10L), frac_na = 0, frac_empty = 0)  character_word(len = c(1L, 10L), frac_na = 0, frac_empty = 0)  character_alphanumeric(len = c(1L, 10L), frac_na = 0, frac_empty = 0)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_empty approximate fraction empty character values included vector. fraction 0, default, include empty values. fraction 0.5 include around 50% empty values.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"{b%rP\"     \"0 OO>;o \"  \"y=R!iAn>\"  \"m]\"        \"v-{#j>V\"   \" Xg9*XAn<\" #> [7] \"Ev#\\\"\"     \"2|\"        \"P>[[2/1C\"  character_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA           \"Am?gGE}=%\"  \"[=\"         \"1__70\"      NA           #>  [6] NA           NA           NA           \"sR,c0M4yf\"  \"Xlst+<-\\\"5\" character_(len = 10L, frac_empty = 0.5) |> show_example() #>  [1] \"\"          \"\"          \"\"          \"He_~[AW\"   \"LMzbd})C\"  \"M\\\\$W#yFj\" #>  [7] \"T5d|j?.=\"  \"O57ujwlC!\" \"\"          \"w.D-uVIO\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), frac_na = 0)  date_bounded(left, right, len = c(1L, 10L), frac_na = 0)  date_left_bounded(left, len = c(1L, 10L), frac_na = 0)  date_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"1978-07-27\" \"2806-04-06\" \"1013-07-25\" \"1524-12-20\" \"2442-10-28\" #> [6] \"1907-03-29\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-06\" \"2020-01-05\" \"2020-01-09\" \"2020-01-02\" date_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"1689-03-24\" NA           NA           NA           NA           #>  [6] \"2983-09-16\" NA           \"1767-04-16\" \"1460-09-18\" NA"},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0 )  double_left_bounded(   left,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_nan approximate fraction NaN values included vector. fraction 0, default, include NaN values. fraction 0.5 include around 50% NaN values. frac_inf approximate fraction Inf -Inf values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #>  [1]  957883376 -927026556  694505254 -994837304          0  836443139 #>  [7] -264506382  510553115  952527052  181452106 double_(big_dbl = TRUE) |> show_example() #> [1] -5.222178e+307 double_bounded(left = -5, right = 5) |> show_example() #> [1] 0 double_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] -537499317  -94701970         NA   56219906         NA         NA #>  [7]         NA         NA          0         NA double_(len = 10L, frac_nan = 0.2, frac_inf = 0.2) |> show_example() #>  [1]       -Inf  733425823   74036506       -Inf       -Inf  685377460 #>  [7] -424449714  316663730  420453472       -Inf"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] pG13k  v.`    6Vl2   AsyZ\"r #> Levels: pG13k v.` 6Vl2 AsyZ\"r factor_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  1  1 NA  1 NA  1 NA  1 NA  1"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"generate flat lists values coming single input generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] -4304 #>  #> [[2]] #> [1] 4084 #>  #> [[3]] #> [1] 887 #>  #> [[4]] #> [1] -5259 #>  #> [[5]] #> [1] -140 #>  #> [[6]] #> [1] 3905 #>  #> [[7]] #> [1] 9612 #>  #> [[8]] #> [1] -9354 #>  #> [[9]] #> [1] 0 #>  #> [[10]] #> [1] -3343 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   size = getOption(\"quickcheck.size\", 50L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. size maximum length generators. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen generator","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"library(quickcheck) library(testthat)  is_even <-   \\(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) |> hedgehog::gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), frac_na = 0)  hms_bounded(left, right, len = c(1L, 10L), frac_na = 0)  hms_left_bounded(left, len = c(1L, 10L), frac_na = 0)  hms_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 04:34:53.271704 #> 10:18:21.307421 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 00:06:02.591153 hms_(len = 10L, frac_na = 0.5) |> show_example() #> 15:41:51.432621 #> 09:53:36.202289 #>              NA #> 01:32:04.163733 #> 02:37:28.623960 #> 14:47:06.998087 #> 03:57:45.776938 #> 14:59:54.626117 #>              NA #>              NA"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), frac_na = 0)  integer_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_positive(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_negative(len = c(1L, 10L), frac_na = 0, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1]    0 4852    0 2840 integer_(big_int = TRUE) |> show_example() #> [1] -1047222186 -1267030940  -187332723 -1038961872  1795235832  2015655571 #> [7]  -578657256  1441353782 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1] -3 -1  1  2 -2 -3  0 integer_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]   NA 2447  -69 3777   NA   NA   NA   NA 9125 3525"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1] -3191 -5366  9226     0 -2506 -8385 #>  #> [[2]] #>  [1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> [1] -7293     0  9674  9256  2854 -3845   615 -2941 #>  #> $b #> $b[[1]] #> $b[[1]]$a #> [1]     0 -3584     0  9889   920 -3562 -7987     0 #>  #> $b[[1]]$b #> [1] 431744558 429735105         0         0 658912803 -79889227 #>  #>  #> $b[[2]] #> $b[[2]]$a #> [1]  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE #>  #> $b[[2]]$b #> [1]          0 -376551073 -399659486  649176670 -455227866 -708816366  283253373 #>  #>  #> $b[[3]] #> $b[[3]]$a #> [1] \"}d\"       \"DNtCxEt[\" \"w:;;wwz\"  \")pSE/\"    \"`LRbMiY\"  \"p/5B#5\"   \"R#U:R;T\"  #>  #> $b[[3]]$b #> 00:33:13.972101 #> 08:16:18.365856 #>  #>  #> $b[[4]] #> $b[[4]]$a #> [1]  9172  6152     0   481  9692  1209 -5849 #>  #> $b[[4]]$b #> [1] @,uf,   &.O$/l  <       U`~     T       o8{y.7  x       `{h!m;V A2,\"    #> Levels: @,uf, &.O$/l < U`~ T o8{y.7 x `{h!m;V A2,\" #>  #>  #> $b[[5]] #> $b[[5]]$a #> [1]  6870     0 -8166 -4940     0 -3486 -4927  5458 #>  #> $b[[5]]$b #> [1] \"1438-06-08 05:12:17 UTC\" \"306-05-19 12:22:56 UTC\"  #> [3] \"227-01-02 22:31:55 UTC\"  \"2266-12-17 06:15:12 UTC\" #> [5] \"2157-03-10 17:49:37 UTC\" \"2562-12-24 11:34:56 UTC\" #>  #>  #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #>  [1] -5588   327 -4280   627 -9662  5446 -4543     0 -3885  8739 #>  #> [[2]] #> [1] 5038 4801 1835 8777  -72 3890 #>  #> [[3]] #> [1] -2802 -3057     0  4693     0  5876 #>  #> [[4]] #> [1]  3763 -3825 -2603 #>  #> [[5]] #> [1]  4061  2586  7850  1838  -351  5015   448  2580 -5638 #>  #> [[6]] #> [1]    0 9577 4933 -879 2514 2104    0 5914    0 #>  #> [[7]] #> [1]  5896 -3063 #>  #> [[8]] #> [1]  8270  6012  2454 -3876   529 -6289 -2523 #>  #> [[9]] #> [1] -7004 -3139 -3820 -5160     0  8227 -3611 #>  #> [[10]] #> [1]  7647  6881  6562   700 -2532 -3397  6627 -1910 -3789 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE logical_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  TRUE    NA FALSE    NA  TRUE    NA    NA FALSE    NA FALSE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), frac_na = 0)  numeric_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_positive(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_negative(len = c(1L, 10L), frac_na = 0, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1] 361400010 numeric_(big_num = TRUE) |> show_example() #> [1]  5.914369e+305  1.362346e+307  1.014585e+307 -3.375196e+307   0.000000e+00 #> [6]  1.104267e+307 -3.158581e+306 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1]  3.781238  3.298259  3.923559  3.899868 -4.649544  2.768078  1.899091 #> [8] -1.663071 -2.521477 numeric_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]        NA         0        NA         0        NA        NA 817697753 #>  [8]        NA        NA        NA"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1] \"izD8cSI[>\" \"BU_z8\"     \"^1!q$8!L\"  \"Os0\"       \"$n1z!`o\"   \"gP\"        #> [7] \"3_y\"       \"iCz2eIV\"   one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> NULL"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), frac_na = 0)  posixct_bounded(left, right, len = c(1L, 10L), frac_na = 0)  posixct_left_bounded(left, len = c(1L, 10L), frac_na = 0)  posixct_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"829-08-19 07:00:14 UTC\"  \"1725-06-22 04:36:35 UTC\" #> [3] \"69-01-21 16:08:06 UTC\"   \"2715-06-01 05:40:37 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-06-13 13:52:14 UTC\" \"2020-10-16 16:47:03 UTC\" #> [3] \"2020-08-17 17:16:39 UTC\" \"2020-07-10 03:42:31 UTC\" #> [5] \"2020-07-21 22:06:57 UTC\" posixct_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"1434-08-17 12:33:59 UTC\" NA                        #>  [3] NA                        \"1509-02-09 02:05:50 UTC\" #>  [5] NA                        NA                        #>  [7] \"1251-09-09 19:26:51 UTC\" NA                        #>  [9] NA                        \"2537-09-09 04:01:16 UTC\""},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 10 × 1 #>        a #>    <int> #>  1     0 #>  2 -1198 #>  3 -5635 #>  4 -2315 #>  5   113 #>  6 -5485 #>  7 -7687 #>  8 -2867 #>  9  1740 #> 10  1872 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b         #>   <int> <chr>     #> 1     0 \"!]*sb9T\" #> 2   778 \"j7~F\"    #> 3  2077 \"\\\"1j>!\"  #> 4  4588 \" ;Keg\"   #> 5  4120 \"BymG\""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 4 × 4 #>   ...1  ...2       ...3       ...4       #>   <lgl> <date>     <date>     <date>     #> 1 TRUE  2564-07-18 1172-08-10 1088-03-10 #> 2 TRUE  1752-12-18 1563-01-05 2507-03-10 #> 3 FALSE 1944-09-13 2968-11-19 1038-12-14 #> 4 TRUE  1991-09-07 1370-07-06 1320-08-26 tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>     ...1 ...2  ...3             ...4        ...5 #>    <int> <lgl> <time>          <int>       <dbl> #>  1     0 TRUE  08:38:49.209983  5650  499410401. #>  2  4111 TRUE  14:56:27.693304  8055  234319197. #>  3  3676 TRUE  17:55:29.190137  8452 -375120610. #>  4 -8513 FALSE 19:49:23.025874  6984  839973870. #>  5 -1312 TRUE  23:28:24.132230  2230  360265813. #>  6   369 FALSE 19:19:31.239232  4291 -925510960. #>  7 -8931 FALSE 06:00:19.173589  1095 -855331478. #>  8  5855 FALSE 06:18:37.970562  3979 -562279759. #>  9 -6186 TRUE  18:18:29.916737 -6019  228640770. #> 10  5550 TRUE  22:43:59.799627     0  636903478."},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
