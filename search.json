[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = function(a) expect_equal(a, a + 0)   )           }) #> Test passed 🥇  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = function(a, b) expect_equal(a + b, b + a)   )           }) #> Test passed 🎉  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = function(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) #> Test passed 🎉 library(dplyr, warn.conflicts = FALSE)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = function(a) {       distinct(a) %>% expect_equal(a)     }   ) }) #> Test passed 🥳  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = function(a) {       bind_rows(a, a) %>% distinct() %>% expect_equal(a)     }   ) }) #> Test passed 🌈  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = function(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) %>% expect_equal(unique_rows)     }   ) }) #> Test passed 😀"},{"path":"/index.html","id":"quickcheck-generators","dir":"","previous_headings":"","what":"Quickcheck generators","title":"Property Based Testing","text":"Many generators provided quickcheck. examples.","code":""},{"path":"/index.html","id":"atomic-vectors","dir":"","previous_headings":"Quickcheck generators","what":"Atomic vectors","title":"Property Based Testing","text":"","code":"integer_(len = 10) %>% show_example() #>  [1]  3317 -3213  1951  3534 -2221  8636  -778  2284  1769     0 character_alphanumeric(len = 10) %>% show_example() #>  [1] \"PSeVIH\"   \"rUQED2FL\" \"r6MnO\"    \"INonAjm\"  \"Cvprr8\"   \"4\"        #>  [7] \"m\"        \"JnXbuTLd\" \"Mm1aOQh\"  \"lOg5RaAn\" posixct_(len = 10, any_na = TRUE) %>% show_example()  #>  [1] \"1993-06-20 23:59:40 PDT\" \"1181-08-16 14:11:22 LMT\" #>  [3] NA                        \"1025-07-18 10:03:01 LMT\" #>  [5] \"0712-01-24 14:57:34 LMT\" \"2817-06-25 00:06:35 PDT\" #>  [7] NA                        NA                        #>  [9] \"0920-12-14 18:28:10 LMT\" NA"},{"path":"/index.html","id":"lists","dir":"","previous_headings":"Quickcheck generators","what":"Lists","title":"Property Based Testing","text":"","code":"list_(a = constant(NULL), b = any_undefined()) %>% show_example() #> $a #> NULL #>  #> $b #> [1] -Inf flat_list_of(logical_(), len = 3) %>% show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] FALSE"},{"path":"/index.html","id":"tibbles","dir":"","previous_headings":"Quickcheck generators","what":"Tibbles","title":"Property Based Testing","text":"","code":"tibble_(a = date_(), b = hms_(), rows = 5) %>% show_example() #> # A tibble: 5 x 2 #>   a          b               #>   <date>     <time>          #> 1 1543-04-19 09:24:42.580621 #> 2 1241-03-04 09:32:46.837266 #> 3 2816-05-10 12:10:20.618591 #> 4 2720-10-09 23:02:45.891871 #> 5 1793-02-01 19:17:16.096649 tibble_of(double_bounded(-10, 10), rows = 3, cols = 3) %>% show_example() #> # A tibble: 3 x 3 #>    ...1  ...2   ...3 #>   <dbl> <dbl>  <dbl> #> 1 -2.77 -2.86 -0.595 #> 2  7.63  0     3.00  #> 3 -4.46  1.42 -0.434 any_tibble(rows = 3, cols = 3) %>% show_example() #> # A tibble: 3 x 3 #>   ...1       ...2      ...3      #>   <list>     <fct>     <list>    #> 1 <dttm [5]> xqf       <chr [1]> #> 2 <lgl [6]>  lq        <fct [1]> #> 3 <lgl [6]>  _`I#VLs|> <lgl [1]>"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used wrapping from_hedgehog. hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error: quickcheck generator can also converted hedgehog generator can used hedgehog functions.","code":"library(hedgehog)  is_even <-    function(a) a %% 2 == 0  gen_powers_of_two <-    gen.element(1:10) %>% gen.with(function(a) 2 ^ a)  test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = function(a) is_even(a) %>% expect_true()   ) }) #> Test passed 😀 test_that(\"powers of two and integers are both numeric values\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     b = integer_(),     property = function(a, b) c(a, b) %>% is.numeric() %>% expect_true()   ) }) #> Test passed 🥳 test_that(\"composing hedgehog with quickcheck generators fails\", {   tibble_of(from_hedgehog(gen_powers_of_two)) %>% expect_error() }) #> Test passed 🌈 gen_powers_of_two <-    integer_bounded(1L, 10L, len = 1L) %>%      as_hedgehog() %>%      gen.with(function(a) 2 ^ a)   test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) %>% expect_true()   ) }) #> Test passed 🎊"},{"path":"/index.html","id":"fuzz-tests","dir":"","previous_headings":"","what":"Fuzz tests","title":"Property Based Testing","text":"Fuzz testing special case property based testing property tested code doesn’t fail range inputs. example fuzz testing quickcheck. Let’s say want test purrr::map function won’t fail vector input.","code":"test_that(\"map won't fail with any vector as input\", {   for_all(     a = any_vector(),     property = \\(a) purrr::map(a, identity) %>% expect_silent()   ) }) #> Test passed 🎉"},{"path":"/index.html","id":"repeat-tests","dir":"","previous_headings":"","what":"Repeat tests","title":"Property Based Testing","text":"Repeat tests can used repeatedly test property holds true many calls function. different regular property based tests don’t require generators. function repeat_test call function many times ensure expectation passes cases. kind test can useful testing functions randomness.","code":"test_that(\"runif generates random numbers between a min and max value\", {   repeat_test(     property = \\() {       random_number <- runif(1, min = 0, max = 10)       expect_true(random_number >= 0 && random_number <= 10)     }   ) }) #> Test passed 😸"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Any atomic vector generator — any_atomic","title":"Any atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any atomic vector generator — any_atomic","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any atomic vector generator — any_atomic","text":"","code":"any_atomic() %>% show_example() #> [1] \"2693-08-20\" \"2108-02-27\" \"1483-07-17\" \"2690-11-26\" \"1147-10-24\" any_atomic(len = 10L, any_na = TRUE) %>% show_example() #>  [1]         NA         NA         NA -441465796  667938946  257398989 #>  [7] -119685062 -850477856 -807329793  856629779"},{"path":"/reference/any_data.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data.table generator — any_data.table","title":"Any data.table generator — any_data.table","text":"Generate data.tables.","code":""},{"path":"/reference/any_data.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data.table generator — any_data.table","text":"","code":"any_data.table(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data.table generator — any_data.table","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data.table generator — any_data.table","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_data.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data.table generator — any_data.table","text":"","code":"any_data.table(rows = 3L, cols = 3L) %>% show_example() #>         ...1 ...2            ...3 #> 1: qQW #hf=^ 3495 23:01:30.070026 #> 2:    IJCl&b 9957 07:12:15.599854 #> 3:       tuY    0 07:35:05.001783"},{"path":"/reference/any_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data frame generator — any_data_frame","title":"Any data frame generator — any_data_frame","text":"Generate data.frames.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data frame generator — any_data_frame","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data frame generator — any_data_frame","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = 3L, cols = 3L) %>% show_example() #>         ...1  ...2       ...3 #> 1  399822110 FALSE  376558629 #> 2  376271788 FALSE -779626345 #> 3 -860701999 FALSE  454928339"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any flat homogeneous list generator — any_flat_homogeneous_list","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic scalar class.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() %>% show_example() #> [[1]] #> [1] 575116571 #>  #> [[2]] #> [1] 145938145 #>  any_flat_homogeneous_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [1] 976644556 #>  #> [[2]] #> [1] -14198584 #>  #> [[3]] #> [1] -557561330 #>  #> [[4]] #> [1] -273448177 #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] -183024454 #>  #> [[9]] #> [1] -725529513 #>  #> [[10]] #> [1] -396340073 #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any flat list generator — any_flat_list","title":"Any flat list generator — any_flat_list","text":"Generate lists element atomic scalar.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any flat list generator — any_flat_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any flat list generator — any_flat_list","text":"","code":"any_flat_list() %>% show_example() #> [[1]] #> 07:07:52.027751 #>  #> [[2]] #> [1] 482056920 #>  #> [[3]] #> [1] \".^+X]1hV\" #>  #> [[4]] #> [1] -588076880 #>  #> [[5]] #> [1] -563390819 #>  #> [[6]] #> [1] \"1794-11-27\" #>  #> [[7]] #> [1] -842186443 #>  #> [[8]] #> [1] r'pA #> Levels: r'pA #>  #> [[9]] #> [1] $7:>U #> Levels: $7:>U #>  #> [[10]] #> [1] -203975773 #>  any_flat_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [1] \"2105-05-14 17:59:43 UTC\" #>  #> [[2]] #> [1] \"1883-02-03\" #>  #> [[3]] #> 23:14:29.271949 #>  #> [[4]] #> [1] *^v-/ #> Levels: *^v-/ #>  #> [[5]] #> [1] T] ,rH #> Levels: T] ,rH #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] NA #>  #> [[8]] #> 08:53:08.541785 #>  #> [[9]] #> [1] \"432-07-17 22:21:08 UTC\" #>  #> [[10]] #> [1] -253343590 #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any list generator — any_list","title":"Any list generator — any_list","text":"Generate lists containing lists atomic vectors.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any list generator — any_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any list generator — any_list","text":"","code":"any_list() %>% show_example() #> [[1]] #> [1]  813 6805 #>  #> [[2]] #> [1] -692948904  840472674 #>  any_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [[1]]$a #> [1] NA          \"-Oj\\\"$b,\"  \"}\\\\B1:\"    \":R~kv\"     \"0lHZ&m\"    \"hV\"        #> [7] \"#ltkoLv21\" NA          #>  #> [[1]]$b #> [1] \"1542-11-14\" \"1344-06-11\" \"1670-10-18\" \"1136-12-02\" NA           #> [6] NA           NA           \"1076-08-26\" #>  #>  #> [[2]] #> [[2]]$a #> [1] \"2082-02-25\" \"2624-04-17\" \"2436-02-01\" \"1392-11-10\" NA           #> [6] \"1223-03-07\" #>  #> [[2]]$b #> [1] -3433    NA  8981 -2168  1800    NA -2944 #>  #>  #> [[3]] #> [[3]]$a #> [1]  4118 -9240 #>  #> [[3]]$b #> [1] NA        NA        \"n\"       \"prx[~dZ\" NA        #>  #>  #> [[4]] #> [[4]]$a #> [1]  102812429  920665378   -7637938  987749376 -212813677         NA          0 #> [8]         NA #>  #> [[4]]$b #> 04:26:31.787732 #> 19:21:18.136671 #>  #>  #> [[5]] #> [[5]]$a #> [1] \"2751-04-06 02:24:04 UTC\" \"1844-11-08 00:12:36 UTC\" #> [3] NA                        \"507-11-11 23:31:15 UTC\"  #> [5] \"1458-03-23 08:31:16 UTC\" \"1928-01-16 20:18:46 UTC\" #> [7] \"2744-03-18 23:47:35 UTC\" \"2951-07-05 08:30:26 UTC\" #> [9] NA                        #>  #> [[5]]$b #> [1] \"899-11-22 04:09:46 UTC\"  \"2124-01-26 02:32:26 UTC\" #> [3] \"1687-02-23 12:26:13 UTC\" \"834-10-24 14:32:20 UTC\"  #> [5] \"1587-08-22 20:51:01 UTC\" NA                        #> [7] \"2749-12-31 16:50:52 UTC\" \"1095-05-24 21:11:24 UTC\" #> [9] \"1262-11-03 02:10:04 UTC\" #>  #>  #> [[6]] #> [[6]]$a #> [1]  TRUE  TRUE FALSE FALSE    NA FALSE FALSE FALSE  TRUE #>  #> [[6]]$b #>  [1] -2090  7983  5527  2074 -5798  4712  1760    NA -5351  6313 #>  #>  #> [[7]] #> [[7]]$a #> 18:27:00.064573 #>  #> [[7]]$b #> [1]  232212855  438487912 -739240360  453226068 -290466573 -167634968  795375804 #> [8]          0 #>  #>  #> [[8]] #> [[8]]$a #> [1] NA                        \"2635-06-20 16:25:00 UTC\" #> [3] \"692-07-17 20:56:57 UTC\"  \"1250-10-06 21:15:27 UTC\" #> [5] \"551-11-13 08:52:54 UTC\"  \"1667-03-09 14:29:15 UTC\" #> [7] NA                        #>  #> [[8]]$b #> [1]   NA TRUE #>  #>  #> [[9]] #> [[9]]$a #> [1]     0 -2613    NA -8834 #>  #> [[9]]$b #> [1] \"o\"       \"Z\"       \"2r\"      \"@hfCo\"   \"r\"       NA        NA        #> [8] \"6p|<B,F\" #>  #>  #> [[10]] #> [[10]]$a #> [1] \"56-03-09 16:52:11 UTC\" NA                      #>  #> [[10]]$b #> [1]   NA 3019 #>  #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Any tibble generator — any_tibble","title":"Any tibble generator — any_tibble","text":"Generate tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any tibble generator — any_tibble","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble(rows = 3L, cols = 3L) %>% show_example() #> # A tibble: 3 × 3 #>   ...1       ...2                ...3       #>   <list>     <dttm>              <date>     #> 1 <dttm [1]> 1208-04-25 13:29:52 1157-01-30 #> 2 <dttm [1]> 1115-11-10 19:04:39 2161-07-30 #> 3 <dttm [1]> 298-06-04 06:59:51  1659-06-11"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Any undefined value generator — any_undefined","title":"Any undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any undefined value generator — any_undefined","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any undefined value generator — any_undefined","text":"","code":"any_undefined() %>% show_example() #> [1] Inf"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Any vector generator — any_vector","title":"Any vector generator — any_vector","text":"Generate atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any vector generator — any_vector","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any vector generator — any_vector","text":"","code":"any_vector() %>% show_example() #> [1] \"2722-11-04\" \"1196-11-03\" \"2255-01-21\" \"2948-03-10\" \"2928-09-26\" #> [6] \"1092-02-04\" any_vector(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [[1]]$a #> [1] \"774-03-18 20:18:26 UTC\"  NA                        #> [3] \"1874-05-30 20:01:29 UTC\" \"2271-06-19 20:40:45 UTC\" #> [5] \"1406-03-31 09:08:14 UTC\" NA                        #> [7] NA                        \"2070-06-07 17:10:15 UTC\" #> [9] NA                        #>  #> [[1]]$b #> [1] NA           \"1750-01-19\" \"2966-02-28\" \"1014-06-25\" \"1443-11-26\" #> [6] \"1656-10-13\" #>  #>  #> [[2]] #> [[2]]$a #> [1] NA  1 NA  1  1  1 NA  1 #>  #> [[2]]$b #> [1] -9450 -1540    NA  9647     0 #>  #>  #> [[3]] #> [[3]]$a #> [1]         NA  278171853 -963161244  401896969 #>  #> [[3]]$b #> [1] \",u \"    \"S\"      NA       \"Q\"      NA       \"G~@>\"   \" OeRG-\" NA       #> [9] \"s\"      #>  #>  #> [[4]] #> [[4]]$a #>  [1] FALSE    NA FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE #>  #> [[4]]$b #> [1]    NA  TRUE FALSE FALSE    NA  TRUE  TRUE    NA #>  #>  #> [[5]] #> [[5]]$a #> [1] \"2443-03-22\" \"1041-09-08\" \"2646-07-05\" \"2662-05-14\" \"1521-07-22\" #> [6] \"2919-11-15\" \"1772-11-04\" #>  #> [[5]]$b #> [1] \"fJZ7M:$!\" NA         \"71c\"      #>  #>  #> [[6]] #> [[6]]$a #> [1]  2745    NA    NA    NA -2007 -3474  2116 -7708 #>  #> [[6]]$b #> [1] \"711-11-23 15:40:07 UTC\"  \"1505-09-28 04:47:16 UTC\" #> [3] \"2263-12-17 23:57:49 UTC\" \"2594-03-16 00:09:40 UTC\" #> [5] \"2641-05-19 02:54:06 UTC\" \"2591-11-15 08:54:00 UTC\" #>  #>  #> [[7]] #> [[7]]$a #> [1]         NA -935119142  367316809  570365131  577782740  397504471         NA #> [8] -450585886 #>  #> [[7]]$b #> [1] \"wL<#\"      NA          \"F\"         NA          NA          \"0e\"        #> [7] \"n'3c|isvR\" #>  #>  #> [[8]] #> [[8]]$a #> [1] \"2984-12-30\" #>  #> [[8]]$b #> 16:29:52.448263 #> 12:58:51.852408 #> 12:06:08.508533 #> 03:26:18.123188 #> 00:07:28.652502 #> 16:46:05.456930 #> 18:12:40.930233 #>              NA #>  #>  #> [[9]] #> [[9]]$a #> [1] -9691  3960 #>  #> [[9]]$b #> [1] \"2206-05-19 04:14:02 UTC\" \"2263-01-15 19:18:40 UTC\" #> [3] \"453-08-06 10:27:07 UTC\"  NA                        #>  #>  #> [[10]] #> [[10]]$a #> [1]  1  1  1 NA  1 NA  1  1  1 #>  #> [[10]]$b #> [1] V_! #> Levels: V_! #>  #>"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, data.frames, tibbles, data.tables, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything(any_empty = TRUE, any_undefined = TRUE)"},{"path":"/reference/anything.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any R object generator — anything","text":"any_empty Whether empty vectors data frames allowed. any_undefined Whether undefined values allowed.","code":""},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator object.","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() %>% show_example() #> [[1]] #> [[1]]$a #> [1] FALSE  TRUE  TRUE FALSE #>  #> [[1]]$b #> [1] 3]Z|e&A% #> Levels: 3]Z|e&A% #>  #>  #> [[2]] #> [[2]]$a #> [1] FALSE    NA  TRUE  TRUE    NA FALSE #>  #> [[2]]$b #> 14:03:26.915527 #> 02:20:31.415401 #> 18:22:49.521860 #> 03:32:27.626985 #>              NA #> 18:25:04.113879 #> 18:49:07.032602 #>              NA #> 16:51:51.431476 #> 09:30:35.523666 #>  #>  #> [[3]] #> [[3]]$a #> [1] $(Y&_WoV  B@|$J8}   .-ye.jn,  S^{]IgJ-4 M|+-&%N8  '/t)}U=Np #> Levels: $(Y&_WoV B@|$J8} .-ye.jn, S^{]IgJ-4 M|+-&%N8 '/t)}U=Np #>  #> [[3]]$b #> [1] NA                        \"571-11-17 16:10:00 UTC\"  #> [3] \"2942-03-22 16:03:06 UTC\" \"2356-12-05 03:31:17 UTC\" #> [5] \"766-04-30 09:42:15 UTC\"  NA                        #> [7] \"2645-07-27 19:42:54 UTC\" \"703-08-28 20:22:45 UTC\"  #>  #>  #> [[4]] #> [[4]]$a #> [1] \"2025-01-22 14:33:11 UTC\" \"2766-05-27 22:49:53 UTC\" #> [3] \"450-10-13 20:20:31 UTC\"  \"2015-08-27 19:30:16 UTC\" #> [5] \"252-04-18 05:24:49 UTC\"  \"92-04-10 05:14:55 UTC\"   #>  #> [[4]]$b #> [1] -8638 -1469 #>  #>  #> [[5]] #> [[5]]$a #>              NA #> 06:31:37.712105 #>              NA #> 13:54:28.270167 #> 06:50:14.939081 #> 04:58:31.331204 #>  #> [[5]]$b #> [1] \"496-01-31 12:40:06 UTC\"  \"168-05-19 06:43:08 UTC\"  #> [3] \"1112-11-26 00:03:11 UTC\" \"1666-12-27 11:06:09 UTC\" #> [5] \"69-12-02 18:37:23 UTC\"   #>  #>  #> [[6]] #> [[6]]$a #> [1] \"1749-01-17 21:37:07 UTC\" NA                        #> [3] \"2330-11-24 04:21:21 UTC\" NA                        #> [5] \"2443-10-15 06:56:41 UTC\" \"2361-10-20 13:33:11 UTC\" #> [7] \"2394-10-02 18:55:30 UTC\" #>  #> [[6]]$b #> [1]    NA  TRUE  TRUE FALSE FALSE    NA    NA  TRUE #>  #>  #> [[7]] #> [[7]]$a #> [1] NA #>  #> [[7]]$b #> [1]  TRUE  TRUE FALSE FALSE  TRUE  TRUE #>  #>  #> [[8]] #> [[8]]$a #> 09:53:39.338526 #>  #> [[8]]$b #> [1] \"1166-09-30 01:58:42 UTC\" \"2495-03-16 06:57:21 UTC\" #> [3] \"1282-12-16 13:37:48 UTC\" NA                        #> [5] NA                        \"362-04-22 15:06:12 UTC\"  #> [7] NA                        \"2778-07-08 10:07:11 UTC\" #> [9] \"1654-03-17 09:09:33 UTC\" #>  #>  #> [[9]] #> [[9]]$a #> [1] \"1035-05-12\" \"2447-02-09\" #>  #> [[9]]$b #>  [1] \"1211-10-13\" NA           NA           \"2069-01-31\" \"1244-10-31\" #>  [6] \"1510-05-10\" NA           \"1495-10-06\" \"1504-01-29\" \"1263-04-17\" #>  #>  #> [[10]] #> [[10]]$a #> NA #> NA #>  #> [[10]]$b #> [1] NA NA #>  #>"},{"path":"/reference/as_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"Convert quickcheck generator hedgehog generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"as_hedgehog(generator)"},{"path":"/reference/as_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"generator quickcheck_generator object.","code":""},{"path":"/reference/as_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"quickcheck_generator object.","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"is_even <-   function(a) a %% 2L == 0L gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) %>%     as_hedgehog() %>%     hedgehog::gen.with(function(a) 2 ^ a) for_all(   a = from_hedgehog(gen_powers_of_two),   property = function(a) is_even(a) %>% testthat::expect_true() )"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_letters(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_numbers(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_alphanumeric(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_empty Whether empty character values allowed.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator object.","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() %>% show_example() #> [1] \"`z Y`?J#g\"  \"?a<RSW&\"    \"[,R<5Pt)^\"  \"8LsO\"       \"Bn)t8pcs\"   #> [6] \"\\\\.8xwd:\"   \"FMnx\\\\L7*?\" character_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] \"BQb\"       \"6R\"        NA          \"-\"         \"n\\\"[>@#U\"  \"e=[\"       #>  [7] \">:/s*Sql\"  \"}vXFYeaR4\" NA          \"J}U#\"      character_(len = 10L, any_empty = TRUE) %>% show_example() #>  [1] \"gIAS%E5t~\" \"\"          \"dA,+9\"     \"@oFjL\"     \"\"          \"\"          #>  [7] \"d\"         \"\"          \"ev}\\\\~_E_\" \"|\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator object.","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) %>% show_example() #> NULL"},{"path":"/reference/data.table_.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generators — data.table_","title":"data.table generators — data.table_","text":"Construct data.table generators similar way data.table::data.table.","code":""},{"path":"/reference/data.table_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generators — data.table_","text":"","code":"data.table_(..., rows = c(1L, 10L))"},{"path":"/reference/data.table_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generators — data.table_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data.table_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generators — data.table_","text":"quickcheck_generator object.","code":""},{"path":"/reference/data.table_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generators — data.table_","text":"","code":"data.table_(a = integer_()) %>% show_example() #>        a #> 1:  7631 #> 2: -1307 #> 3: -2178 #> 4:     0 #> 5: -7138 #> 6: -7172 #> 7:  9919 #> 8:  4578 #> 9:     0 data.table_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #>        a         b #> 1:     0        4D #> 2:     0         o #> 3:   676    raqU1F #> 4: -1313   hE-yjhO #> 5: -1107 ]r<oyrh+0"},{"path":"/reference/data.table_of.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generator with randomized columns — data.table_of","title":"data.table generator with randomized columns — data.table_of","text":"data.table generator randomized columns","code":""},{"path":"/reference/data.table_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generator with randomized columns — data.table_of","text":"","code":"data.table_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data.table_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generator with randomized columns — data.table_of","text":"... set unnamed generators. generated data.tables built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data.table_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generator with randomized columns — data.table_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/data.table_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generator with randomized columns — data.table_of","text":"","code":"data.table_of(logical_(), date_()) %>% show_example() #>     ...1 ...2 #> 1: FALSE TRUE #> 2: FALSE TRUE #> 3: FALSE TRUE data.table_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #>                ...1            ...2            ...3            ...4      ...5 #>  1: 10:02:23.654156 13:37:40.563136 07:40:18.029614 16:31:01.995039 9 PE\"aU/  #>  2: 21:40:07.791701 03:52:02.768748 21:44:21.854049 18:53:22.538116      hZ2z #>  3: 10:53:55.223793 01:49:05.888268 05:51:11.876917 06:02:09.515949    W oT\"q #>  4: 05:00:22.776463 13:12:28.604789 07:59:05.320812 16:30:37.531766     ;1f8m #>  5: 00:16:27.330270 03:55:47.864901 14:38:06.955024 14:08:58.555051         L #>  6: 18:12:57.733951 11:31:55.144383 19:11:33.869636 19:34:00.960518         W #>  7: 01:38:38.803132 22:27:21.847651 22:19:57.176352 20:46:24.469325   H<Kb}NW #>  8: 05:18:21.902759 12:59:12.346045 14:23:53.206289 15:12:36.672789      /.Vu #>  9: 19:21:56.952165 03:04:00.233336 19:42:50.044081 18:19:17.271494        (K #> 10: 05:32:58.520045 20:05:29.082114 04:07:39.254539 15:52:06.881383     OIx4Q"},{"path":"/reference/data_frame_.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generators — data_frame_","title":"Data frame generators — data_frame_","text":"Construct data frame generators similar way base::data.frame.","code":""},{"path":"/reference/data_frame_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(..., rows = c(1L, 10L))"},{"path":"/reference/data_frame_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generators — data_frame_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data_frame_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generators — data_frame_","text":"quickcheck_generator object.","code":""},{"path":"/reference/data_frame_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(a = integer_()) %>% show_example() #>       a #> 1  8368 #> 2 -6691 #> 3  4630 #> 4 -4067 data_frame_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #>       a         b #> 1 -7463 uJs ,kQ%d #> 2 -9675         z #> 3 -1779  ofEQ>`wI #> 4 -8814    S>23l5 #> 5 -8519      +Aih"},{"path":"/reference/data_frame_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generator with randomized columns — data_frame_of","title":"Data frame generator with randomized columns — data_frame_of","text":"Data frame generator randomized columns","code":""},{"path":"/reference/data_frame_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generator with randomized columns — data_frame_of","text":"","code":"data_frame_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data_frame_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generator with randomized columns — data_frame_of","text":"... set unnamed generators. generated data frames built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data_frame_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generator with randomized columns — data_frame_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/data_frame_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generator with randomized columns — data_frame_of","text":"","code":"data_frame_of(logical_(), date_()) %>% show_example() #>    ...1       ...2       ...3       ...4       ...5  ...6 #> 1 FALSE 1780-10-15 1327-01-15 2487-12-18 2643-06-22 FALSE #> 2  TRUE 1867-12-19 1027-02-11 2118-08-02 1077-07-25 FALSE #> 3 FALSE 1608-06-05 2830-11-06 1985-08-29 2203-10-15  TRUE #> 4 FALSE 1925-10-15 1220-08-15 1098-04-04 2353-08-05 FALSE #> 5  TRUE 2475-10-13 2723-05-31 1559-03-24 2378-10-23 FALSE #> 6  TRUE 2411-03-06 1641-12-23 1990-09-15 1743-09-18 FALSE #> 7 FALSE 2899-06-14 2166-01-27 2974-01-14 1544-01-30 FALSE #> 8 FALSE 1597-03-30 1634-09-18 1536-04-24 2892-02-03  TRUE data_frame_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #>          ...1            ...2  ...3  ...4  ...5 #> 1  -928704955 08:40:27.818848 -5257 FALSE -3345 #> 2   606563703 09:05:05.702215  8544  TRUE     0 #> 3   323654587 08:53:19.442263 -4408  TRUE   173 #> 4   -34369655 00:40:19.868180 -3813 FALSE -8312 #> 5   592241605 17:11:47.259690 -4277  TRUE     0 #> 6   623142269 23:22:35.292897  2937  TRUE  9742 #> 7  -631074195 09:18:14.138542  7770  TRUE -6942 #> 8  -318966418 05:10:13.133558  4051  TRUE -2679 #> 9  -797440572 22:51:24.341296  1822 FALSE     0 #> 10  832219739 08:26:05.458431     0 FALSE  1320"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), any_na = FALSE)  date_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  date_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  date_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator object.","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() %>% show_example() #> [1] \"2275-07-13\" \"2298-03-25\" \"1256-04-16\" \"2771-03-14\" \"2955-02-06\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) %>% show_example() #> [1] \"2020-01-02\" \"2020-01-04\" \"2020-01-04\" \"2020-01-01\" date_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] \"2618-09-27\" NA           \"1940-08-08\" \"2352-04-08\" \"1601-03-08\" #>  [6] \"2865-05-23\" \"1939-07-21\" \"2154-11-24\" NA           \"2944-02-23\""},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE )  double_left_bounded(   left,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_nan Whether NaN values allowed. any_inf Whether Inf/-Inf values allowed. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator object.","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() %>% show_example() #> [1] -836093059  506305704 -925633561  510197600 double_(big_dbl = TRUE) %>% show_example() #> [1]   0.000000e+00 -8.439829e+307  1.383443e+307  3.840862e+307 -5.904940e+307 #> [6]  7.644773e+307  6.828413e+306 double_bounded(left = -5, right = 5) %>% show_example() #> [1]  0.00000000 -3.66210338  4.62204226 -3.28661084 -3.88317683  0.44003448 #> [7]  0.08460794  2.93329743  2.18153962 double_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  361204175 -896940339  916723269         NA -281135627  709976104 #>  [7] -907603227         NA  420705431         NA double_(len = 10L, any_nan = TRUE, any_inf = TRUE) %>% show_example() #>  [1]      -Inf  25315002 -80803424       Inf         0      -Inf      -Inf #>  [8]       Inf -73399182  88637346"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal length vector generator — equal_length","title":"Equal length vector generator — equal_length","text":"Generates equal length vectors contained list.","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(..., len = c(1L, 10L))"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal length vector generator — equal_length","text":"... set named unnamed vector generators. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal length vector generator — equal_length","text":"quickcheck_generator object.","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(integer_(), double_()) %>% show_example() #> [[1]] #> [1] -5786 -7378 -7780  1972 -6823 -4011 -9960 #>  #> [[2]] #> [1]  863955506          0 -161147594 -296342554  902295953 -671526127  943966588 #>  equal_length(a = logical_(), b = character_(), len = 5L) %>% show_example() #> $a #> [1]  TRUE  TRUE  TRUE FALSE  TRUE #>  #> $b #> [1] \"O\"        \" \\\"^wd'\"  \"i}a8&l\"   \"e~zxAA\\\"\" \"|\"        #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator object.","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() %>% show_example() #> [1] KQ       ^o       k`WE/    a        1]RwmJ   #y2}2$ds 2YGl ^(- #> Levels: KQ ^o k`WE/ a 1]RwmJ #y2}2$ds 2YGl ^(- factor_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  1 NA  1 NA  1  1  1  1  1 NA"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"Generate flat lists values coming single generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator quickcheck_generator object. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) %>% show_example() #> [[1]] #> [1] -4623 #>  #> [[2]] #> [1] 0 #>  #> [[3]] #> [1] 7904 #>  #> [[4]] #> [1] 1946 #>  #> [[5]] #> [1] 0 #>  #> [[6]] #> [1] -6875 #>  #> [[7]] #> [1] 0 #>  #> [[8]] #> [1] 145 #>  #> [[9]] #> [1] 9371 #>  #> [[10]] #> [1] 5586 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes values generator calls expectation . function must parameters matching generator names. tests number tests run. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(len = 1L),   b = numeric_(len = 1L),   property = function(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen object.","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator object.","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"is_even <-   function(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) %>% hedgehog::gen.with(function(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = function(a) is_even(a) %>% testthat::expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), any_na = FALSE)  hms_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  hms_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  hms_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator object.","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() %>% show_example() #> 10:50:58.060279 #> 04:18:27.863248 #> 04:54:24.407319 #> 03:00:28.014031 #> 12:09:09.865378 #> 05:59:35.085181 #> 10:49:39.627917 #> 15:03:13.626114 #> 07:35:27.905317 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) %>% show_example() #> 02:44:16.410630 #> 05:12:48.541741 #> 04:46:34.445431 #> 04:00:09.735047 #> 08:48:01.970139 #> 00:49:41.528839 hms_(len = 10L, any_na = TRUE) %>% show_example() #>              NA #> 11:21:49.189686 #> 16:45:28.608673 #> 05:04:21.687550 #>              NA #> 17:12:44.432446 #> 08:36:18.780433 #>              NA #> 19:18:51.551997 #> 21:55:12.212397"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  integer_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_positive(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_negative(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator object.","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() %>% show_example() #>  [1] -6841     0 -1223  3843  8132  1461 -6667    11   572  -916 integer_(big_int = TRUE) %>% show_example() #> [1] -1923930890   -33116718  1391142346   -68220936 -2142074059 integer_bounded(left = -5L, right = 5L) %>% show_example() #> [1] -3  0  5  0 integer_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]    NA    NA     0 -4160 -1427  4706    NA    NA  4838    NA"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"Generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... set named unnamed generators.","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator object.","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) %>% show_example() #> [[1]] #> [1] -9066 -5454  9800  1733  2566 -4599 #>  #> [[2]] #> [1]  TRUE FALSE  TRUE #>  list_(a = any_vector(), b = any_vector()) %>% show_example() #> $a #> $a[[1]] #> [1] -219348482 #>  #> $a[[2]] #> [1] FALSE #>  #> $a[[3]] #> [1] Il$2\"* #> Levels: Il$2\"* #>  #> $a[[4]] #> [1] \"2905-02-14\" #>  #> $a[[5]] #> [1] 857i #> Levels: 857i #>  #> $a[[6]] #> [1] \"991-12-27 23:18:53 UTC\" #>  #> $a[[7]] #> [1] \"\\\"O0HecH\" #>  #>  #> $b #> [1] \"2416-04-13 07:17:07 UTC\" \"14-10-01 04:46:40 UTC\"   #> [3] \"312-02-23 01:37:19 UTC\"  \"2039-02-22 21:13:11 UTC\" #> [5] \"1388-10-19 09:30:03 UTC\" \"860-10-05 02:47:18 UTC\"  #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"Generate lists values coming single generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator quickcheck_generator object. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) %>% show_example() #> [[1]] #> [1]   465 -1985 #>  #> [[2]] #> [1]  1034     0 -6485   800  -306 #>  #> [[3]] #> [1]  1840  8192 -6782 -3630 -3169  4160  9137   -77 #>  #> [[4]] #> [1]  7197 -1774   633  5585     0 #>  #> [[5]] #> [1] 3773 7299 2786 #>  #> [[6]] #> [1] 5727 2886 #>  #> [[7]] #> [1]  4784 -5323 #>  #> [[8]] #> [1] -2396 -6098  7879     0 -9421 -6705 #>  #> [[9]] #> [1] -7492  2324  8354 -7063 -7317     0 #>  #> [[10]] #> [1]  2872 -9502     0  7332 -1731     0  9522   778 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator object.","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() %>% show_example() #> [1] TRUE TRUE logical_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  numeric_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_positive(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_negative(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator object.","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() %>% show_example() #> [1]  477361788          0  672298417  649057514  187525762 -217877274  355893997 #> [8]          0 numeric_(big_num = TRUE) %>% show_example() #> [1]  3.921067e+307 -8.719466e+307 numeric_bounded(left = -5L, right = 5L) %>% show_example() #> [1]  1  1 -1  5  0 numeric_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] -2321 -7890 -3181    NA -3660  -615    NA  7698  4354    NA"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... set unnamed generators. prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) %>% show_example() #> [1] \"4l?C&vwAq\" \"2f \"       one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) %>% show_example() #> [1]  TRUE FALSE"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), any_na = FALSE)  posixct_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  posixct_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  posixct_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator object.","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() %>% show_example() #> [1] \"441-03-28 06:17:38 UTC\"  \"2500-11-08 05:52:05 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) %>% show_example() #> [1] \"2020-05-11 06:22:49 UTC\" \"2020-01-06 05:20:26 UTC\" #> [3] \"2020-06-09 01:36:38 UTC\" \"2020-02-03 16:40:04 UTC\" #> [5] \"2020-12-09 22:54:14 UTC\" posixct_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] NA                        \"293-04-04 22:40:12 UTC\"  #>  [3] \"626-12-16 11:47:50 UTC\"  \"1449-02-25 05:15:03 UTC\" #>  [5] \"212-07-15 12:14:57 UTC\"  NA                        #>  [7] \"863-03-09 16:25:13 UTC\"  NA                        #>  [9] \"780-10-10 12:17:31 UTC\"  \"2594-02-18 20:59:11 UTC\""},{"path":"/reference/repeat_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly test properties of a function — repeat_test","title":"Repeatedly test properties of a function — repeat_test","text":"Repeatedly test properties function","code":""},{"path":"/reference/repeat_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(property, tests = getOption(\"quickcheck.tests\", 100L))"},{"path":"/reference/repeat_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly test properties of a function — repeat_test","text":"property function parameters includes expectation. tests number tests run.","code":""},{"path":"/reference/repeat_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly test properties of a function — repeat_test","text":"testthat expectation object.","code":""},{"path":"/reference/repeat_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(   property = function() {     num <- stats::runif(1, min = 0, max = 10)     testthat::expect_true(num >= 0 && num <= 10)   } )"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator quickcheck_generator object.","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() %>% show_example() #> [1] TRUE TRUE TRUE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way tibble::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator object.","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) %>% show_example() #> # A tibble: 9 × 1 #>       a #>   <int> #> 1 -1914 #> 2 -9968 #> 3 -9615 #> 4 -8149 #> 5 -3492 #> 6  8439 #> 7 -6688 #> 8  9536 #> 9  -686 tibble_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #> # A tibble: 5 × 2 #>       a b       #>   <int> <chr>   #> 1 -6508 Kg{3    #> 2 -6081 R[h     #> 3 -3440 BTiYMh= #> 4  7654 M       #> 5  4427 &"},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) %>% show_example() #> # A tibble: 3 × 2 #>   ...1       ...2  #>   <date>     <lgl> #> 1 1020-01-19 FALSE #> 2 2434-03-29 FALSE #> 3 2124-12-18 FALSE tibble_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #> # A tibble: 10 × 5 #>    ...1       ...2  ...3        ...4 ...5       #>    <chr>     <int> <int>       <dbl> <chr>      #>  1 JAY[q*X=m -4669  9494 -244864027. \"osA\"      #>  2 S4M^[[-mV  4088  5944          0  \"S/\"       #>  3 $(gxd[    -2186 -1064    3291441. \"bL:nA\"    #>  4 io4Lm@ti   2931 -4807 -996048496. \"H}ZO{Y\"   #>  5 }/J1cR/I*  5415   396  460950842. \"WS\"       #>  6 k'/_>         0 -5200 -550962488. \"U\\\"\"      #>  7 )          8692  4921 -453790016. \"`g+/+=\"   #>  8 ,9e:?D[     593  1354  391120297. \"0#+w=//l\" #>  9 sV',[0lr  -7783 -9013  594502269. \"fm]^y=\"   #> 10 8d&V;      4141 -6339 -914458875. \"\\\"\""},{"path":"/news/index.html","id":"quickcheck-011","dir":"Changelog","previous_headings":"","what":"quickcheck 0.1.1","title":"quickcheck 0.1.1","text":"CRAN release: 2022-03-11","code":""},{"path":"/news/index.html","id":"internal-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"quickcheck 0.1.1","text":"Now doesn’t require R >= 4.1","code":""},{"path":"/news/index.html","id":"quickcheck-010","dir":"Changelog","previous_headings":"","what":"quickcheck 0.1.0","title":"quickcheck 0.1.0","text":"CRAN release: 2022-02-10","code":""},{"path":"/news/index.html","id":"major-breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Major breaking changes","title":"quickcheck 0.1.0","text":"default length vector generators changed 1 range 1 10. parameters form frac_ replaced any_, take logical value instead double value.","code":""},{"path":"/news/index.html","id":"features-0-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"quickcheck 0.1.0","text":"New character_letters generates character vectors letters. New character_numbers generates character vectors numbers. New character_alphanumeric generates character vectors letters numbers. New flat_list_of generates lists atomic scalars. New data_frame_ generate data.frames. New data_frame_of generate data.frames. New data.table_ generate data.tables. New data.table_of generate data.tables. New anything generates R object. New any_flat_homogeneous_list generates flat lists homogeneous elements. New any_data_frame generates data.frames. New any_data.table generates data.tables. New any_undefined generates undefined values. New equal_length generates equal length vectors. New from_hedgehog converts hedgehog quickcheck generator. New as_hedgehog converts quickcheck hedgehog generator. New repeat_test tests property repeatedly.","code":""},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
