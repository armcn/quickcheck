[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"Install CRAN version : install development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(),     b = numeric_(),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(),     b = numeric_(),     c = numeric_(),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) library(dplyr)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = 1L, frac_na = 0)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1] \"1719-04-21\" any_atomic(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"1289-07-11\" \"1870-12-02\" NA           \"2614-01-30\" NA           #>  [6] NA           \"2055-09-08\" NA           NA           \"1092-06-30\""},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = 1L, frac_na = 0)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] \"1506-12-28\" #>  any_flat_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] \",}Mx\" #>  #> [[2]] #> [1] \") wIX&c\" #>  #> [[3]] #> NA #>  #> [[4]] #> [1] \"2137-12-07 23:56:22 UTC\" #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] >c #> Levels: >c #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] \"102-11-16 01:47:21 UTC\" #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = 1L, frac_na = 0)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [1] 5789 #>  any_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #>  [1]    NA    NA  TRUE  TRUE    NA FALSE    NA  TRUE    NA FALSE #>  #> [[2]] #> [1]      NA -331075      NA  296984      NA  148281 -116555 -133847 #>  #> [[3]] #> [1] -5199   714  6036  -745    NA    NA    NA    NA    NA #>  #> [[4]] #> [1] -4821  8350    NA -2039 -9417  5530    NA    NA    NA #>  #> [[5]] #> [1] 5700   NA   NA   NA    0   NA #>  #> [[6]] #>  [1] \"1150-04-07\" \"1878-08-25\" NA           NA           \"2172-03-07\" #>  [6] \"1170-05-30\" NA           NA           \"2513-02-27\" \"1024-07-31\" #>  #> [[7]] #>  [1] NA NA  1 NA  1 NA NA NA  1  1 #>  #> [[8]] #> [1] \"1481-05-21\" NA           NA           \"2750-09-03\" \"1237-02-08\" #> [6] NA           #>  #> [[9]] #> [1] 8076  -10 #>  #> [[10]] #> [1] \"Ga\"      \"jRjVZz^\" \"pWb}[`m\" NA        #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 7 × 7 #>   ...1             ...2       ...3      ...4  ...5       ...6       ...7       #>   <list>           <date>     <list>    <lgl> <list>     <date>     <list>     #> 1 <named list [2]> 2297-08-04 <int [1]> FALSE <date [2]> 1374-08-23 <fct [5]>  #> 2 <named list [2]> 1053-11-09 <dbl [1]> TRUE  <fct [1]>  1411-01-28 <date [6]> #> 3 <named list [2]> 1448-08-29 <dbl [1]> TRUE  <int [4]>  2460-05-14 <time [8]> #> 4 <named list [2]> 2188-09-16 <dbl [1]> FALSE <dttm [1]> 1090-05-13 <date [2]> #> 5 <named list [2]> 2424-08-03 <dbl [1]> TRUE  <lgl [9]>  2779-08-25 <dttm [5]> #> 6 <named list [2]> 2467-01-21 <chr [1]> TRUE  <dttm [2]> 2835-04-01 <int [7]>  #> 7 <named list [2]> 2070-09-11 <chr [1]> TRUE  <time [9]> 2693-04-28 <time [5]> any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 1 #>    ...1       #>    <list>     #>  1 <chr [7]>  #>  2 <dttm [3]> #>  3 <chr [3]>  #>  4 <dbl [5]>  #>  5 <time [1]> #>  6 <date [1]> #>  7 <time [1]> #>  8 <fct [5]>  #>  9 <fct [6]>  #> 10 <dttm [7]> any_tibble(cols = 5L, frac_na = 0.5) |> show_example() #> # A tibble: 10 × 5 #>    ...1  ...2             ...3            ...4       ...5             #>    <lgl> <list>           <time>          <list>     <list>           #>  1 TRUE  <named list [2]>       NA        <lgl [1]>  <named list [2]> #>  2 FALSE <named list [2]> 01:32:47.057109 <time [1]> <named list [2]> #>  3 TRUE  <named list [2]>       NA        <lgl [1]>  <named list [2]> #>  4 FALSE <named list [2]> 11:17:04.446165 <time [1]> <named list [2]> #>  5 TRUE  <named list [2]> 06:18:33.365289 <chr [1]>  <named list [2]> #>  6 FALSE <named list [2]>       NA        <lgl [1]>  <named list [2]> #>  7 NA    <named list [2]> 23:18:47.411415 <fct [1]>  <named list [2]> #>  8 NA    <named list [2]>       NA        <fct [1]>  <named list [2]> #>  9 FALSE <named list [2]>       NA        <lgl [1]>  <named list [2]> #> 10 NA    <named list [2]>       NA        <dbl [1]>  <named list [2]>"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = 1L, frac_na = 0)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [[1]] #> [[1]]$a #> [1] \"I&m\"       \"M;(6\"      \"3=M:6ElO>\" \"zRh\"       \"C:{\"       \"0|WkvMQ8\"  #>  #> [[1]]$b #> [1]  TRUE FALSE FALSE  TRUE #>  #>  any_vector(len = 10L, frac_na = 0.5) |> show_example() #>  [1]    NA    NA    NA    NA  TRUE    NA  TRUE FALSE    NA  TRUE"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = 1L, frac_na = 0, frac_empty = 0)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_empty approximate fraction empty character values included vector. fraction 0, default, include empty values. fraction 0.5 include around 50% empty values.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"\\\\,\" character_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \")\\\"b z\"  NA        NA        NA        \"5g\"      \"x8xK3{`\" \"0\"       #>  [8] NA        NA        NA        character_(len = 10L, frac_empty = 0.5) |> show_example() #>  [1] \")l\"        \"t\"         \"5\\\"v}O\"    \"\"          \"(Q](\"      \"\"          #>  [7] \"\"          \"7_<N\\\\u Z\" \"t *%:\"     \",zPZ9ZE\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = 1L, frac_na = 0)  date_bounded(left, right, len = 1L, frac_na = 0)  date_left_bounded(left, len = 1L, frac_na = 0)  date_right_bounded(right, len = 1L, frac_na = 0)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"1511-12-27\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-08\" date_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]      NA  224695  254000   43094 -245657 -285745   -3845   90270      NA #> [10] -202238"},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(len = 1L, frac_na = 0, frac_nan = 0, frac_inf = 0, big_dbl = FALSE)  double_bounded(left, right, len = 1L, frac_na = 0, frac_nan = 0, frac_inf = 0)  double_left_bounded(   left,   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_right_bounded(   right,   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_positive(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_negative(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_fractional(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_whole(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_nan approximate fraction NaN values included vector. fraction 0, default, include NaN values. fraction 0.5 include around 50% NaN values. frac_inf approximate fraction Inf -Inf values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1] 668938539 double_(big_dbl = TRUE) |> show_example() #> [1] 4.852032e+306 double_bounded(left = -5, right = 5) |> show_example() #> [1] -4.622327 double_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]         NA -444103045  763557483 -457846491         NA -433120259 #>  [7]         NA         NA  789830702 -434217963 double_(len = 10L, frac_nan = 0.2, frac_inf = 0.2) |> show_example() #>  [1]  455350759        Inf -796344222 -599329249        Inf  411322008 #>  [7] -495930589  999836640 -210686058  924324201"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = 1L, frac_na = 0)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] 3u~g<oI_ #> Levels: 3u~g<oI_ factor_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  1 NA NA NA NA  1 NA NA  1  1"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   size = getOption(\"quickcheck.size\", 50L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. size maximum length generators. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = 1L, frac_na = 0)  hms_bounded(left, right, len = 1L, frac_na = 0)  hms_left_bounded(left, len = 1L, frac_na = 0)  hms_right_bounded(right, len = 1L, frac_na = 0)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 11:36:12.202455 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 08:25:29.254483 hms_(len = 10L, frac_na = 0.5) |> show_example() #> 04:39:23.619613 #> 10:01:48.546726 #> 17:51:29.053060 #> 08:38:49.437136 #> 09:58:54.931995 #>              NA #> 19:27:59.044602 #> 00:59:55.688628 #>              NA #> 11:01:14.369436"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = 1L, frac_na = 0, big_int = FALSE)  integer_bounded(left, right, len = 1L, frac_na = 0)  integer_left_bounded(left, len = 1L, frac_na = 0, big_int = FALSE)  integer_right_bounded(right, len = 1L, frac_na = 0, big_int = FALSE)  integer_positive(len = 1L, frac_na = 0, big_int = FALSE)  integer_negative(len = 1L, frac_na = 0, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1] -1537 integer_(big_int = TRUE) |> show_example() #> [1] 776945033 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1] 1 integer_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]    NA    NA    NA -8347  2221    NA     0    NA    NA  6792"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1] -6269 #>  #> [[2]] #> [1] FALSE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> [1] 3738 #>  #> $b #> $b[[1]] #> 00:49:33.222202 #>  #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = 1L)"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10.","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] 2528 #>  #> [[2]] #> [1] 0 #>  #> [[3]] #> [1] 6949 #>  #> [[4]] #> [1] 1256 #>  #> [[5]] #> [1] 4189 #>  #> [[6]] #> [1] 580 #>  #> [[7]] #> [1] 0 #>  #> [[8]] #> [1] 4927 #>  #> [[9]] #> [1] 7741 #>  #> [[10]] #> [1] -2019 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = 1L, frac_na = 0)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1] TRUE logical_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] FALSE FALSE  TRUE FALSE FALSE  TRUE    NA    NA FALSE FALSE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = 1L, frac_na = 0, big_num = FALSE)  numeric_bounded(left, right, len = 1L, frac_na = 0)  numeric_left_bounded(left, len = 1L, frac_na = 0, big_num = FALSE)  numeric_right_bounded(right, len = 1L, frac_na = 0, big_num = FALSE)  numeric_positive(len = 1L, frac_na = 0, big_num = FALSE)  numeric_negative(len = 1L, frac_na = 0, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1] 587366789 numeric_(big_num = TRUE) |> show_example() #> [1] 1.844973e+307 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1] 4 numeric_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]    NA    NA -4746 -7918  5703 -1414    NA -7185    NA  2954"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1] \"8dZ?;z.%\" one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> NULL"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = 1L, frac_na = 0)  posixct_bounded(left, right, len = 1L, frac_na = 0)  posixct_left_bounded(left, len = 1L, frac_na = 0)  posixct_right_bounded(right, len = 1L, frac_na = 0)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"119-10-14 08:18:50 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-10-14 10:06:59 UTC\" posixct_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"2523-11-21 22:53:55 UTC\" NA                        #>  [3] NA                        NA                        #>  [5] NA                        \"1253-08-10 21:39:34 UTC\" #>  [7] NA                        NA                        #>  [9] NA                        \"479-05-13 07:17:20 UTC\""},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1] TRUE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10.","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 8 × 1 #>       a #>   <int> #> 1 -2015 #> 2  4421 #> 3     0 #> 4  2522 #> 5  8917 #> 6     0 #> 7 -5913 #> 8  9691 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b          #>   <int> <chr>      #> 1  9930 \"]Up[v\"    #> 2  8652 \"EWI}(^V\"  #> 3 -6093 \" 2@E'L'A\" #> 4  7029 \"f\\\\eL\"    #> 5  7493 \"Os-P\""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10.","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 10 × 7 #>    ...1  ...2  ...3  ...4  ...5       ...6       ...7  #>    <lgl> <lgl> <lgl> <lgl> <date>     <date>     <lgl> #>  1 TRUE  FALSE TRUE  TRUE  2806-01-31 2737-10-28 FALSE #>  2 FALSE TRUE  TRUE  TRUE  1573-10-02 1336-07-18 TRUE  #>  3 TRUE  FALSE FALSE FALSE 2388-05-24 2931-02-15 TRUE  #>  4 TRUE  TRUE  TRUE  FALSE 2226-08-08 1889-03-24 TRUE  #>  5 FALSE FALSE FALSE TRUE  1201-01-16 1062-11-03 TRUE  #>  6 FALSE FALSE TRUE  TRUE  2945-06-07 1018-03-25 FALSE #>  7 TRUE  FALSE FALSE TRUE  1225-06-02 1043-06-02 TRUE  #>  8 TRUE  FALSE TRUE  FALSE 1087-01-03 1885-03-12 TRUE  #>  9 TRUE  FALSE FALSE FALSE 2785-01-25 2464-06-16 TRUE  #> 10 FALSE TRUE  TRUE  TRUE  2010-10-13 2226-09-20 TRUE  tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>    ...1         ...2 ...3       ...4        ...5            #>    <lgl>       <dbl> <date>     <chr>       <time>          #>  1 TRUE   801567388. 1919-07-07 \"-U7q6\"     15:19:54.770653 #>  2 FALSE  749237691. 1084-06-27 \"l\"         01:07:19.120962 #>  3 TRUE  -915846146. 2721-03-16 \"|=PX(\"     06:44:31.362946 #>  4 FALSE -962119865. 1683-02-08 \"AP\"        16:25:41.783605 #>  5 FALSE -698284887. 1421-10-08 \"~Nv<q}Zz\"  16:08:12.352037 #>  6 FALSE  -69025987. 2393-10-22 \" a`-P<N8(\" 06:48:55.204427 #>  7 TRUE   148993697. 2958-11-30 \"'pcIs\"     20:28:23.310434 #>  8 TRUE  -162227776. 2388-06-10 \"iLI\"       06:16:21.266971 #>  9 TRUE   676609099. 1573-08-05 \"bRv1s\"     01:02:27.095167 #> 10 FALSE          0  1558-05-23 \"k5CY]J<cB\" 13:19:39.228207"},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
