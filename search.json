[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Examples.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing +","title":"Examples","text":"","code":"test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1L),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     c = numeric_(len = 1L),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           })"},{"path":"/articles/Examples.html","id":"testing-baserev","dir":"Articles","previous_headings":"","what":"Testing base::rev","title":"Examples","text":"","code":"test_that(\"reverse of reverse is identity\", {   for_all(     a = any_vector(len = c(1L, 10L)),     property = \\(a) a |> rev() |> rev() |> expect_equal(a)   ) })  test_that(\"reverse of concatenation is flipped concatenation of reversed\", {   for_all(     a = integer_(len = c(1L, 10L)),     b = integer_(len = c(1L, 10L)),     property = \\(a, b) rev(c(a, b)) |> expect_equal(c(rev(b), rev(a)))   ) })"},{"path":"/articles/Examples.html","id":"testing-stringrstr_c","dir":"Articles","previous_headings":"","what":"Testing stringr::str_c","title":"Examples","text":"","code":"test_that(\"str_c does nothing with a single input string\", {   for_all(     a = character_(len = 1L),     property = \\(a) str_c(a) |> expect_equal(a)   ) })  test_that(\"str_c returns a single string with multiple input strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     c = character_(len = 1L),     property = \\(a, b, c) str_c(a, b, c) |> length() |> expect_equal(1L)   ) })  test_that(\"concatenation of strings always contains the original strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     property = \\(a, b) {       str_c(a, b) |> str_detect(fixed(a)) |> expect_true()       str_c(a, b) |> str_detect(fixed(b)) |> expect_true()     }   ) })"},{"path":"/articles/Examples.html","id":"testing-dplyrdistinct","dir":"Articles","previous_headings":"","what":"Testing dplyr::distinct","title":"Examples","text":"","code":"test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = \\(a) expect_equal(a, a + 0)   )           }) #> Test passed 🌈  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = \\(a, b) expect_equal(a + b, b + a)   )           }) #> Test passed 🎊  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) #> Test passed 🌈 library(dplyr) |> suppressMessages()  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) }) #> Test passed 🥳  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) }) #> Test passed 😀  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) }) #> Test passed 🥇"},{"path":"/index.html","id":"quickcheck-generators","dir":"","previous_headings":"","what":"Quickcheck generators","title":"Property Based Testing","text":"Many generators provided quickcheck. examples.","code":""},{"path":"/index.html","id":"atomic-vectors","dir":"","previous_headings":"Quickcheck generators","what":"Atomic vectors","title":"Property Based Testing","text":"","code":"integer_(len = 10) |> show_example() #>  [1]  -814     0 -3226  4292 -9604 -4857 -6333     0   143  1791 character_alphanumeric(len = 10, frac_na = 0.5) |> show_example() #>  [1] \"0O3JDnxgK\" NA          \"GB\"        \"ilHPKEIez\" \"N88\"       NA          #>  [7] \"IU\"        NA          NA          \"vgmzoe9Z\""},{"path":"/index.html","id":"lists","dir":"","previous_headings":"Quickcheck generators","what":"Lists","title":"Property Based Testing","text":"","code":"list_(a = constant(NULL), b = logical_(len = 1)) |> show_example() #> $a #> NULL #>  #> $b #> [1] FALSE flat_list_of(hms_(), len = 3) |> show_example() #> [[1]] #> 08:23:44.87806 #>  #> [[2]] #> 20:43:37.839286 #>  #> [[3]] #> 20:54:18.834063"},{"path":"/index.html","id":"tibbles","dir":"","previous_headings":"Quickcheck generators","what":"Tibbles","title":"Property Based Testing","text":"","code":"tibble_(a = date_(), b = posixct_(), rows = 5) |> show_example() #> # A tibble: 5 x 2 #>   a          b                   #>   <date>     <dttm>              #> 1 1092-06-04 1786-08-16 19:37:01 #> 2 2780-10-06 2731-07-01 13:51:04 #> 3 1586-07-16 0377-07-03 09:38:30 #> 4 2212-03-17 0404-12-21 08:54:40 #> 5 2515-04-24 2979-02-04 05:40:53 tibble_of(any_vector(), cols = 3, rows = 3) |> show_example() #> # A tibble: 3 x 3 #>   ...1       ...2             ...3  #>   <list>     <list>           <lgl> #> 1 <chr [1]>  <named list [2]> FALSE #> 2 <fct [1]>  <named list [2]> FALSE #> 3 <time [1]> <named list [2]> FALSE"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used simply wrapping from_hedgehog. hood function wrap hedgehog generator anonymous function add quickcheck_generator class . hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error:","code":"library(hedgehog)  is_even <-    \\(a) a %% 2 == 0  gen_powers_of_two <-    gen.element(1:10) |> gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> expect_true() ) for_all(   a = from_hedgehog(gen_powers_of_two),   b = integer_(),   property = \\(a, b) c(a, b) |> is.numeric() |> expect_true() ) for_all(   a = tibble_of(from_hedgehog(gen_powers_of_two)),   property = \\(a) is_tibble(a) |> expect_true() ) #> Error"},{"path":"/index.html","id":"fuzz-testing","dir":"","previous_headings":"","what":"Fuzz testing","title":"Property Based Testing","text":"Fuzz testing special case property based testing property testing code doesn’t fail range inputs. example fuzz testing quickcheck. Let’s say want test purrr::map function won’t fail vector input.","code":"for_all(   a = any_vector(),   property = \\(a) purrr::map(a, identity) |> expect_silent() )"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE any_atomic(len = 10L, frac_na = 0.5) |> show_example() #> 14:10:06.142738 #>              NA #>              NA #>              NA #> 22:37:16.621749 #>              NA #> 21:49:41.059164 #>              NA #> 00:59:09.156971 #>              NA"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat homogeneous list generator — any_flat_homogeneous_list","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic scalar type.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() |> show_example() #> [[1]] #> [1] 4058 #>  #> [[2]] #> [1] -5542 #>  #> [[3]] #> [1] -782 #>  #> [[4]] #> [1] -3534 #>  #> [[5]] #> [1] -9580 #>  #> [[6]] #> [1] 230 #>  #> [[7]] #> [1] 3741 #>  #> [[8]] #> [1] -6035 #>  #> [[9]] #> [1] 7151 #>  #> [[10]] #> [1] 2690 #>  any_flat_homogeneous_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] \"2864-07-25\" #>  #> [[2]] #> [1] NA #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] \"1501-08-09\" #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] \"1506-08-28\" #>  #> [[10]] #> [1] \"1708-07-14\" #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] \"c:$H{T\" #>  #> [[2]] #> 11:39:22.902875 #>  #> [[3]] #> [1] \"2537-09-16\" #>  #> [[4]] #> [1] \"ld\" #>  #> [[5]] #> [1] -8815 #>  #> [[6]] #> 11:49:42.748685 #>  #> [[7]] #> [1] AY #> Levels: AY #>  #> [[8]] #> [1] \"c Mg\" #>  #> [[9]] #> [1] \"473-11-13 11:32:02 UTC\" #>  any_flat_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> 16:35:51.250251 #>  #> [[2]] #> [1] NA #>  #> [[3]] #> [1] \"2357-06-20 05:45:34 UTC\" #>  #> [[4]] #> [1] -924837554 #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] 4790 #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] \"f\" #>  #> [[9]] #> [1] NA #>  #> [[10]] #> [1] -496716300 #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [1] -2866 #>  #> [[2]] #> [1] @i #> Levels: @i #>  any_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> 13:39:04.238358 #>  #> [[2]] #> NA #>  #> [[3]] #> NA #>  #> [[4]] #> 05:50:53.177496 #>  #> [[5]] #> NA #>  #> [[6]] #> 21:55:05.863762 #>  #> [[7]] #> NA #>  #> [[8]] #> NA #>  #> [[9]] #> 15:44:17.17784 #>  #> [[10]] #> 10:03:52.253274 #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 9 × 9 #>   ...1        ...2       ...3      ...4   ...5        ...6 ...7     ...8    ...9 #>   <list>      <date>     <list>    <list> <list>     <dbl> <fct>   <dbl>   <dbl> #> 1 <dttm [2]>  2828-08-17 <dbl [1]> <dttm… <named…   2.32e8 \"]iO…  7.98e8 -5.46e8 #> 2 <chr [6]>   1966-07-01 <dbl [1]> <time… <named…   4.38e8 \"neQ…  8.65e8  6.89e8 #> 3 <date [1]>  2302-12-21 <dbl [1]> <dbl … <named…   8.27e8 \"),N… -1.99e8 -2.36e8 #> 4 <dttm [1]>  2147-07-13 <dbl [1]> <int … <named…   8.30e8 \"3aD…  0      -3.04e8 #> 5 <date [10]> 2949-12-22 <dbl [1]> <dbl … <named…   5.49e8 \"G%v…  0       7.92e8 #> 6 <dttm [3]>  1540-12-26 <dbl [1]> <date… <named…  -9.97e8 \"9I\"  -7.14e8  7.99e8 #> 7 <chr [6]>   1580-08-27 <dbl [1]> <dbl … <named…  -8.07e7 \"ci#…  0       6.98e8 #> 8 <lgl [5]>   1123-07-23 <dbl [1]> <time… <named…   9.49e8 \"l\"    3.62e8 -3.98e8 #> 9 <fct [5]>   2696-01-08 <dbl [1]> <chr … <named…   0      \"BVF…  3.81e8 -7.50e8 any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 6 #>    ...1       ...2            ...3    ...4   ...5            ...6                #>    <list>     <time>          <list>  <fct>  <time>          <dttm>              #>  1 <chr [1]>  22:21:51.067013 <int [… \".>kj… 16:02:31.314402 284-02-20 16:02:01  #>  2 <dbl [1]>  19:51:12.761064 <int [… \"Stcp… 07:18:38.622875 2846-06-01 15:46:30 #>  3 <lgl [1]>  05:40:33.402656 <fct [… \"DqP\"  22:16:35.212334 2612-04-14 21:39:59 #>  4 <lgl [1]>  21:58:28.835628 <dttm … \"^wqB… 17:11:44.271087 2292-05-26 03:43:57 #>  5 <dttm [1]> 14:49:45.602452 <date … \"cx\"   11:09:28.062292 2165-12-04 14:51:09 #>  6 <time [1]> 21:10:21.993531 <chr [… \"p\"    03:25:02.709342 301-08-30 14:28:03  #>  7 <date [1]> 05:45:19.443057 <lgl [… \"\\\"V\"  21:52:21.629559 1072-12-30 15:40:34 #>  8 <time [1]> 01:09:47.805962 <fct [… \"nS[W… 19:26:45.900844 395-07-31 17:58:35  #>  9 <time [1]> 20:08:30.418883 <dttm … \")Ii7… 17:49:51.391513 1499-12-12 06:24:33 #> 10 <time [1]> 11:23:12.711360 <date … \"6Z*_\" 01:29:49.365501 29-06-09 15:11:04   any_tibble(cols = 5L, frac_na = 0.5) |> show_example() #> # A tibble: 8 × 5 #>   ...1        ...2 ...3       ...4       ...5     #>   <list>     <int> <date>     <list>     <chr>    #> 1 <dbl [9]>     NA 2528-11-27 <dbl [3]>  NA       #> 2 <int [6]>      1 NA         <time [5]> a(X*PL   #> 3 <date [2]>    NA 1954-01-01 <dttm [7]> HUz!$)EC #> 4 <time [1]>    NA NA         <dbl [6]>  NA       #> 5 <int [10]>     1 2946-09-08 <int [3]>  <{NQr}S  #> 6 <time [9]>    NA 1580-05-03 <int [9]>  NA       #> 7 <time [5]>    NA NA         <time [5]> NA       #> 8 <time [8]>     1 1009-05-30 <chr [3]>  NA"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Undefined value generator — any_undefined","title":"Undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Undefined value generator — any_undefined","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined() |> show_example() #> [1] NA"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [1]  TRUE FALSE any_vector(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] NA #>  #> [[3]] #> [1] \"2848-02-21\" #>  #> [[4]] #> [1] 988460032 #>  #> [[5]] #> [1] I #> Levels: I #>  #> [[6]] #> 03:00:56.034838 #>  #> [[7]] #> [1] TRUE #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] 587125611 #>  #> [[10]] #> [1] -476456773 #>"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, tibbles, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything()"},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator generator","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() |> show_example() #> [1] NA"},{"path":"/reference/as_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"Convert quickcheck generator hedgehog generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"as_hedgehog(generator)"},{"path":"/reference/as_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"generator quickcheck_generator generator","code":""},{"path":"/reference/as_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L  gen_powers_of_two <-   as_hedgehog(integer_()) |> hedgehog::gen.with(\\(a) 2 ^ a)  for_all(   a = gen_powers_of_two,   property = \\(a) is_even(a) |> testthat::expect_true() ) #> Error in f(): could not find function \"f\""},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), frac_na = 0, frac_empty = 0)  character_letter(len = c(1L, 10L), frac_na = 0, frac_empty = 0)  character_word(len = c(1L, 10L), frac_na = 0, frac_empty = 0)  character_alphanumeric(len = c(1L, 10L), frac_na = 0, frac_empty = 0)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_empty approximate fraction empty character values included vector. fraction 0, default, include empty values. fraction 0.5 include around 50% empty values.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"YRGY)F \" character_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA          \"+R?1<g\"    \"~3a'R+d#]\" NA          \"b=E/4&9{3\" \"ybEUKO+r6\" #>  [7] NA          \".YY:\"      NA          NA          character_(len = 10L, frac_empty = 0.5) |> show_example() #>  [1] \"\"       \"\"       \"\"       \"Xe:DMu\" \"j\\\\?|\"  \"4\"      \"\"       \"\"       #>  [9] \"\"       \"\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), frac_na = 0)  date_bounded(left, right, len = c(1L, 10L), frac_na = 0)  date_left_bounded(left, len = c(1L, 10L), frac_na = 0)  date_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"2816-08-29\" \"1964-06-03\" \"2893-04-04\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #>  [1] \"2020-01-07\" \"2020-01-06\" \"2020-01-02\" \"2020-01-02\" \"2020-01-07\" #>  [6] \"2020-01-02\" \"2020-01-10\" \"2020-01-07\" \"2020-01-02\" \"2020-01-09\" date_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"1777-09-22\" \"1132-01-18\" \"1920-12-09\" \"2842-07-16\" NA           #>  [6] NA           \"2900-12-12\" \"1208-09-02\" NA           NA"},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0 )  double_left_bounded(   left,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_nan approximate fraction NaN values included vector. fraction 0, default, include NaN values. fraction 0.5 include around 50% NaN values. frac_inf approximate fraction Inf -Inf values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1] -286746164 -101238930 -731296510  283933859  -54260362          0 -519393804 double_(big_dbl = TRUE) |> show_example() #> [1] -1.121067e+307 -6.679403e+307  2.958129e+307 double_bounded(left = -5, right = 5) |> show_example() #> [1]  4.7968478  0.0000000  1.5418687 -4.5906000 -0.9023971  4.4742022  1.0306149 double_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]         NA  768805881 -611745558 -364883334  410891496         NA #>  [7]  477661031         NA  818044741  882202562 double_(len = 10L, frac_nan = 0.2, frac_inf = 0.2) |> show_example() #>  [1]  742960105        NaN -241410857 -692425386       -Inf   72876324 #>  [7]  403070113        NaN -710796029          0"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal length vector generator — equal_length","title":"Equal length vector generator — equal_length","text":"Generates equal length vectors contained list.","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(..., len = c(1L, 10L))"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal length vector generator — equal_length","text":"... set vector generators. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal length vector generator — equal_length","text":"quickcheck_generator generator","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(integer_(), double_()) |> show_example() #> [[1]] #> [1] 776 #>  #> [[2]] #> [1] 17580943 #>  equal_length(a = logical_(), b = character_(), len = 5L) |> show_example() #> $a #> [1] FALSE  TRUE  TRUE  TRUE FALSE #>  #> $b #> [1] \" \"        \"8`uYi#\"   \"}C4J\"     \"LDy1@wz@\" \"M!j\\\"wV\"  #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] P      YIBuX\" YA     B`gk   6).H   #> Levels: P YIBuX\" YA B`gk 6).H factor_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA  1 NA  1 NA  1 NA  1  1  1"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"generate flat lists values coming single input generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] 1838 #>  #> [[2]] #> [1] 6739 #>  #> [[3]] #> [1] -4209 #>  #> [[4]] #> [1] 0 #>  #> [[5]] #> [1] 812 #>  #> [[6]] #> [1] 0 #>  #> [[7]] #> [1] 2435 #>  #> [[8]] #> [1] 4152 #>  #> [[9]] #> [1] 1988 #>  #> [[10]] #> [1] 78 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   size = getOption(\"quickcheck.size\", 50L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. size maximum length generators. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen generator","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) |> hedgehog::gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), frac_na = 0)  hms_bounded(left, right, len = c(1L, 10L), frac_na = 0)  hms_left_bounded(left, len = c(1L, 10L), frac_na = 0)  hms_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 21:59:09.436125 #> 22:15:02.904529 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 01:55:18.046926 #> 07:58:38.362858 #> 04:32:46.942084 #> 01:08:41.923760 #> 11:21:46.994121 #> 08:20:14.953281 hms_(len = 10L, frac_na = 0.5) |> show_example() #> 13:00:16.494542 #> 18:06:34.215505 #>              NA #> 09:41:52.959968 #>              NA #>              NA #>              NA #>              NA #> 03:50:37.473537 #>              NA"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), frac_na = 0)  integer_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_positive(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_negative(len = c(1L, 10L), frac_na = 0, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1] -6226 integer_(big_int = TRUE) |> show_example() #> [1] -1273521841   415098035  -179839458 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1]  0  2 -3 -4  0 -2  3 -1 integer_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  -807    NA -9181    NA   819 -8195    NA  3081  9632     0"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #>  [1]  1363  6275 -3385     0 -2167 -2968 -2626 -2565 -4904  7144 #>  #> [[2]] #> [1] FALSE FALSE  TRUE  TRUE  TRUE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> $a[[1]] #>  [1] \"1286-04-29\" \"2425-07-13\" \"1563-05-20\" \"2809-10-24\" \"2035-05-05\" #>  [6] \"2071-07-05\" \"1734-01-20\" \"1481-06-29\" \"1687-01-29\" \"1436-07-01\" #>  #> $a[[2]] #> 08:52:17.205482 #> 18:46:48.116617 #> 17:10:14.296374 #> 21:06:02.346466 #>  #> $a[[3]] #> [1] \"1081-09-02\" \"1219-02-27\" #>  #>  #> $b #> [1]  546235731  952083052 -438318181  549755642 -221656033   29777114  409812874 #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1]  8577   781  1051 -8399  3884  1507 #>  #> [[2]] #> [1] -2735 -3781   565  2581     0  5888 -6513 #>  #> [[3]] #> [1]  9491 -1147  1812  4835  1365 #>  #> [[4]] #> [1] -9956 -9788 #>  #> [[5]] #> [1]  7301  3840  -396  6541 -8401 -4345     0 #>  #> [[6]] #> [1]  1363  2185 -5170 -8790 -4889 -7222 -1396 #>  #> [[7]] #> [1]     0  1242   721 -6993  5346 #>  #> [[8]] #> [1]     0 -2373   918 -9862 -1188  4735  5165 -1141     0 #>  #> [[9]] #> [1] -6827 -8295     0 -3763 -3826 #>  #> [[10]] #> [1]  7874  6238 -7254 -2990 -9125  -828 -1343 -9115  7694 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1]  TRUE  TRUE FALSE FALSE FALSE  TRUE logical_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] FALSE FALSE  TRUE    NA    NA    NA    NA  TRUE    NA  TRUE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), frac_na = 0)  numeric_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_positive(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_negative(len = c(1L, 10L), frac_na = 0, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #>  [1]  298751810  240995525  485992123 -769586708  147577498  415009833 #>  [7]  918671079 -906667564  599876732  151668079 numeric_(big_num = TRUE) |> show_example() #> [1] -2.666421e+307 -1.361459e+307 -7.081769e+307 -7.430203e+307 -3.975959e+307 #> [6]  8.491757e+305  7.545781e+307  3.283575e+307 -2.913091e+306 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1] -4 -1  5  4 -1 numeric_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]     0 -8612    NA    NA  6762     0    NA    NA -6299    NA"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1] \"p},}\"      \"f!{KT\"     \"W!C\"       \"dbV&pw|\"   \"*ui1A6x \"  \"tI\"        #> [7] \"Co3)dg!\"   \"&c:gjW\"    \"wZ>UDq*3(\" one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> [1]  TRUE  TRUE FALSE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), frac_na = 0)  posixct_bounded(left, right, len = c(1L, 10L), frac_na = 0)  posixct_left_bounded(left, len = c(1L, 10L), frac_na = 0)  posixct_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"1222-05-29 22:35:17 UTC\" \"968-09-15 09:56:11 UTC\"  posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-10-10 17:49:27 UTC\" \"2020-09-04 03:21:15 UTC\" #> [3] \"2020-11-21 04:39:59 UTC\" \"2020-05-07 21:48:15 UTC\" #> [5] \"2020-12-28 23:58:24 UTC\" \"2020-02-11 03:07:14 UTC\" posixct_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]           NA           NA           NA           NA -48232958064 #>  [6]  15531072216 -19243508403  15806205953  21573257915           NA"},{"path":"/reference/repeat_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly test properties of a function — repeat_check","title":"Repeatedly test properties of a function — repeat_check","text":"Repeatedly test properties function","code":""},{"path":"/reference/repeat_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly test properties of a function — repeat_check","text":"","code":"repeat_check(property, tests = getOption(\"quickcheck.tests\", 100L))"},{"path":"/reference/repeat_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly test properties of a function — repeat_check","text":"property anonymous function arguments includes expectation. tests number tests run.","code":""},{"path":"/reference/repeat_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly test properties of a function — repeat_check","text":"testthat expectation object.","code":""},{"path":"/reference/repeat_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly test properties of a function — repeat_check","text":"","code":"repeat_check(   property = \\() {     num <- stats::runif(1, min = 0, max = 10)     testthat::expect_true(num >= 0 && num <= 10)   } )"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 3 × 1 #>       a #>   <int> #> 1 -2945 #> 2   -24 #> 3  1824 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b           #>   <int> <chr>       #> 1  5159 \"TW\\\"s@sd\"  #> 2   534 \"c$T\"       #> 3  8367 \"ede>\"      #> 4  9603 \"&#%\"       #> 5  3952 \"wNNp IR(?\""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 6 × 6 #>   ...1       ...2  ...3       ...4       ...5  ...6       #>   <date>     <lgl> <date>     <date>     <lgl> <date>     #> 1 2908-01-20 TRUE  2256-10-28 1492-05-05 FALSE 1459-01-21 #> 2 2221-02-20 FALSE 2412-03-02 1681-10-31 TRUE  1084-03-17 #> 3 2960-07-13 FALSE 2535-08-22 2930-04-19 FALSE 2873-04-27 #> 4 2583-10-08 FALSE 1612-04-03 1066-01-21 TRUE  2909-07-21 #> 5 1977-08-06 FALSE 1477-05-06 1532-10-11 FALSE 1788-01-27 #> 6 1572-12-20 FALSE 1287-11-12 2646-09-03 TRUE  1001-09-16 tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>    ...1       ...2            ...3         ...4                   ...5 #>    <date>     <time>          <fct>        <time>                <dbl> #>  1 2475-04-18 00:41:07.751856 \"~0\\\\{lPg*!\" 09:53:03.011061  739835334. #>  2 2390-03-15 01:02:31.799473 \",J&%y8e(s\"  03:48:32.091520  560920277. #>  3 1388-04-17 12:27:38.541624 \"-n<|HM9\"    13:32:26.700557 -962013083. #>  4 2876-10-06 18:14:51.330954 \"?Y5wcE\"     04:58:41.323873  816338331. #>  5 2297-11-18 01:21:26.862757 \"(;\"         07:29:27.657004 -802144786. #>  6 2302-12-11 21:37:44.339402 \"3&\"         14:05:14.809911  700949043. #>  7 1354-09-29 15:44:30.367598 \"ak4A{5*}!\"  22:48:10.416650  613430218. #>  8 1726-12-15 21:33:15.527456 \"[K.\"        08:24:21.281103  958823891. #>  9 2015-09-03 09:23:58.631278 \"8z#xW@hp#\"  18:33:50.082669   96405901. #> 10 2829-09-10 00:38:18.562880 \"d@I}*S\"     08:41:24.338104  507588014."},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
