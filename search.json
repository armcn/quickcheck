[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Examples.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing +","title":"Examples","text":"","code":"test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1L),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     c = numeric_(len = 1L),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           })"},{"path":"/articles/Examples.html","id":"testing-baserev","dir":"Articles","previous_headings":"","what":"Testing base::rev","title":"Examples","text":"","code":"test_that(\"reverse of reverse is identity\", {   for_all(     a = any_vector(len = c(1L, 10L)),     property = \\(a) a |> rev() |> rev() |> expect_equal(a)   ) })  test_that(\"reverse of concatenation is flipped concatenation of reversed\", {   for_all(     a = integer_(len = c(1L, 10L)),     b = integer_(len = c(1L, 10L)),     property = \\(a, b) rev(c(a, b)) |> expect_equal(c(rev(b), rev(a)))   ) })"},{"path":"/articles/Examples.html","id":"testing-stringrstr_c","dir":"Articles","previous_headings":"","what":"Testing stringr::str_c","title":"Examples","text":"","code":"test_that(\"str_c does nothing with a single input string\", {   for_all(     a = character_(len = 1L),     property = \\(a) str_c(a) |> expect_equal(a)   ) })  test_that(\"str_c returns a single string with multiple input strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     c = character_(len = 1L),     property = \\(a, b, c) str_c(a, b, c) |> length() |> expect_equal(1L)   ) })  test_that(\"concatenation of strings always contains the original strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     property = \\(a, b) {       str_c(a, b) |> str_detect(fixed(a)) |> expect_true()       str_c(a, b) |> str_detect(fixed(b)) |> expect_true()     }   ) })"},{"path":"/articles/Examples.html","id":"testing-dplyrdistinct","dir":"Articles","previous_headings":"","what":"Testing dplyr::distinct","title":"Examples","text":"","code":"test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = \\(a) expect_equal(a, a + 0)   )           }) #> Test passed 🌈  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = \\(a, b) expect_equal(a + b, b + a)   )           }) #> Test passed 😸  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) #> Test passed 😸 library(dplyr, warn.conflicts = FALSE)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) }) #> Test passed 😀  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) }) #> Test passed 🌈  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) }) #> Test passed 😸"},{"path":"/index.html","id":"quickcheck-generators","dir":"","previous_headings":"","what":"Quickcheck generators","title":"Property Based Testing","text":"Many generators provided quickcheck. examples.","code":""},{"path":"/index.html","id":"atomic-vectors","dir":"","previous_headings":"Quickcheck generators","what":"Atomic vectors","title":"Property Based Testing","text":"","code":"integer_(len = 10) |> show_example() #>  [1] -9443 -9238 -3114  6117  8084  6281 -1609 -8123  9167 -4998 character_alphanumeric(len = 10) |> show_example() #>  [1] \"H\"         \"d18\"       \"2moKXgiaA\" \"l\"         \"apJIkZ4\"   \"xQ\"        #>  [7] \"IxWbgGPl\"  \"U4VoE\"     \"feow\"      \"nyyjpbBlm\" posixct_(len = 10, frac_na = 0.5) |> show_example()  #>  [1] \"2174-04-30 10:34:22 PDT\" \"0990-04-16 13:38:43 LMT\" #>  [3] NA                        NA                        #>  [5] NA                        \"1635-05-06 17:06:07 LMT\" #>  [7] NA                        \"1326-01-19 03:38:54 LMT\" #>  [9] NA                        NA"},{"path":"/index.html","id":"lists","dir":"","previous_headings":"Quickcheck generators","what":"Lists","title":"Property Based Testing","text":"","code":"list_(a = constant(NULL), b = any_undefined()) |> show_example() #> $a #> NULL #>  #> $b #> [1] NA flat_list_of(logical_(), len = 3) |> show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] TRUE"},{"path":"/index.html","id":"tibbles","dir":"","previous_headings":"Quickcheck generators","what":"Tibbles","title":"Property Based Testing","text":"","code":"tibble_(a = date_(), b = hms_(), rows = 5) |> show_example() #> # A tibble: 5 x 2 #>   a          b               #>   <date>     <time>          #> 1 1754-10-12 00:11:21.388116 #> 2 1043-05-24 22:48:47.926494 #> 3 1066-05-18 18:18:56.531533 #> 4 2195-01-13 21:31:59.337200 #> 5 2613-10-17 16:37:56.068528 tibble_of(double_bounded(-10, 10), rows = 3, cols = 3) |> show_example() #> # A tibble: 3 x 3 #>    ...1   ...2  ...3 #>   <dbl>  <dbl> <dbl> #> 1 -1.63 -5.73   8.37 #> 2 -6.92 -6.70   6.69 #> 3 -2.11  0.487  3.66 any_tibble(rows = 3, cols = 3) |> show_example() #> # A tibble: 3 x 3 #>   ...1            ...2      ...3      #>   <time>          <list>    <list>    #> 1 00:00:56.564217 <dbl [1]> <lgl [1]> #> 2 02:29:51.265953 <dbl [1]> <lgl [1]> #> 3 13:02:05.884475 <dbl [1]> <lgl [1]>"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used wrapping from_hedgehog. hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error: quickcheck generator can also converted hedgehog generator can used hedgehog functions.","code":"library(hedgehog)  is_even <-    \\(a) a %% 2 == 0  gen_powers_of_two <-    gen.element(1:10) |> gen.with(\\(a) 2 ^ a)  test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) |> expect_true()   ) }) #> Test passed 🥇 test_that(\"powers of two and integers are both numeric values\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     b = integer_(),     property = \\(a, b) c(a, b) |> is.numeric() |> expect_true()   ) }) #> Test passed 🥇 test_that(\"composing hedgehog with quickcheck generators fails\", {   tibble_of(from_hedgehog(gen_powers_of_two)) |> expect_error() }) #> Test passed 🥳 gen_powers_of_two <-    integer_bounded(1L, 10L, len = 1L) |>      as_hedgehog() |>      gen.with(\\(a) 2 ^ a)   test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) |> expect_true()   ) }) #> Test passed 🥇"},{"path":"/index.html","id":"fuzz-tests","dir":"","previous_headings":"","what":"Fuzz tests","title":"Property Based Testing","text":"Fuzz testing special case property based testing property tested code doesn’t fail range inputs. example fuzz testing quickcheck. Let’s say want test purrr::map function won’t fail vector input.","code":"test_that(\"map won't fail with any vector as input\", {   for_all(     a = any_vector(),     property = \\(a) purrr::map(a, identity) |> expect_silent()   ) }) #> Test passed 🌈"},{"path":"/index.html","id":"repeat-tests","dir":"","previous_headings":"","what":"Repeat tests","title":"Property Based Testing","text":"Repeat tests can used repeatedly test property holds true many calls function. different regular property based tests don’t require generators. function repeat_test call function many times ensure expectation passes cases. kind test can useful testing functions randomness.","code":"test_that(\"runif generates random numbers between a min and max value\", {   repeat_test(     property = \\() {       random_number <- runif(1, min = 0, max = 10)       expect_true(random_number >= 0 && random_number <= 10)     }   ) }) #> Test passed 🥇"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> 05:45:51.512819 #> 08:30:32.092341 #> 06:04:46.921321 #> 01:21:52.926004 #> 04:24:49.450928 #> 02:00:00.723325 any_atomic(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  1 NA NA  1 NA  1  1  1  1 NA"},{"path":"/reference/any_data.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data.table generator — any_data.table","title":"Random data.table generator — any_data.table","text":"Generate random data.tables.","code":""},{"path":"/reference/any_data.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data.table generator — any_data.table","text":"","code":"any_data.table(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_data.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data.table generator — any_data.table","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_data.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data.table generator — any_data.table","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_data.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data.table generator — any_data.table","text":"","code":"any_data.table() |> show_example() #>          ...1       ...2  ...3      ...4      ...5      ...6 #> 1: -178881634  372394059 -4404 <list[2]> L_IstOS'N    /Eeo2: #> 2: -740203979  671036166  -133 <list[2]>      ,PO'    }*Q0nA #> 3:  469684683          0  1478 <list[2]> Xrj}?|=DG  Js@^:Xb# #> 4: -670139383  595903514 -1744 <list[2]>  0EO~#uw` g\\\\7!dP9% #> 5:  856727381 -369697797  2793 <list[2]>       PL&        1E #> 6: -885371196  299052978  5083 <list[2]>      W;\\\\  YId;&&/Q #> 7:  100259243  308695939 -9113 <list[2]>  qGaCgAtz      o:o> any_data.table(rows = 10L) |> show_example() #>      ...1                ...2      ...3       ...4 #>  1:     0                 991 )tJu9|k:F -969056437 #>  2: -6247                   &    ;61M%N -224443062 #>  3:  7850     23:19:43.899592  DPEBzE/j  803185120 #>  4: -3285          -526410028       /Un          0 #>  5:  1177 2470-12-22 06:04:33        )t  830495779 #>  6: -9935     10:29:51.767621    U[V|uf  418629908 #>  7: -7893          1986-09-01      4nu|  771820170 #>  8:     0           :Oz35FP6e 83Ug{.Uc(  268060312 #>  9:  9971     06:20:52.074096   5o+\\\\3Q -184408792 #> 10:   622     23:58:20.347302  ZLuCEno$          0 #>                                                                                                                       ...5 #>  1:                                                  1213-12-19,2956-06-24,2368-02-12,2052-02-02,1648-06-11,1531-04-19,... #>  2:                                                                                                 3342, 2436,-7097,-6808 #>  3:                                                                                FALSE,FALSE, TRUE,FALSE,FALSE,FALSE,... #>  4:                                                                                                M>=rTw&\",WM,>%{'@td,$@T #>  5:                                                                                                        23:30:57.312205 #>  6:                    20:48:54.560698,13:42:02.627480,02:07:43.921486,07:06:46.953158,06:45:49.195157,20:54:50.199774,... #>  7:                                        09:38:47.449261,12:04:18.955799,17:24:53.469239,14:09:44.309675,01:20:17.512639 #>  8:                                                           0,-178243719,-431065910,-528368758, 953862865, -45982745,... #>  9:                                                                                 )?v6,'{rZ[,9,6C!l,sQC\\\\10&,v-/^r|<,... #> 10: 2551-05-06 14:32:20,601-05-12 18:03:13,2399-02-25 21:22:52,1165-11-07 09:47:17,2215-10-29 08:10:37,1184-08-09 10:39:24 #>      ...6 #>  1: -3889 #>  2:  5438 #>  3:  9902 #>  4:  -208 #>  5:  7281 #>  6:  9220 #>  7:     0 #>  8:  3634 #>  9:     0 #> 10:  7045 #>                                                                                                    ...7 #>  1:                               -526905155,-663334127, 893026224,-647841808, 339672280,-959737840,... #>  2:                                                              TRUE,FALSE,FALSE, TRUE, TRUE, TRUE,... #>  3: 19:02:36.437995,13:24:13.446600,11:43:56.814131,23:34:34.465605,17:10:04.154764,03:34:16.953672,... #>  4:                     2913-12-15 05:44:47,2929-12-19 19:41:37,2020-08-05 13:43:26,2377-02-06 13:18:05 #>  5:                                                                MY-$6,32eU^vP,x,8eo<,a2V\"W;,^J<F,... #>  6: 19:17:40.974138,22:56:16.862596,04:08:09.364850,21:23:31.844096,11:10:36.574867,05:38:46.021138,... #>  7:                                        0,-511274650,-738888349,         0, 997415517,-637637538,... #>  8:                                                                     18:40:16.503721,08:29:20.801741 #>  9:                                                     01:45:28.686991,17:48:03.953328,13:17:54.271814 #> 10:                                                                    1473-09-19,2455-05-05,2243-09-09 #>                ...8       ...9               ...10 #>  1: 20:53:06.917322 -903531355 1308-06-01 08:54:30 #>  2: 17:20:00.988071  605655692 1550-08-31 22:21:52 #>  3: 16:36:59.903862          0 1900-08-01 11:37:29 #>  4: 10:54:03.106258  347384786 1078-08-28 19:34:43 #>  5: 11:38:01.369117  956387919 1111-11-01 13:21:47 #>  6:  12:52:24.39611  546551644   11-04-16 19:50:14 #>  7:  23:58:05.92749 -656836872 1709-03-28 12:27:26 #>  8: 15:29:32.839543 -849657869 2939-03-22 20:55:20 #>  9: 14:32:56.940418 -657239972 1293-07-28 14:57:22 #> 10: 20:23:30.628606  687273473 1881-10-19 02:22:13 any_data.table(cols = 5L, frac_na = 0.5) |> show_example() #>          ...1                ...2     ...3      ...4      ...5 #> 1: 2661-10-10                  NA     <NA> <list[2]> <list[2]> #> 2:       <NA> 2156-01-14 07:47:06 v$f=L:cM <list[2]> <list[2]> #> 3: 2493-12-19 2629-03-28 18:48:21    {A\\\\_ <list[2]> <list[2]> #> 4: 1845-12-08                  NA     <NA> <list[2]> <list[2]> #> 5:       <NA>                  NA cJ[TX~;@ <list[2]> <list[2]>"},{"path":"/reference/any_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data frame generator — any_data_frame","title":"Random data frame generator — any_data_frame","text":"Generate random data frames.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data frame generator — any_data_frame","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data frame generator — any_data_frame","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data frame generator — any_data_frame","text":"","code":"any_data_frame() |> show_example() #>              ...1 ...2 ...3       ...4                ...5 ...6  ...7 #> 1 01:26:46.856513   v1    0 2041-06-07 2204-09-10 10:53:43    = FALSE #>         ...8    ...9 #> 1 -838304528 Be!>9H+ any_data_frame(rows = 10L) |> show_example() #>                   ...1            ...2                ...3                ...4 #> 1  1616-08-05 01:27:32 13:32:07.746987 1715-03-17 13:08:55   45-09-20 20:39:24 #> 2  2045-12-30 00:43:44 09:55:03.001498 2730-08-26 12:39:23 2222-05-30 15:33:12 #> 3  2017-12-25 02:20:42 00:01:05.499188 1207-06-10 12:10:39 2306-12-30 07:58:20 #> 4  1551-05-08 17:53:49 19:23:25.341690 1508-12-25 07:28:44 1762-08-08 02:35:50 #> 5  2515-07-23 12:28:04 07:52:55.801465 2725-10-03 03:47:15 2498-01-23 20:07:10 #> 6   573-06-08 16:29:45 06:54:49.601561 2444-11-04 22:53:17 2296-10-25 18:37:17 #> 7  2640-03-24 01:28:28 00:11:20.882532  313-03-02 04:45:58 2617-02-27 02:33:11 #> 8  1883-05-06 16:55:16 14:21:24.369793 1261-07-11 09:56:49  167-09-21 10:12:10 #> 9  1518-05-04 21:02:57 00:07:20.114104 2389-04-29 15:06:12  370-04-19 03:18:41 #> 10  626-01-25 05:10:43 16:04:02.668854 2833-12-08 07:16:21  709-09-24 09:21:54 #>     ...5 #> 1  FALSE #> 2  FALSE #> 3   TRUE #> 4   TRUE #> 5   TRUE #> 6   TRUE #> 7  FALSE #> 8   TRUE #> 9   TRUE #> 10  TRUE any_data_frame(cols = 5L, frac_na = 0.5) |> show_example() #>              ...1    ...2            ...3  ...4            ...5 #> 1              NA    <NA> 20:40:47.092883    NA              NA #> 2              NA    OkQj              NA    NA              NA #> 3              NA      Kt              NA FALSE 08:32:47.762033 #> 4              NA !8#]FWA 07:05:46.739778    NA              NA #> 5 10:46:02.125156      _9 00:52:07.672966    NA 05:08:04.337296 #> 6 11:39:34.898205    <NA> 09:02:34.453308    NA              NA"},{"path":"/reference/any_data_frame_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data frame classed object generator — any_data_frame_object","title":"Random data frame classed object generator — any_data_frame_object","text":"Generate random data frame objects.","code":""},{"path":"/reference/any_data_frame_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data frame classed object generator — any_data_frame_object","text":"","code":"any_data_frame_object(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_data_frame_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data frame classed object generator — any_data_frame_object","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_data_frame_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data frame classed object generator — any_data_frame_object","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_data_frame_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data frame classed object generator — any_data_frame_object","text":"","code":"any_data_frame_object() |> show_example() #>      ...1      ...2                ...3       ...4  ...5       ...6  ...7  ...8 #> 1 fQ?-E6'      .HwJ 2462-12-07 10:36:50  886869600  3381 2598-11-30 FALSE  4486 #> 2      8j        +D 2695-05-16 18:14:56   96362232 -2985 2772-06-02 FALSE  2275 #> 3   3x3gn       \"W/  714-01-13 01:34:57 -512144611 -2740 2058-05-19 FALSE  1623 #> 4     3<W     <Z5j@ 1875-05-27 23:58:19 -895238069  6834 2030-11-19  TRUE  8020 #> 5      [t <c!GIcS8! 1178-01-17 00:58:48  194975910 -7582 2955-12-24  TRUE -3498 #> 6     Ecg <c!GIcS8! 1938-03-05 11:20:25 -815491690 -3399 1228-01-26  TRUE  1585 #> 7      S}    c%Xi'{ 2367-10-31 10:12:07  478510455     0 1525-10-11 FALSE  1410 #>                  ...9 #> 1  711-10-15 03:54:19 #> 2  844-07-09 11:00:45 #> 3 2835-09-17 23:25:38 #> 4  422-12-15 17:18:57 #> 5 2095-11-10 19:30:12 #> 6  961-05-03 11:07:32 #> 7  203-02-19 17:45:40 any_data_frame_object(rows = 10L) |> show_example() #>                    ...1 #>  1:  709-05-30 10:46:32 #>  2:   30-03-21 07:21:45 #>  3: 2767-08-07 23:59:03 #>  4:  554-06-24 15:25:02 #>  5: 1237-07-31 09:22:49 #>  6: 1066-06-27 09:16:24 #>  7:  417-02-15 20:29:23 #>  8: 2709-08-08 07:20:53 #>  9: 2093-12-25 13:09:12 #> 10: 2882-05-27 03:46:34 any_data_frame_object(cols = 5L, frac_na = 0.5) |> show_example() #>                  ...1 ...2       ...3 ...4            ...5 #> 1                <NA>   NA  834216078 TRUE              NA #> 2 2036-10-04 10:34:48    0 -285755538   NA              NA #> 3                <NA>   NA         NA TRUE 05:05:55.023320 #> 4                <NA>   NA -624681646 TRUE 14:52:53.857630 #> 5                <NA> 7215  109758209   NA              NA #> 6                <NA>   NA         NA TRUE              NA #> 7  452-11-17 11:08:49 3754         NA   NA 18:55:32.385195"},{"path":"/reference/any_defined.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator with no undefined values — any_defined","title":"Any R object generator with no undefined values — any_defined","text":"Generate R object undefined value contain undefined values. actually generate possible object, just common ones, namely atomic vectors, lists, tibbles. None objects created include undefined values like NA, NULL, Inf, NaN, empty vectors tibbles.","code":""},{"path":"/reference/any_defined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator with no undefined values — any_defined","text":"","code":"any_defined()"},{"path":"/reference/any_defined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator with no undefined values — any_defined","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_defined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator with no undefined values — any_defined","text":"","code":"any_defined() |> show_example() #> [[1]] #> [1] Y (u#:32 #> Levels: Y (u#:32 #>  #> [[2]] #> [1] g&5>cg:) #> Levels: g&5>cg:) #>"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat homogeneous list generator — any_flat_homogeneous_list","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic scalar type.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() |> show_example() #> [[1]] #> 17:44:11.874613 #>  #> [[2]] #> 02:15:52.012888 #>  #> [[3]] #> 02:46:28.379058 #>  #> [[4]] #> 01:33:19.628191 #>  #> [[5]] #> 18:36:23.189662 #>  #> [[6]] #> 09:17:07.837918 #>  #> [[7]] #> 14:54:32.472832 #>  any_flat_homogeneous_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] 9-uR #> Levels: 9-uR #>  #> [[3]] #> [1] >g\\\\M #> Levels: >g\\\\M #>  #> [[4]] #> [1] 8p2t\"tG #> Levels: 8p2t\"tG #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] K #> Levels: K #>  #> [[7]] #> [1] 1R|Zmm+ #> Levels: 1R|Zmm+ #>  #> [[8]] #> [1] LX #> Levels: LX #>  #> [[9]] #> [1] NA #>  #> [[10]] #> [1] F #> Levels: F #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] LYwE'{I9S #> Levels: LYwE'{I9S #>  #> [[2]] #> [1] \"-Uf\" #>  any_flat_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> 04:13:47.665919 #>  #> [[2]] #> NA #>  #> [[3]] #> [1] \"2725-05-16 13:18:18 UTC\" #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] \"1553-04-14\" #>  #> [[6]] #> 04:51:43.529385 #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] $&kO7V #> Levels: $&kO7V #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [1]     0  -158 -2797  1681 -2127  8550  -368  2904 #>  #> [[2]] #> [1] \"2660-03-27\" \"1059-05-22\" \"1038-01-11\" \"1331-03-02\" \"2136-03-22\" #> [6] \"1521-04-11\" \"1081-05-15\" \"2616-07-21\" #>  #> [[3]] #> 16:36:35.906503 #> 06:46:07.922559 #> 03:02:09.767904 #> 15:05:02.013288 #> 07:33:51.242888 #> 23:00:53.458679 #> 06:24:41.702158 #>  #> [[4]] #> [1] dGOD     pRZ      !r\\\\=Ta? #> Levels: dGOD pRZ !r\\\\=Ta? #>  #> [[5]] #> 11:11:23.581028 #> 09:05:29.511708 #> 18:58:06.447392 #> 14:50:51.100292 #> 17:45:00.404929 #> 13:18:08.545440 #> 21:02:09.631834 #> 22:08:54.421836 #> 19:17:43.396225 #>  #> [[6]] #> [1] `V2dW5$   jKA07m    ?Z        FFcud'`P; bz~       #> Levels: `V2dW5$ jKA07m ?Z FFcud'`P; bz~ #>  #> [[7]] #> [1] \"1483-07-31 06:44:26 UTC\" \"336-06-13 11:40:50 UTC\"  #> [3] \"572-02-11 12:56:57 UTC\"  \"1790-02-07 14:41:05 UTC\" #> [5] \"2921-01-28 04:41:36 UTC\" \"1030-02-09 20:45:42 UTC\" #>  #> [[8]] #> [1] eNK{9aq\\\\| \\\\+w [     <          >~Ut       #> Levels: eNK{9aq\\\\| \\\\+w [ < >~Ut #>  any_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] \"X[B6'<\" #>  #> [[2]] #> [1] NA #>  #> [[3]] #> [1] \"DXx$.\\\"\\\"d>\" #>  #> [[4]] #> [1] \"jv\" #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] \"mog\" #>  #> [[7]] #> [1] \"y}|<8.\" #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] \"7\" #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 9 × 1 #>   ...1    #>   <chr>   #> 1 ZU2     #> 2 1Lz1P$x #> 3 :M&&)t  #> 4 _       #> 5 3u>?    #> 6 |_iu    #> 7 Z0N     #> 8 |       #> 9 [FBUg   any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 4 #>    ...1      ...2       ...3        ...4 #>    <chr>     <list>     <list>     <int> #>  1 RC47yQ8   <lgl [1]>  <int [1]>  -8117 #>  2 N3z       <dbl [1]>  <lgl [1]>  -1540 #>  3 @OMi!T/   <date [1]> <chr [1]>  -4102 #>  4 ;         <fct [1]>  <chr [1]>      0 #>  5 4M        <date [1]> <time [1]>     0 #>  6 Bj}{&#    <chr [1]>  <chr [1]>   2195 #>  7 HZq_`epBw <int [1]>  <dttm [1]>  5604 #>  8 ;:O>9|4   <dttm [1]> <dttm [1]>   625 #>  9 iHBF      <date [1]> <dbl [1]>   8895 #> 10 !         <dbl [1]>  <time [1]>    15 any_tibble(cols = 5L, frac_na = 0.5) |> show_example() #> # A tibble: 4 × 5 #>   ...1      ...2      ...3     ...4      ...5             #>   <list>    <list>    <fct>    <chr>     <list>           #> 1 <chr [1]> <fct [1]> \"V#IM$\"  K{S'0     <named list [2]> #> 2 <chr [1]> <int [1]> \"J \"     T&`bDq4:- <named list [2]> #> 3 <chr [1]> <int [1]> \"q.y>]\"  PpH>Gc2c  <named list [2]> #> 4 <chr [1]> <fct [1]> \"1)=n(7\" $P        <named list [2]>"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Undefined value generator — any_undefined","title":"Undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Undefined value generator — any_undefined","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined() |> show_example() #> [1] NA"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [[1]] #> [1] \"2892-05-13\" \"1290-11-28\" \"2679-12-27\" #>  #> [[2]] #> [1] \"133-10-07 04:24:09 UTC\" #>  #> [[3]] #> [1] \"1712-04-11\" #>  any_vector(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA           \"2812-05-15\" \"1354-05-31\" NA           \"2773-02-28\" #>  [6] NA           \"1894-06-13\" NA           \"2271-09-29\" NA"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, data.frames, tibbles, data.tables, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything()"},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator generator","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() |> show_example() #>    ...1 #> 1  9158 #> 2  6940 #> 3     0 #> 4 -4443 #> 5    NA"},{"path":"/reference/as_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"Convert quickcheck generator hedgehog generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"as_hedgehog(generator)"},{"path":"/reference/as_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"generator quickcheck_generator generator","code":""},{"path":"/reference/as_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) |>     as_hedgehog() |>     hedgehog::gen.with(\\(a) 2 ^ a) for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), frac_na = 0, frac_empty = 0)  character_letter(len = c(1L, 10L), frac_na = 0, frac_empty = 0)  character_word(len = c(1L, 10L), frac_na = 0, frac_empty = 0)  character_alphanumeric(len = c(1L, 10L), frac_na = 0, frac_empty = 0)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_empty approximate fraction empty character values included vector. fraction 0, default, include empty values. fraction 0.5 include around 50% empty values.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"}|mlLyD\" \"6Ll\"     \"=e6=l6v\" character_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA           \"E+(4kMR%e\"  NA           \"7nxBPN\"     \"L9LHQ\"      #>  [6] \"\\\"8XE'q,6(\" \"{ 5-Cq[ZT\"  \"xF\"         \"v!/RT\"      \"BA\"         character_(len = 10L, frac_empty = 0.5) |> show_example() #>  [1] \"\"         \"w&Fwv\"    \"\"         \"8_[\\\"tL^\" \"bh\"       \"\"         #>  [7] \"\\\"P\"      \"\"         \"\"         \"I'1o\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/data.table_.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generators — data.table_","title":"data.table generators — data.table_","text":"Construct data.table generators similar way data.table::data.table.","code":""},{"path":"/reference/data.table_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generators — data.table_","text":"","code":"data.table_(..., rows = c(1L, 10L))"},{"path":"/reference/data.table_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generators — data.table_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data.table_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generators — data.table_","text":"quickcheck_generator generator","code":""},{"path":"/reference/data.table_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generators — data.table_","text":"","code":"data.table_(a = integer_()) |> show_example() #>        a #> 1:   936 #> 2: -4716 data.table_(a = integer_(), b = character_(), rows = 5L) |> show_example() #>        a        b #> 1:  7750 UHZ> R3q #> 2:     0 %#2^#Ob^ #> 3:  6743   8:;ey# #> 4: -5285       `w #> 5:  9539       %V"},{"path":"/reference/data.table_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data.table generator — data.table_of","title":"Random data.table generator — data.table_of","text":"Random data.table generator","code":""},{"path":"/reference/data.table_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data.table generator — data.table_of","text":"","code":"data.table_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data.table_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data.table generator — data.table_of","text":"... set unnamed generators. generated data.tables built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data.table_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data.table generator — data.table_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/data.table_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data.table generator — data.table_of","text":"","code":"data.table_of(logical_(), date_()) |> show_example() #>     ...1  ...2  ...3  ...4       ...5       ...6       ...7       ...8  ...9 #> 1: FALSE FALSE  TRUE  TRUE 2419-06-09 2447-11-01 1238-08-16 2872-10-19  TRUE #> 2:  TRUE FALSE  TRUE  TRUE 2073-01-10 2425-05-03 2203-05-13 1268-05-08  TRUE #> 3:  TRUE FALSE FALSE  TRUE 1786-02-11 2920-10-16 1912-10-06 1675-04-29 FALSE #> 4: FALSE FALSE FALSE FALSE 1127-07-06 2793-10-27 2398-04-05 2419-03-23 FALSE #> 5: FALSE FALSE  TRUE  TRUE 2391-01-21 1265-07-16 2078-10-06 1079-07-12  TRUE #> 6: FALSE  TRUE  TRUE  TRUE 1595-04-02 1729-05-11 2131-03-21 1842-10-25 FALSE data.table_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #>                ...1                ...2  ...3            ...4  ...5 #>  1: 08:55:33.142907  824-05-23 17:33:48  TRUE 10:10:13.189969  TRUE #>  2: 15:30:09.937907 1955-05-26 06:20:54  TRUE 08:22:14.181413 FALSE #>  3: 00:39:55.739079 2203-08-23 05:36:32  TRUE 07:03:19.313316 FALSE #>  4: 12:23:12.070656 1571-08-05 00:59:54  TRUE 18:54:10.723920  TRUE #>  5: 15:57:10.123704 1891-03-04 01:36:38  TRUE 15:57:15.158983 FALSE #>  6: 19:44:59.399013 2597-07-21 19:42:58  TRUE 13:23:19.385620  TRUE #>  7: 11:48:41.169668  979-09-25 04:18:30 FALSE 04:44:48.120977 FALSE #>  8: 17:02:15.808672 2485-01-30 00:16:21  TRUE 04:53:28.408351 FALSE #>  9: 19:31:38.043836 1169-07-04 10:05:40 FALSE 01:29:03.239530  TRUE #> 10: 19:11:24.281487 2440-04-22 00:39:17 FALSE 22:28:52.520481  TRUE"},{"path":"/reference/data_frame_.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generators — data_frame_","title":"Data frame generators — data_frame_","text":"Construct data frame generators similar way data_frame.","code":""},{"path":"/reference/data_frame_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(..., rows = c(1L, 10L))"},{"path":"/reference/data_frame_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generators — data_frame_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data_frame_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generators — data_frame_","text":"quickcheck_generator generator","code":""},{"path":"/reference/data_frame_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(a = integer_()) |> show_example() #>       a #> 1 -3655 #> 2 -8804 #> 3 -4900 #> 4  9766 #> 5 -3916 data_frame_(a = integer_(), b = character_(), rows = 5L) |> show_example() #>       a        b #> 1   519  3-(I.GP #> 2  2566    g)rZG #> 3     0 tS;JFHAo #> 4 -1996        T #> 5  3500    ^eMo/"},{"path":"/reference/data_frame_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data frame generator — data_frame_of","title":"Random data frame generator — data_frame_of","text":"Random data frame generator","code":""},{"path":"/reference/data_frame_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data frame generator — data_frame_of","text":"","code":"data_frame_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data_frame_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data frame generator — data_frame_of","text":"... set unnamed generators. generated data frames built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data_frame_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data frame generator — data_frame_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/data_frame_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data frame generator — data_frame_of","text":"","code":"data_frame_of(logical_(), date_()) |> show_example() #>   ...1 ...2       ...3       ...4 ...5 #> 1 TRUE TRUE 1960-02-23 1785-08-14 TRUE data_frame_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #>     ...1  ...2            ...3            ...4            ...5 #> 1   -235 FALSE 00:16:29.807214 07:27:53.151671 05:14:24.188172 #> 2  -5632  TRUE 06:27:14.167621 13:15:19.890773 07:10:53.699476 #> 3   -169 FALSE 13:42:22.620864 21:30:10.641904 02:26:33.198468 #> 4  -3051  TRUE 08:36:52.471110 08:56:35.468663 11:32:24.872463 #> 5  -8301  TRUE 02:49:05.395218 00:28:24.568832 05:29:26.155720 #> 6  -5201  TRUE 07:42:04.400930 22:00:41.773642 13:45:14.279221 #> 7      0 FALSE 01:34:11.168635 17:43:46.594355 16:14:21.900130 #> 8   4366 FALSE 14:31:03.505633 16:46:19.586442 22:22:38.577129 #> 9  -7752  TRUE 10:12:25.724972 19:01:23.985636 11:55:27.261900 #> 10     0 FALSE 20:58:57.284852 12:24:11.376628 08:44:44.925883"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), frac_na = 0)  date_bounded(left, right, len = c(1L, 10L), frac_na = 0)  date_left_bounded(left, len = c(1L, 10L), frac_na = 0)  date_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"1623-06-03\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-05\" \"2020-01-08\" \"2020-01-02\" \"2020-01-08\" \"2020-01-06\" date_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"1108-07-13\" \"1278-04-02\" NA           NA           NA           #>  [6] \"2598-11-29\" \"1365-01-16\" \"2249-11-25\" \"2061-04-26\" NA"},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0 )  double_left_bounded(   left,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_nan approximate fraction NaN values included vector. fraction 0, default, include NaN values. fraction 0.5 include around 50% NaN values. frac_inf approximate fraction Inf -Inf values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1] -675452888  751679036  412215850   37351023 -580127283  288220389          0 double_(big_dbl = TRUE) |> show_example() #> [1]  8.811476e+307 -7.834668e+307 -2.946188e+307 double_bounded(left = -5, right = 5) |> show_example() #>  [1]  4.7250406 -3.9129080  0.8603191 -3.7051992  0.0000000  0.2128118 #>  [7]  3.3438646 -3.4182132 -3.0652458  4.3382492 double_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] 842188946        NA        NA        NA 600365871        NA        NA #>  [8]        NA        NA        NA double_(len = 10L, frac_nan = 0.2, frac_inf = 0.2) |> show_example() #>  [1]  815843349  -85005185       -Inf        NaN -638331168  912813192 #>  [7] -340564386       -Inf          0 -242253572"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal length vector generator — equal_length","title":"Equal length vector generator — equal_length","text":"Generates equal length vectors contained list.","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(..., len = c(1L, 10L))"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal length vector generator — equal_length","text":"... set vector generators. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal length vector generator — equal_length","text":"quickcheck_generator generator","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(integer_(), double_()) |> show_example() #> [[1]] #> [1]     0  9170 -5767 -3978  1987 -6362  6561 #>  #> [[2]] #> [1] -536276290  -80254745 -404036283  783156381 -695530463  809078571   37220554 #>  equal_length(a = logical_(), b = character_(), len = 5L) |> show_example() #> $a #> [1] TRUE TRUE TRUE TRUE TRUE #>  #> $b #> [1] \"n\"     \"p\"     \"(,9Iz\" \".G$.h\" \"a\\\"\"   #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] 2a9ku74z\" 1?h>*0    oY        24UJ;g2   `7'>Dpm6+ TX4u      gf        #> [8] ?d\"^kJ@BO Q?        #> Levels: 2a9ku74z\" 1?h>*0 oY 24UJ;g2 `7'>Dpm6+ TX4u gf ?d\"^kJ@BO Q? factor_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA  1 NA NA  1 NA NA  1 NA  1"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"generate flat lists values coming single input generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] 1755 #>  #> [[2]] #> [1] -9264 #>  #> [[3]] #> [1] -7409 #>  #> [[4]] #> [1] -456 #>  #> [[5]] #> [1] 7520 #>  #> [[6]] #> [1] 9325 #>  #> [[7]] #> [1] -5866 #>  #> [[8]] #> [1] -4637 #>  #> [[9]] #> [1] 0 #>  #> [[10]] #> [1] 5340 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen generator","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) |> hedgehog::gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), frac_na = 0)  hms_bounded(left, right, len = c(1L, 10L), frac_na = 0)  hms_left_bounded(left, len = c(1L, 10L), frac_na = 0)  hms_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 18:36:40.086780 #> 06:37:57.195214 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 09:38:28.793713 #> 07:15:50.865801 #> 05:57:56.538982 #> 07:15:25.372386 #> 07:42:24.052583 #> 01:57:26.271205 #> 00:28:04.256877 #> 08:47:28.667302 hms_(len = 10L, frac_na = 0.5) |> show_example() #>              NA #>              NA #>              NA #> 15:26:57.717879 #> 06:00:39.057660 #> 14:21:15.108293 #>              NA #> 06:33:24.446199 #>              NA #>              NA"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), frac_na = 0)  integer_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_positive(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_negative(len = c(1L, 10L), frac_na = 0, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1] -6269  3989 -1915 -2397 -4081 integer_(big_int = TRUE) |> show_example() #> [1]  -635480615           0  -390497086 -1364870259  1676651073 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1] -1 -1 integer_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]   219    NA     0  2108 -9386  8155    NA -5321    NA  4236"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1]  7475    97 -8115 -5353     0 -3864 #>  #> [[2]] #> [1] FALSE FALSE FALSE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #>  [1] \"XG-jl4N)*\" \"$&lv9\"     \"%_\"        \"t*AY.)\"    \"w9T<)|\"    \"sFI6vOqU\"  #>  [7] \"f\\\\a&Ys.\"  \"eU\"        \"eI\"        \"-|ks@\"     #>  #> $b #> $b[[1]] #> [1] TRUE #>  #> $b[[2]] #> [1] TRUE #>  #> $b[[3]] #> [1] FALSE #>  #> $b[[4]] #> [1] FALSE #>  #> $b[[5]] #> [1] FALSE #>  #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #>  [1]  3691 -3113 -9205  5724  3381  7056  6870  5887     0  7590 #>  #> [[2]] #> [1]  5871 -5566 #>  #> [[3]] #> [1]     0 -2270     0  9458  8906 -4068  2247  6135   262 #>  #> [[4]] #> [1]  -445 -1562   -76   882 #>  #> [[5]] #> [1] -8170 #>  #> [[6]] #> [1] -3310     0  3468 -8154  5400   592  9190     0 #>  #> [[7]] #> [1]  9102  2069 -1730  3597  2852 #>  #> [[8]] #> [1] -8999  8887 -1453 -6647  6197 -2342 -5688 #>  #> [[9]] #> [1]     0  5033  3758 -1567 #>  #> [[10]] #> [1]  -184 -1927  8065 -9795  4551  1295 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1] FALSE logical_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]   NA TRUE   NA   NA TRUE TRUE   NA   NA TRUE   NA"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), frac_na = 0)  numeric_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_positive(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_negative(len = c(1L, 10L), frac_na = 0, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1]  349825183  398297522   28282229 -414163011  509159944 numeric_(big_num = TRUE) |> show_example() #> [1] -1560518808  -808348272  1047978413 -2077345271           0  1154850094 #> [7]  1273429139  -448509799 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1] -1.836509 -3.658009 -2.527268  0.000000 numeric_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  9654     0 -2667  6671  2535 -7538    NA    NA  1071  5643"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #>  [1] \"]l\"       \"e`%F7\"    \"+@8N[\"    \"/Q\"       \"7e3u\"     \"k?.,P\"    #>  [7] \")pys8UTQ\" \"V9\"       \".\"        \"qM\"       one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> [1]  TRUE  TRUE FALSE  TRUE FALSE FALSE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), frac_na = 0)  posixct_bounded(left, right, len = c(1L, 10L), frac_na = 0)  posixct_left_bounded(left, len = c(1L, 10L), frac_na = 0)  posixct_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"1402-09-07 13:50:20 UTC\" \"2569-10-30 17:51:10 UTC\" #> [3] \"2563-08-06 02:43:17 UTC\" \"214-12-27 05:14:18 UTC\"  #> [5] \"2095-10-13 06:12:09 UTC\" \"1456-06-21 19:39:02 UTC\" #> [7] \"2207-12-30 18:30:28 UTC\" \"1504-11-15 08:27:44 UTC\" #> [9] \"2869-08-27 23:23:10 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-10-09 07:24:57 UTC\" \"2020-01-17 22:03:31 UTC\" posixct_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"2036-02-28 11:00:47 UTC\" \"1352-09-04 12:50:51 UTC\" #>  [3] \"987-02-03 02:55:45 UTC\"  NA                        #>  [5] NA                        NA                        #>  [7] NA                        NA                        #>  [9] NA                        \"144-12-26 08:50:37 UTC\""},{"path":"/reference/repeat_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly test properties of a function — repeat_test","title":"Repeatedly test properties of a function — repeat_test","text":"Repeatedly test properties function","code":""},{"path":"/reference/repeat_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(property, tests = getOption(\"quickcheck.tests\", 100L))"},{"path":"/reference/repeat_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly test properties of a function — repeat_test","text":"property anonymous function arguments includes expectation. tests number tests run.","code":""},{"path":"/reference/repeat_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly test properties of a function — repeat_test","text":"testthat expectation object.","code":""},{"path":"/reference/repeat_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(   property = \\() {     num <- stats::runif(1, min = 0, max = 10)     testthat::expect_true(num >= 0 && num <= 10)   } )"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1] FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 3 × 1 #>       a #>   <int> #> 1  1510 #> 2  1261 #> 3  2632 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b        #>   <int> <chr>    #> 1  7721 \"KJAUnW\" #> 2  4450 \"G\\\\!-\"  #> 3  6582 \"\\\"S\"    #> 4 -3241 \"gg)n}\"  #> 5  -696 \"A\""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 6 × 4 #>   ...1       ...2       ...3  ...4  #>   <date>     <date>     <lgl> <lgl> #> 1 2277-07-06 1440-09-06 TRUE  TRUE  #> 2 2947-10-27 2632-07-07 FALSE TRUE  #> 3 2075-02-07 2770-07-04 TRUE  FALSE #> 4 2015-12-25 2036-12-11 FALSE FALSE #> 5 1691-05-09 2007-07-14 TRUE  TRUE  #> 6 2450-01-11 1492-04-21 FALSE FALSE tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>     ...1 ...2            ...3        ...4  ...5       #>    <int> <time>          <fct>       <lgl> <date>     #>  1 -6361 15:04:08.353387 \"jnb\\\"4}t\"  FALSE 1254-08-04 #>  2 -5542 11:28:17.793722 \"9}(6[\"     FALSE 1469-01-05 #>  3 -5056 17:38:19.658170 \"fn9an+X{\"  FALSE 1296-08-12 #>  4  7535 21:27:27.540573 \"['TI_\"     TRUE  1211-11-24 #>  5  2461 13:35:44.140210 \"43oSaxs\\\"\" TRUE  1703-07-23 #>  6 -8813 11:56:45.892428 \"Pt\"        FALSE 1823-06-23 #>  7 -5031 12:23:05.340857 \"Sj'OWkYt-\" FALSE 1527-04-03 #>  8 -6445 11:05:36.096470 \"&c]UU&H'\"  FALSE 1747-10-13 #>  9  7801 19:47:28.333155 \"wS=~)\"     FALSE 2494-01-18 #> 10  -690 04:35:12.379708 \"ck\"        FALSE 1702-01-13"},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
