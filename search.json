[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = \\(a) expect_equal(a, a + 0)   )           }) #> Test passed 🌈  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = \\(a, b) expect_equal(a + b, b + a)   )           }) #> Test passed 😀  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) #> Test passed 😸 library(dplyr, warn.conflicts = FALSE)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) }) #> Test passed 🥳  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) }) #> Test passed 🎊  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) }) #> Test passed 🥇"},{"path":"/index.html","id":"quickcheck-generators","dir":"","previous_headings":"","what":"Quickcheck generators","title":"Property Based Testing","text":"Many generators provided quickcheck. examples.","code":""},{"path":"/index.html","id":"atomic-vectors","dir":"","previous_headings":"Quickcheck generators","what":"Atomic vectors","title":"Property Based Testing","text":"","code":"integer_(len = 10) |> show_example() #>  [1] -9108 -5543  6373  1213 -2107     0  7866  9857  6110  1479 character_alphanumeric(len = 10) |> show_example() #>  [1] \"ftC8FL\"    \"i2Dq\"      \"x\"         \"BeyyrMTN4\" \"f\"         \"I\"         #>  [7] \"EMBbsIJ\"   \"yo6\"       \"9alAD\"     \"UAG90C04\" posixct_(len = 10, any_na = TRUE) |> show_example()  #>  [1] NA                        \"2619-09-17 23:40:21 PDT\" #>  [3] \"1953-06-14 14:25:35 PDT\" \"0374-11-01 03:41:06 LMT\" #>  [5] \"0322-09-13 15:12:58 LMT\" \"0554-02-23 09:16:14 LMT\" #>  [7] \"1958-06-08 23:36:55 PDT\" NA                        #>  [9] NA                        NA"},{"path":"/index.html","id":"lists","dir":"","previous_headings":"Quickcheck generators","what":"Lists","title":"Property Based Testing","text":"","code":"list_(a = constant(NULL), b = any_undefined()) |> show_example() #> $a #> NULL #>  #> $b #> [1] NA flat_list_of(logical_(), len = 3) |> show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] FALSE"},{"path":"/index.html","id":"tibbles","dir":"","previous_headings":"Quickcheck generators","what":"Tibbles","title":"Property Based Testing","text":"","code":"tibble_(a = date_(), b = hms_(), rows = 5) |> show_example() #> # A tibble: 5 x 2 #>   a          b               #>   <date>     <time>          #> 1 2648-05-19 04:24:18.293200 #> 2 1597-10-16 20:00:33.717330 #> 3 1536-10-15 00:50:35.396764 #> 4 2625-07-04 23:22:06.581214 #> 5 1463-03-09 12:40:52.299928 tibble_of(double_bounded(-10, 10), rows = 3, cols = 3) |> show_example() #> # A tibble: 3 x 3 #>    ...1  ...2  ...3 #>   <dbl> <dbl> <dbl> #> 1  7.79 -4.56  0    #> 2 -4.24 -6.08  0    #> 3  9.43 -4.64  4.95 any_tibble(rows = 3, cols = 3) |> show_example() #> # A tibble: 3 x 3 #>   ...1            ...2      ...3             #>   <time>          <list>    <list>           #> 1 20:46:02.552316 <dbl [1]> <named list [2]> #> 2 14:22:53.955335 <dbl [1]> <named list [2]> #> 3 03:48:52.731885 <dbl [1]> <named list [2]>"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used wrapping from_hedgehog. hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error: quickcheck generator can also converted hedgehog generator can used hedgehog functions.","code":"library(hedgehog)  is_even <-    \\(a) a %% 2 == 0  gen_powers_of_two <-    gen.element(1:10) |> gen.with(\\(a) 2 ^ a)  test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) |> expect_true()   ) }) #> Test passed 😀 test_that(\"powers of two and integers are both numeric values\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     b = integer_(),     property = \\(a, b) c(a, b) |> is.numeric() |> expect_true()   ) }) #> Test passed 🎉 test_that(\"composing hedgehog with quickcheck generators fails\", {   tibble_of(from_hedgehog(gen_powers_of_two)) |> expect_error() }) #> Test passed 🥳 gen_powers_of_two <-    integer_bounded(1L, 10L, len = 1L) |>      as_hedgehog() |>      gen.with(\\(a) 2 ^ a)   test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) |> expect_true()   ) }) #> Test passed 🥳"},{"path":"/index.html","id":"fuzz-tests","dir":"","previous_headings":"","what":"Fuzz tests","title":"Property Based Testing","text":"Fuzz testing special case property based testing property tested code doesn’t fail range inputs. example fuzz testing quickcheck. Let’s say want test purrr::map function won’t fail vector input.","code":"test_that(\"map won't fail with any vector as input\", {   for_all(     a = any_vector(),     property = \\(a) purrr::map(a, identity) |> expect_silent()   ) }) #> Test passed 🌈"},{"path":"/index.html","id":"repeat-tests","dir":"","previous_headings":"","what":"Repeat tests","title":"Property Based Testing","text":"Repeat tests can used repeatedly test property holds true many calls function. different regular property based tests don’t require generators. function repeat_test call function many times ensure expectation passes cases. kind test can useful testing functions randomness.","code":"test_that(\"runif generates random numbers between a min and max value\", {   repeat_test(     property = \\() {       random_number <- runif(1, min = 0, max = 10)       expect_true(random_number >= 0 && random_number <= 10)     }   ) }) #> Test passed 🌈"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Any atomic vector generator — any_atomic","title":"Any atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any atomic vector generator — any_atomic","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1] -6966 -7989 -5632 any_atomic(len = 10L, any_na = TRUE) |> show_example() #>  [1]  TRUE  TRUE    NA  TRUE FALSE FALSE  TRUE    NA  TRUE FALSE"},{"path":"/reference/any_data.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data.table generator — any_data.table","title":"Any data.table generator — any_data.table","text":"Generate data.tables.","code":""},{"path":"/reference/any_data.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data.table generator — any_data.table","text":"","code":"any_data.table(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data.table generator — any_data.table","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data.table generator — any_data.table","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_data.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data.table generator — any_data.table","text":"","code":"any_data.table() |> show_example() #>        ...1 #> 1: ^ib/J$*Z #> 2:       5F #> 3:       Fz #> 4:        # #> 5:      `-; #> 6:   *zlh,` any_data.table(rows = 10L) |> show_example() #>                ...1 #>  1: 03:17:55.229905 #>  2: 01:36:59.178996 #>  3: 00:32:19.179489 #>  4: 19:46:18.088301 #>  5: 05:36:04.768941 #>  6: 03:24:59.669321 #>  7: 14:01:42.086772 #>  8: 20:17:52.142768 #>  9: 16:40:03.244459 #> 10: 18:59:37.852376 any_data.table(cols = 5L, any_na = TRUE) |> show_example() #>                   ...1       ...2      ...3       ...4       ...5 #> 1:     23:37:06.300763 2916-06-14 359012720 1884-11-25       <NA> #> 2: 1561-02-08 14:16:59         NA 995094306 1796-06-27 2504-10-29 #> 3:      03:21:01.30568 1849-07-05        NA 2770-04-20       <NA> #> 4:                8855 2251-07-08        NA       <NA> 1957-05-27"},{"path":"/reference/any_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data frame generator — any_data_frame","title":"Any data frame generator — any_data_frame","text":"Generate data.frames.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data frame generator — any_data_frame","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data frame generator — any_data_frame","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame() |> show_example() #>   ...1  ...2      ...3    ...4      ...5  ...6                ...7 #> 1 !z\\\\ FALSE 702051592 ]@2~%*P .U$n;;- < FALSE 2258-04-23 02:55:18 #> 2    ^ FALSE -18914399  6o*2X(      %QDw FALSE 1888-11-14 09:40:14 #> 3    } FALSE         0    7ux[     NgtF<  TRUE 1540-03-24 03:34:33 #>              ...8     ...9    ...10 #> 1 18:22:35.360181        5      D0k #> 2 08:42:43.267521  zC%8JZ[ lo~b o ; #> 3 06:14:52.495235        / iSBUd$bM any_data_frame(rows = 10L) |> show_example() #>          ...1  ...2  ...3 #> 1   159474846 FALSE -4220 #> 2   550488148  TRUE  9033 #> 3   -86534242  TRUE     0 #> 4   779842298 FALSE -1012 #> 5   884814916  TRUE -4572 #> 6   177343578  TRUE  6192 #> 7   -55076904  TRUE -6137 #> 8  -164357371 FALSE -6468 #> 9  -436940702 FALSE -7849 #> 10  102363877 FALSE -8011 any_data_frame(cols = 5L, any_na = TRUE) |> show_example() #>         ...1    ...2       ...3 ...4 ...5 #> 1  448823796    Bsjm -975109119   NA   NA #> 2         NA ePk{v:K  178685572    1 TRUE #> 3         NA  ?UqaX$  153062338   NA TRUE #> 4 -891206247    <NA> -994794827    1   NA #> 5 -755417289    <NA>         NA    1 TRUE #> 6  967290500    <NA> -129503794   NA TRUE #> 7 -300919800 7mg+\\\\a -614184054    1 TRUE #> 8  352751359 y/K7,!z -651591839    1   NA"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any flat homogeneous list generator — any_flat_homogeneous_list","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic scalar class.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() |> show_example() #> [[1]] #> 18:33:34.205811 #>  any_flat_homogeneous_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> 23:23:10.153298 #>  #> [[2]] #> 04:50:36.352173 #>  #> [[3]] #> NA #>  #> [[4]] #> 05:10:10.314334 #>  #> [[5]] #> 08:02:50.520183 #>  #> [[6]] #> 04:54:09.140047 #>  #> [[7]] #> 11:30:59.885374 #>  #> [[8]] #> 12:36:51.235046 #>  #> [[9]] #> 20:56:13.356076 #>  #> [[10]] #> 16:03:34.934483 #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any flat list generator — any_flat_list","title":"Any flat list generator — any_flat_list","text":"Generate lists element atomic scalar.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any flat list generator — any_flat_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] 4852 #>  #> [[2]] #> [1] 517612404 #>  #> [[3]] #> [1] \"2036-01-13\" #>  #> [[4]] #> [1] \"477-06-05 22:03:52 UTC\" #>  any_flat_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] \"2459-12-23 20:36:15 UTC\" #>  #> [[2]] #> [1] H #> Levels: H #>  #> [[3]] #> [1] TRUE #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] \"u}\" #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] FALSE #>  #> [[10]] #> [1] \"929-01-06 20:51:33 UTC\" #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any list generator — any_list","title":"Any list generator — any_list","text":"Generate lists containing lists atomic vectors.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any list generator — any_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [[1]]$a #> [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE #>  #> [[1]]$b #> [1] \"1106-05-22\" \"1985-07-01\" \"1771-04-08\" #>  #>  #> [[2]] #> [[2]]$a #>  [1] +Z @XCb   JG)T}of   'kUx<3    v,2A+X    V&        F         4F        #>  [8] -(#baH    U6i?JGPOe ;-        #> Levels: +Z @XCb JG)T}of 'kUx<3 v,2A+X V& F 4F -(#baH U6i?JGPOe ;- #>  #> [[2]]$b #> [1]  313938543 -781066965 #>  #>  any_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] 5954885 #>  #> [[3]] #> [1] 443506303 #>  #> [[4]] #> [1] NA #>  #> [[5]] #> 18:16:38.980884 #>  #> [[6]] #> [1] \"ZX27\" #>  #> [[7]] #> [1] |D4 #> Levels: |D4 #>  #> [[8]] #> [1] \"1502-09-25\" #>  #> [[9]] #> [1] NA #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Any tibble generator — any_tibble","title":"Any tibble generator — any_tibble","text":"Generate tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any tibble generator — any_tibble","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 10 × 6 #>     ...1 ...2      ...3       ...4       ...5             ...6             #>    <int> <list>    <list>     <list>     <list>           <list>           #>  1  5898 <fct [1]> <chr [1]>  <time [1]> <named list [2]> <named list [2]> #>  2  4482 <fct [1]> <date [2]> <time [1]> <named list [2]> <named list [2]> #>  3  6005 <fct [1]> <fct [6]>  <time [1]> <named list [2]> <named list [2]> #>  4  5000 <fct [1]> <dbl [9]>  <time [1]> <named list [2]> <named list [2]> #>  5  3926 <fct [1]> <dbl [1]>  <time [1]> <named list [2]> <named list [2]> #>  6 -3081 <fct [1]> <date [2]> <time [1]> <named list [2]> <named list [2]> #>  7 -7315 <fct [1]> <date [6]> <time [1]> <named list [2]> <named list [2]> #>  8 -9307 <fct [1]> <int [1]>  <time [1]> <named list [2]> <named list [2]> #>  9  9406 <fct [1]> <chr [4]>  <time [1]> <named list [2]> <named list [2]> #> 10 -8960 <fct [1]> <chr [10]> <time [1]> <named list [2]> <named list [2]> any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 10 #>    ...1             ...2    ...3            ...4                ...5  ...6       #>    <list>           <fct>   <time>          <dttm>              <lgl> <date>     #>  1 <named list [2]> \"(t5zN… 02:02:58.027473 57-10-22 00:47:01   TRUE  1212-03-07 #>  2 <named list [2]> \">D]R&… 19:28:54.157606 1750-08-08 17:23:27 FALSE 1265-09-13 #>  3 <named list [2]> \"x?\"    09:33:06.998198 1440-05-09 04:13:14 TRUE  2200-02-21 #>  4 <named list [2]> \"<Y&+\"  19:39:13.793723 325-09-16 21:22:09  FALSE 1598-04-26 #>  5 <named list [2]> \" Y\"    17:19:17.784460 39-03-08 01:57:20   TRUE  2749-07-26 #>  6 <named list [2]> \"ksY ~… 20:40:53.297062 1371-12-20 22:14:48 TRUE  2013-11-19 #>  7 <named list [2]> \"\\\\#\"   18:31:24.302528 242-09-17 04:12:42  FALSE 2243-07-19 #>  8 <named list [2]> \"d,0\"   18:07:16.158687 1902-05-15 03:11:03 TRUE  2593-08-02 #>  9 <named list [2]> \"| Uj\"  12:08:12.051213 677-05-14 12:39:50  TRUE  1180-04-21 #> 10 <named list [2]> \"g+[3?… 00:25:09.476071 1456-11-19 10:51:18 TRUE  1877-04-04 #> # … with 4 more variables: ...7 <list>, ...8 <list>, ...9 <list>, ...10 <list> any_tibble(cols = 5L, any_na = TRUE) |> show_example() #> # A tibble: 5 × 5 #>   ...1      ...2                 ...3 ...4             ...5 #>   <chr>     <dttm>              <int> <time>          <int> #> 1 NA        NA                      1       NA            1 #> 2 NA        487-09-28 14:35:36      1       NA            1 #> 3 S@kgd;sa/ 1360-05-12 14:21:11     1 15:43:26.597187    NA #> 4 NA        1468-07-30 10:48:57    NA 08:58:23.421848     1 #> 5 NA        2552-11-02 00:24:21     1 04:01:05.315631    NA"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Any undefined value generator — any_undefined","title":"Any undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any undefined value generator — any_undefined","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any undefined value generator — any_undefined","text":"","code":"any_undefined() |> show_example() #> [1] NA"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Any vector generator — any_vector","title":"Any vector generator — any_vector","text":"Generate atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any vector generator — any_vector","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [[1]] #> [[1]]$a #> 08:28:26.130572 #> 03:54:06.320721 #> 12:31:05.968635 #> 09:07:40.668440 #> 13:34:02.023177 #> 21:25:07.758036 #> 17:29:24.392334 #>  #> [[1]]$b #> [1] QZ7\" #> Levels: QZ7\" #>  #>  #> [[2]] #> [[2]]$a #> [1] \"r^n]9\" #>  #> [[2]]$b #> [1]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE #>  #>  #> [[3]] #> [[3]]$a #> [1]  TRUE  TRUE FALSE  TRUE FALSE #>  #> [[3]]$b #> [1] _Q@[`ZSy #> Levels: _Q@[`ZSy #>  #>  #> [[4]] #> [[4]]$a #>  [1]  2371   450     0 -5074     0 -2019 -2977 -9048  4439  1889 #>  #> [[4]]$b #> [1] FZ#o?N   _K1[.;   '%*U     Vnr$`'(h d        CID9n]0  Dsn#8a   GD[ jk   #> [9] n469     #> Levels: FZ#o?N _K1[.; '%*U Vnr$`'(h d CID9n]0 Dsn#8a GD[ jk n469 #>  #>  #> [[5]] #> [[5]]$a #> [1] -769011151  782931423  260793107  659994194 #>  #> [[5]]$b #> [1] \"y\"       \"bszX$Ah\" \"tYJ<&\"   #>  #>  #> [[6]] #> [[6]]$a #> [1]     0     0  1697     0     0 -6559 #>  #> [[6]]$b #> 20:57:57.637284 #> 18:08:37.493675 #> 15:19:29.123774 #> 02:18:18.458357 #>  #>  #> [[7]] #> [[7]]$a #> 09:37:13.557757 #> 08:18:47.467727 #> 19:07:12.153787 #> 21:33:50.611289 #> 16:41:17.809979 #>  #> [[7]]$b #> [1] \"1504-08-10\" \"2453-02-11\" \"1334-12-20\" #>  #>  #> [[8]] #> [[8]]$a #> [1]     0  9580  8990 -8635  3868   254 #>  #> [[8]]$b #> [1] \"1598-07-27\" \"2608-06-08\" \"1204-09-18\" \"1617-10-07\" \"2324-06-25\" #>  #>  #> [[9]] #> [[9]]$a #> [1] \"725-06-24 17:21:36 UTC\"  \"1479-10-21 09:03:50 UTC\" #> [3] \"928-09-15 21:12:40 UTC\"  \"1763-04-02 01:01:47 UTC\" #> [5] \"1051-09-07 13:48:46 UTC\" #>  #> [[9]]$b #> [1] !(<ud&RH` cC!xr     ~bH!k     #> Levels: !(<ud&RH` cC!xr ~bH!k #>  #>  any_vector(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] \"538-11-16 08:35:26 UTC\" #>  #> [[2]] #> [1] \"4ADTP.w$|\" #>  #> [[3]] #> 20:28:15.520062 #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] FALSE #>  #> [[6]] #> NA #>  #> [[7]] #> [1] \"2709-06-07\" #>  #> [[8]] #> [1] \"*#N>!\" #>  #> [[9]] #> [1] -696629737 #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, data.frames, tibbles, data.tables, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything(any_empty = TRUE, any_undefined = TRUE)"},{"path":"/reference/anything.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any R object generator — anything","text":"any_empty Whether empty vectors data frames allowed. any_undefined Whether undefined values allowed.","code":""},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator object.","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() |> show_example() #> # A tibble: 10 × 4 #>    ...1             ...2       ...3  ...4       #>    <list>           <list>     <lgl> <list>     #>  1 <named list [2]> <date [1]> NA    <int [5]>  #>  2 <named list [2]> <dbl [1]>  TRUE  <time [5]> #>  3 <named list [2]> <chr [1]>  FALSE <int [10]> #>  4 <named list [2]> <dbl [1]>  NA    <dbl [1]>  #>  5 <named list [2]> <dttm [1]> FALSE <dttm [6]> #>  6 <named list [2]> <fct [1]>  FALSE <chr [10]> #>  7 <named list [2]> <chr [1]>  TRUE  <dbl [1]>  #>  8 <named list [2]> <time [1]> FALSE <int [4]>  #>  9 <named list [2]> <time [1]> NA    <int [7]>  #> 10 <named list [2]> <date [1]> TRUE  <date [3]> anything(any_empty = FALSE, any_undefined = FALSE) |> show_example() #> # A tibble: 4 × 1 #>   ...1       #>   <list>     #> 1 <int [1]>  #> 2 <chr [4]>  #> 3 <lgl [7]>  #> 4 <dttm [4]>"},{"path":"/reference/as_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"Convert quickcheck generator hedgehog generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"as_hedgehog(generator)"},{"path":"/reference/as_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"generator quickcheck_generator object.","code":""},{"path":"/reference/as_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"quickcheck_generator object.","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) |>     as_hedgehog() |>     hedgehog::gen.with(\\(a) 2 ^ a) for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_letters(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_numbers(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_alphanumeric(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_empty Whether empty character values allowed.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator object.","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"hO\"    \"&C5$y\" character_(len = 10L, any_na = TRUE) |> show_example() #>  [1] \"`3\"        \"{r\"        \"~ybo!e\"    \"7>v5\"      NA          \"d'[e?G\"    #>  [7] \"h(@.\"      NA          NA          \"mJ?OI>16p\" character_(len = 10L, any_empty = TRUE) |> show_example() #>  [1] \"V['FH\"      \",NQ\"        \"\"           \"1)X\"        \"\"           #>  [6] \"\\\"oa0JSF-a\" \"9'p\"        \"9z\"         \"\\\"f,m9|\"    \"xcBWd@$*\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator object.","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/data.table_.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generators — data.table_","title":"data.table generators — data.table_","text":"Construct data.table generators similar way data.table::data.table.","code":""},{"path":"/reference/data.table_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generators — data.table_","text":"","code":"data.table_(..., rows = c(1L, 10L))"},{"path":"/reference/data.table_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generators — data.table_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data.table_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generators — data.table_","text":"quickcheck_generator object.","code":""},{"path":"/reference/data.table_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generators — data.table_","text":"","code":"data.table_(a = integer_()) |> show_example() #>        a #> 1:  7429 #> 2:  4233 #> 3: -4768 #> 4: -6932 data.table_(a = integer_(), b = character_(), rows = 5L) |> show_example() #>        a        b #> 1:  5372 AF~7]\\\\d #> 2:  6597        U #> 3:  -530 6<d8dm)t #> 4:  9512  5RTbN\\\\ #> 5: -8862   2QLq^C"},{"path":"/reference/data.table_of.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generator with randomized columns — data.table_of","title":"data.table generator with randomized columns — data.table_of","text":"data.table generator randomized columns","code":""},{"path":"/reference/data.table_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generator with randomized columns — data.table_of","text":"","code":"data.table_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data.table_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generator with randomized columns — data.table_of","text":"... set unnamed generators. generated data.tables built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data.table_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generator with randomized columns — data.table_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/data.table_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generator with randomized columns — data.table_of","text":"","code":"data.table_of(logical_(), date_()) |> show_example() #>          ...1       ...2 ...3 #> 1: 1559-02-01 1414-09-04 TRUE #> 2: 1876-03-08 2426-03-17 TRUE #> 3: 1507-09-07 2899-12-10 TRUE data.table_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #>           ...1            ...2      ...3            ...4                ...5 #>  1:  982441839 12:46:55.252479    x1-th\" 23:55:57.518750 2634-02-10 09:28:15 #>  2:  891279215 10:15:43.399343 20dnt+80L 03:33:12.981314 2712-05-16 16:58:15 #>  3:   61605954 03:16:29.258826      %RhB 19:30:26.823904   31-06-26 19:00:47 #>  4: -486356954 09:58:18.178184      _BN/ 23:58:25.353553 2716-03-17 17:36:11 #>  5:          0 23:54:20.436956      \"TNF 04:40:35.107253 2205-12-19 17:25:33 #>  6:  356033941 15:03:51.010411  ?qtAGN-e 09:26:13.495873 2365-07-09 00:56:24 #>  7:  469012778 12:35:54.282121  ^#fYJ`?v 00:22:51.489642 2551-12-31 22:09:53 #>  8:  -38190810 10:47:13.759404        Yz 17:29:06.453774 2854-04-24 17:59:07 #>  9: -329302224 23:39:56.201395  ml(0` e@ 11:02:30.914887 1000-11-30 09:54:27 #> 10: -905648463 06:01:56.705807     %Js u 01:11:33.999671 2000-10-01 07:52:16"},{"path":"/reference/data_frame_.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generators — data_frame_","title":"Data frame generators — data_frame_","text":"Construct data frame generators similar way base::data.frame.","code":""},{"path":"/reference/data_frame_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(..., rows = c(1L, 10L))"},{"path":"/reference/data_frame_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generators — data_frame_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data_frame_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generators — data_frame_","text":"quickcheck_generator object.","code":""},{"path":"/reference/data_frame_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(a = integer_()) |> show_example() #>       a #> 1 -2195 #> 2  -711 #> 3  1982 #> 4  9690 #> 5  7417 #> 6  9975 #> 7  -118 #> 8     0 #> 9  2664 data_frame_(a = integer_(), b = character_(), rows = 5L) |> show_example() #>      a        b #> 1    0 wiW^vf4n #> 2 3571  B:i)k|= #> 3    0    i\"|Ue #> 4  316     ty([ #> 5    0     '/q]"},{"path":"/reference/data_frame_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generator with randomized columns — data_frame_of","title":"Data frame generator with randomized columns — data_frame_of","text":"Data frame generator randomized columns","code":""},{"path":"/reference/data_frame_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generator with randomized columns — data_frame_of","text":"","code":"data_frame_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data_frame_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generator with randomized columns — data_frame_of","text":"... set unnamed generators. generated data frames built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data_frame_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generator with randomized columns — data_frame_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/data_frame_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generator with randomized columns — data_frame_of","text":"","code":"data_frame_of(logical_(), date_()) |> show_example() #>         ...1 ...2       ...3       ...4 ...5       ...6 ...7 #> 1 2210-11-27 TRUE 2983-12-30 2586-02-28 TRUE 2977-05-10 TRUE data_frame_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #>          ...1            ...2            ...3  ...4      ...5 #> 1  -654705882 08:53:10.329302 16:10:59.270744  TRUE        Vm #> 2   276407863 16:47:47.246650 06:37:42.811813  TRUE         b #> 3           0 19:37:39.624755 07:09:41.972512 FALSE ?%{3OWP ! #> 4   152864798 19:13:26.383877 15:44:08.230276 FALSE   V9!m(>P #> 5   -71490380 23:32:43.478294 21:40:14.612346  TRUE   3L{qYP# #> 6   405336089 23:48:43.555396 09:51:10.135631 FALSE         E #> 7   526965532 09:49:34.645602 15:59:29.031019 FALSE  ;T_d3 f\" #> 8    56195512 17:21:17.895293 07:04:47.113976  TRUE      {.+* #> 9  -813053416 10:13:17.048964 02:00:35.738039 FALSE     cyKyg #> 10   92504704 16:54:02.108715 03:37:02.354281 FALSE U(QPts\"H]"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), any_na = FALSE)  date_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  date_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  date_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator object.","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"1088-09-13\" \"2112-01-19\" \"2283-07-08\" \"1893-10-05\" \"2863-02-15\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-06\" \"2020-01-09\" \"2020-01-09\" \"2020-01-04\" \"2020-01-06\" #> [6] \"2020-01-08\" \"2020-01-08\" \"2020-01-02\" date_(len = 10L, any_na = TRUE) |> show_example() #>  [1] NA           NA           NA           \"2045-08-23\" \"1531-10-09\" #>  [6] \"1917-11-08\" \"1885-03-10\" \"1537-08-23\" \"1952-12-15\" \"1554-10-31\""},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE )  double_left_bounded(   left,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_nan Whether NaN values allowed. any_inf Whether Inf/-Inf values allowed. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator object.","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1]  746778098  653162651 -937587816  348837601 -412527978 -530846499 double_(big_dbl = TRUE) |> show_example() #> [1] -9.685691e+306 -4.352606e+307 -8.619386e+307 -4.452357e+307 -2.722206e+307 #> [6]  1.628346e+306  5.559546e+307 double_bounded(left = -5, right = 5) |> show_example() #> [1] -3.726237  0.000000 double_(len = 10L, any_na = TRUE) |> show_example() #>  [1]  287754243 -202940620 -320131391  417074338         NA          0 #>  [7] -951930364  462942454 -128363173  417077423 double_(len = 10L, any_nan = TRUE, any_inf = TRUE) |> show_example() #>  [1] 875968201 730536902      -Inf      -Inf       Inf      -Inf 232998520 #>  [8]       Inf         0       NaN"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal length vector generator — equal_length","title":"Equal length vector generator — equal_length","text":"Generates equal length vectors contained list.","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(..., len = c(1L, 10L))"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal length vector generator — equal_length","text":"... set named unnamed vector generators. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal length vector generator — equal_length","text":"quickcheck_generator object.","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(integer_(), double_()) |> show_example() #> [[1]] #> [1] -8351  6000 #>  #> [[2]] #> [1] -31409218  67125595 #>  equal_length(a = logical_(), b = character_(), len = 5L) |> show_example() #> $a #> [1] FALSE  TRUE FALSE FALSE FALSE #>  #> $b #> [1] \"9v\"     \"'S\"     \"9e\"     \"YK\"     \"R <\\\"6\" #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator object.","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #>  [1] r66%-q{E  %B#       Rk%D      nWn@j     OBpVu     2         O34]q=~L  #>  [8] fEHn      2uY/^G-j  H         #> Levels: r66%-q{E %B# Rk%D nWn@j OBpVu 2 O34]q=~L fEHn 2uY/^G-j  H factor_(len = 10L, any_na = TRUE) |> show_example() #>  [1] NA NA  1 NA  1  1  1  1 NA NA"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"Generate flat lists values coming single generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator quickcheck_generator object. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] 8765 #>  #> [[2]] #> [1] 1862 #>  #> [[3]] #> [1] -4778 #>  #> [[4]] #> [1] -3487 #>  #> [[5]] #> [1] -4179 #>  #> [[6]] #> [1] 7355 #>  #> [[7]] #> [1] 0 #>  #> [[8]] #> [1] 4929 #>  #> [[9]] #> [1] 0 #>  #> [[10]] #> [1] -7712 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes values generator calls expectation . function must parameters matching generator names. tests number tests run. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(len = 1L),   b = numeric_(len = 1L),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen object.","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator object.","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) |> hedgehog::gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), any_na = FALSE)  hms_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  hms_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  hms_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator object.","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 10:03:30.334938 #> 16:21:09.263614 #> 09:45:19.202630 #> 23:11:53.605112 #> 17:15:19.693013 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 11:43:29.400998 hms_(len = 10L, any_na = TRUE) |> show_example() #> 10:55:51.019994 #> 16:02:56.922677 #> 01:13:14.496695 #> 01:35:58.091078 #>              NA #> 14:19:05.496213 #> 18:42:21.975175 #> 06:59:47.906891 #> 12:25:37.095429 #>              NA"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  integer_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_positive(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_negative(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator object.","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1]   853  8883  8026 -1456 -7287 -1208     0     0  1393 integer_(big_int = TRUE) |> show_example() #> [1] 0 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1] 1 2 integer_(len = 10L, any_na = TRUE) |> show_example() #>  [1] -8595    NA -7236 -3626   735  4875  5968    NA     0    NA"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"Generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... set named unnamed generators.","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator object.","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1] -1797 -5735   328     0 -3625     0 #>  #> [[2]] #> [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> $a[[1]] #> [1] \"1824-02-09 00:30:54 UTC\" \"1180-06-16 17:56:10 UTC\" #> [3] \"1803-06-03 00:36:16 UTC\" \"1022-02-25 06:50:01 UTC\" #> [5] \"1080-03-18 06:44:53 UTC\" \"2145-12-19 17:39:28 UTC\" #> [7] \"1757-03-02 03:32:48 UTC\" \"1920-08-08 12:08:13 UTC\" #> [9] \"41-11-18 04:04:00 UTC\"   #>  #>  #> $b #> [1] -299039558  -21388809  764264442          0  926298922 #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"Generate lists values coming single generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator quickcheck_generator object. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] -6459   448 #>  #> [[2]] #> [1]     0  9873  8778 -1447   599  8733 -5004  6181 #>  #> [[3]] #> [1]     0 -1629  6242  6866 #>  #> [[4]] #> [1]  7108 -9497  2209 #>  #> [[5]] #> [1]  5855  3692 -8894  8608 -6100  5893  9603 -5909 #>  #> [[6]] #> [1] 6246    0 #>  #> [[7]] #> [1]  9813 -3689     0 -8349  2184     0 #>  #> [[8]] #> [1] -1338 -9169  7624 -4900 -2526  2626 -6010 -3435  6663 #>  #> [[9]] #> [1] -7447 -1994  1850  2937 -2043  7177  5814  7679 -7711 #>  #> [[10]] #> [1] -4803  8141  9194 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator object.","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1] FALSE FALSE  TRUE FALSE  TRUE logical_(len = 10L, any_na = TRUE) |> show_example() #>  [1] FALSE  TRUE  TRUE  TRUE  TRUE    NA FALSE    NA    NA    NA"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  numeric_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_positive(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_negative(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator object.","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1]  657465243 -282742027 -999565149 -787136185  857511423   56269260  338490765 #> [8]  916880017          0 numeric_(big_num = TRUE) |> show_example() #> [1]          0 1664874362 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1]  4 -5  4 -3  0  2  3 -5 numeric_(len = 10L, any_na = TRUE) |> show_example() #>  [1]  5371  1695  -980    NA -7944    NA -5964  6985     0     0"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... set unnamed generators. prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1] -1394  -140  7163  4148 -1706 -5422 one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #>  [1]  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), any_na = FALSE)  posixct_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  posixct_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  posixct_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator object.","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"1219-10-26 03:44:46 UTC\" \"620-10-08 22:28:57 UTC\"  #> [3] \"1349-10-01 17:53:46 UTC\" \"2169-01-27 14:09:09 UTC\" #> [5] \"2696-05-23 18:14:23 UTC\" \"2412-11-30 19:05:12 UTC\" #> [7] \"2139-04-26 05:14:03 UTC\" \"13-11-23 14:48:57 UTC\"   #> [9] \"39-02-03 07:21:08 UTC\"   posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-04-05 02:02:55 UTC\" posixct_(len = 10L, any_na = TRUE) |> show_example() #>  [1] \"111-11-22 12:21:46 UTC\"  NA                        #>  [3] NA                        \"2136-04-06 22:08:33 UTC\" #>  [5] \"1533-05-17 00:43:57 UTC\" NA                        #>  [7] \"535-10-14 11:04:10 UTC\"  \"235-12-11 20:49:17 UTC\"  #>  [9] NA                        NA"},{"path":"/reference/repeat_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly test properties of a function — repeat_test","title":"Repeatedly test properties of a function — repeat_test","text":"Repeatedly test properties function","code":""},{"path":"/reference/repeat_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(property, tests = getOption(\"quickcheck.tests\", 100L))"},{"path":"/reference/repeat_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly test properties of a function — repeat_test","text":"property function parameters includes expectation. tests number tests run.","code":""},{"path":"/reference/repeat_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly test properties of a function — repeat_test","text":"testthat expectation object.","code":""},{"path":"/reference/repeat_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(   property = \\() {     num <- stats::runif(1, min = 0, max = 10)     testthat::expect_true(num >= 0 && num <= 10)   } )"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator quickcheck_generator object.","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1]  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way tibble::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator object.","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 2 × 1 #>       a #>   <int> #> 1 -9288 #> 2  8414 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b     #>   <int> <chr> #> 1     0 *})[  #> 2 -6639 a     #> 3  5570 f@K:  #> 4  1687 y     #> 5 -3415 L"},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 7 × 4 #>   ...1  ...2       ...3  ...4  #>   <lgl> <date>     <lgl> <lgl> #> 1 TRUE  2062-03-26 FALSE TRUE  #> 2 FALSE 2146-01-28 TRUE  FALSE #> 3 TRUE  2124-12-15 FALSE TRUE  #> 4 FALSE 1736-02-08 TRUE  TRUE  #> 5 TRUE  1822-08-26 TRUE  FALSE #> 6 FALSE 2276-02-17 TRUE  TRUE  #> 7 TRUE  2868-05-13 TRUE  TRUE  tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>    ...1         ...2        ...3            ...4     ...5            #>    <chr>        <chr>       <time>          <fct>    <time>          #>  1 \"f\"          \"S\"         04:25:54.554428 -H;e     13:12:57.414418 #>  2 \"tNhz\"       \"rvD/\"      16:13:31.808083 9        16:25:52.469925 #>  3 \"Qaa\"        \"RAFBsXG\"   19:32:46.658220 0        00:36:43.356190 #>  4 \"G9\"         \"mx\"        10:37:50.029216 RZO]>$;  07:20:09.080661 #>  5 \"n?D\"        \":\\\"`V/6R\"  23:08:41.125523 b        14:55:31.529784 #>  6 \"LM\\\\PIZj\"   \"Y\"         02:44:26.082022 PAG      02:55:13.361987 #>  7 \"er7\"        \"u0,;E\\\\[4\" 13:05:57.105127 e9       17:27:06.707207 #>  8 \"%'eMOze*\\\"\" \"JY)\"       08:40:45.394871 XyKC;Zct 09:26:08.959217 #>  9 \";w#\"        \"oDYj \"     22:12:22.525521 EN`##    11:56:55.019430 #> 10 \"cyZac%qyp\"  \"7O\"        10:35:59.896125 |        06:03:28.583445"},{"path":[]},{"path":"/news/index.html","id":"major-breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Major breaking changes","title":"quickcheck 0.1.0","text":"default length vector generators changed 1 range 1 10. parameters form frac_ replaced any_, take logical value instead double value.","code":""},{"path":"/news/index.html","id":"features-0-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"quickcheck 0.1.0","text":"New character_letters generates character vectors letters. New character_numbers generates character vectors numbers. New character_alphanumeric generates character vectors letters numbers. New flat_list_of generates lists atomic scalars. New data_frame_ generate data.frames. New data_frame_of generate data.frames. New data.table_ generate data.tables. New data.table_of generate data.tables. New anything generates R object. New any_flat_homogeneous_list generates flat lists homogeneous elements. New any_data_frame generates data.frames. New any_data.table generates data.tables. New any_undefined generates undefined values. New equal_length generates equal length vectors. New from_hedgehog converts hedgehog quickcheck generator. New as_hedgehog converts quickcheck hedgehog generator. New repeat_test tests property repeatedly.","code":""},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
