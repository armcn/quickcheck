[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Examples.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing +","title":"Examples","text":"","code":"test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1L),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     c = numeric_(len = 1L),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           })"},{"path":"/articles/Examples.html","id":"testing-baserev","dir":"Articles","previous_headings":"","what":"Testing base::rev","title":"Examples","text":"","code":"test_that(\"reverse of reverse is identity\", {   for_all(     a = any_vector(len = c(1L, 10L)),     property = \\(a) a |> rev() |> rev() |> expect_equal(a)   ) })  test_that(\"reverse of concatenation is flipped concatenation of reversed\", {   for_all(     a = integer_(len = c(1L, 10L)),     b = integer_(len = c(1L, 10L)),     property = \\(a, b) rev(c(a, b)) |> expect_equal(c(rev(b), rev(a)))   ) })"},{"path":"/articles/Examples.html","id":"testing-stringrstr_c","dir":"Articles","previous_headings":"","what":"Testing stringr::str_c","title":"Examples","text":"","code":"test_that(\"str_c does nothing with a single input string\", {   for_all(     a = character_(len = 1L),     property = \\(a) str_c(a) |> expect_equal(a)   ) })  test_that(\"str_c returns a single string with multiple input strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     c = character_(len = 1L),     property = \\(a, b, c) str_c(a, b, c) |> length() |> expect_equal(1L)   ) })  test_that(\"concatenation of strings always contains the original strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     property = \\(a, b) {       str_c(a, b) |> str_detect(fixed(a)) |> expect_true()       str_c(a, b) |> str_detect(fixed(b)) |> expect_true()     }   ) })"},{"path":"/articles/Examples.html","id":"testing-dplyrdistinct","dir":"Articles","previous_headings":"","what":"Testing dplyr::distinct","title":"Examples","text":"","code":"test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = \\(a) expect_equal(a, a + 0)   )           }) #> Test passed 🎊  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = \\(a, b) expect_equal(a + b, b + a)   )           }) #> Test passed 🎉  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) #> Test passed 😸 library(dplyr, warn.conflicts = FALSE)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) }) #> Test passed 🥇  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) }) #> Test passed 🎊  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) }) #> Test passed 🎊"},{"path":"/index.html","id":"quickcheck-generators","dir":"","previous_headings":"","what":"Quickcheck generators","title":"Property Based Testing","text":"Many generators provided quickcheck. examples.","code":""},{"path":"/index.html","id":"atomic-vectors","dir":"","previous_headings":"Quickcheck generators","what":"Atomic vectors","title":"Property Based Testing","text":"","code":"integer_(len = 10) |> show_example() #>  [1] -8207  9382 -4528  2914  4057 -8812     0 -5014 -3783  9317 character_alphanumeric(len = 10) |> show_example() #>  [1] \"DQJBy\"     \"N\"         \"1RsYEu\"    \"Y3QOb3Bna\" \"dfl36O\"    \"w3LtzERUI\" #>  [7] \"c7PK\"      \"zpNgH\"     \"7\"         \"2V6Z\" posixct_(len = 10, any_na = TRUE) |> show_example()  #>  [1] \"0023-03-21 06:53:34 LMT\" \"1761-08-01 13:23:50 LMT\" #>  [3] \"1820-08-16 00:32:42 LMT\" \"0920-11-13 21:27:24 LMT\" #>  [5] \"0870-01-11 07:44:34 LMT\" \"0300-02-08 04:28:33 LMT\" #>  [7] \"0275-11-16 00:06:27 LMT\" \"2394-09-09 15:27:16 PDT\" #>  [9] \"1304-05-24 11:27:47 LMT\" NA"},{"path":"/index.html","id":"lists","dir":"","previous_headings":"Quickcheck generators","what":"Lists","title":"Property Based Testing","text":"","code":"list_(a = constant(NULL), b = any_undefined()) |> show_example() #> $a #> NULL #>  #> $b #> [1] NA flat_list_of(logical_(), len = 3) |> show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] TRUE"},{"path":"/index.html","id":"tibbles","dir":"","previous_headings":"Quickcheck generators","what":"Tibbles","title":"Property Based Testing","text":"","code":"tibble_(a = date_(), b = hms_(), rows = 5) |> show_example() #> # A tibble: 5 x 2 #>   a          b               #>   <date>     <time>          #> 1 NA         21:52:14.719779 #> 2 1081-02-16 18:09:40.676045 #> 3 1245-09-02 10:09:14.113041 #> 4 2952-12-08 21:26:12.375184 #> 5 1920-08-02 12:29:26.414564 tibble_of(double_bounded(-10, 10), rows = 3, cols = 3) |> show_example() #> # A tibble: 3 x 3 #>    ...1  ...2  ...3 #>   <dbl> <dbl> <dbl> #> 1 -5.71 -5.61  8.09 #> 2 -7.78  2.21 -9.09 #> 3 -5.69 -1.24 -5.57 any_tibble(rows = 3, cols = 3) |> show_example() #> # A tibble: 3 x 3 #>   ...1  ...2  ...3             #>   <lgl> <lgl> <list>           #> 1 FALSE TRUE  <named list [2]> #> 2 FALSE TRUE  <named list [2]> #> 3 TRUE  FALSE <named list [2]>"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used wrapping from_hedgehog. hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error: quickcheck generator can also converted hedgehog generator can used hedgehog functions.","code":"library(hedgehog)  is_even <-    \\(a) a %% 2 == 0  gen_powers_of_two <-    gen.element(1:10) |> gen.with(\\(a) 2 ^ a)  test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) |> expect_true()   ) }) #> Test passed 🥳 test_that(\"powers of two and integers are both numeric values\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     b = integer_(),     property = \\(a, b) c(a, b) |> is.numeric() |> expect_true()   ) }) #> Test passed 🥳 test_that(\"composing hedgehog with quickcheck generators fails\", {   tibble_of(from_hedgehog(gen_powers_of_two)) |> expect_error() }) #> Test passed 😸 gen_powers_of_two <-    integer_bounded(1L, 10L, len = 1L) |>      as_hedgehog() |>      gen.with(\\(a) 2 ^ a)   test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) |> expect_true()   ) }) #> Test passed 🥇"},{"path":"/index.html","id":"fuzz-tests","dir":"","previous_headings":"","what":"Fuzz tests","title":"Property Based Testing","text":"Fuzz testing special case property based testing property tested code doesn’t fail range inputs. example fuzz testing quickcheck. Let’s say want test purrr::map function won’t fail vector input.","code":"test_that(\"map won't fail with any vector as input\", {   for_all(     a = any_vector(),     property = \\(a) purrr::map(a, identity) |> expect_silent()   ) }) #> Test passed 🥇"},{"path":"/index.html","id":"repeat-tests","dir":"","previous_headings":"","what":"Repeat tests","title":"Property Based Testing","text":"Repeat tests can used repeatedly test property holds true many calls function. different regular property based tests don’t require generators. function repeat_test call function many times ensure expectation passes cases. kind test can useful testing functions randomness.","code":"test_that(\"runif generates random numbers between a min and max value\", {   repeat_test(     property = \\() {       random_number <- runif(1, min = 0, max = 10)       expect_true(random_number >= 0 && random_number <= 10)     }   ) }) #> Test passed 🥳"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1] C?=*b     V_        \\\\reF     .Xpx~a|   Y3~/1wYA0 iQsiRS/   l~[}wj9   #> Levels: C?=*b V_ \\\\reF .Xpx~a| Y3~/1wYA0 iQsiRS/ l~[}wj9 any_atomic(len = 10L, any_na = TRUE) |> show_example() #>  [1]  1  1 NA  1  1  1  1  1  1 NA"},{"path":"/reference/any_data.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data.table generator — any_data.table","title":"Random data.table generator — any_data.table","text":"Generate random data.tables.","code":""},{"path":"/reference/any_data.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data.table generator — any_data.table","text":"","code":"any_data.table(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data.table generator — any_data.table","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data.table generator — any_data.table","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_data.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data.table generator — any_data.table","text":"","code":"any_data.table() |> show_example() #>                   ...1       ...2 #> 1: 2785-02-23 18:40:28 1352-08-20 #> 2: 2147-07-18 00:05:41 2248-02-03 #> 3:  662-12-16 18:16:00 2347-11-26 #> 4: 1039-09-02 14:13:19 1407-05-14 #> 5:  440-05-06 06:50:59 1204-02-07 #> 6: 2138-02-25 20:15:32 1974-10-12 #>                                                                                                                          ...3 #> 1:                                                                                 y-(72Ai/,W-f,q*U,?=hrqKCq`,_M kLd,W(8),... #> 2:                                                                                     st@ZF,moz,'VM)Y,\"~|I>U6,),3\\\\EH1F$,... #> 3:      625-08-07 07:23:48,1956-04-18 13:22:55,550-09-27 07:45:46,2720-06-21 05:51:57,2796-10-30 23:59:33,1916-11-16 07:34:35 #> 4:                                                                                           1680-09-03,1615-05-29,2324-03-09 #> 5:                                                                                                       195823098,-294752867 #> 6: 951-11-20 00:55:41,2932-04-23 09:47:08,1245-12-25 10:53:19,2188-02-15 04:41:13,1136-09-17 05:48:19,2821-12-28 06:57:23,... #>     ...4      ...5      ...6      ...7      ...8 #> 1:     0 <list[2]> <list[2]> <list[2]> <list[2]> #> 2:  4367 <list[2]> <list[2]> <list[2]> <list[2]> #> 3:  -523 <list[2]> <list[2]> <list[2]> <list[2]> #> 4: -2882 <list[2]> <list[2]> <list[2]> <list[2]> #> 5: -5206 <list[2]> <list[2]> <list[2]> <list[2]> #> 6: -7297 <list[2]> <list[2]> <list[2]> <list[2]> any_data.table(rows = 10L) |> show_example() #>          ...1      ...2            ...3                ...4 #>  1:     hZ!%5    OT=UD/ 07:15:33.609202 2921-10-04 20:11:49 #>  2:      s4Kl  0gN${;8u 14:02:33.102943 1590-11-21 16:26:16 #>  3:         y  F2[TBz1( 18:40:33.142323  361-01-20 00:05:57 #>  4:  qZ5),.@- #.sXi3}0T 05:41:18.149733 2222-02-19 15:27:16 #>  5:        P5  fi<t\\\\\\\\ 15:28:43.264305 1131-06-19 16:26:01 #>  6:      ?r!_ fk;m w:yR 04:26:20.233553 2424-06-30 16:37:50 #>  7:     *e9$y        nf 14:44:43.335109 2045-02-02 22:47:54 #>  8:         L         F 05:46:58.141600 2746-05-19 21:39:24 #>  9: (uJ6s<MVG      '^V- 19:05:13.547656 2023-11-16 23:17:21 #> 10:         R    )mwuh: 14:38:48.925865 1758-05-26 23:51:58 any_data.table(cols = 5L, any_na = TRUE) |> show_example() #>          ...1      ...2            ...3      ...4      ...5 #> 1: -416368529 878497571 04:13:45.798942 <list[2]> <list[2]> #> 2:         NA        NA 03:02:58.948319 <list[2]> <list[2]> #> 3:  543733314        NA 23:26:39.701577 <list[2]> <list[2]> #> 4:         NA      Y7$9              NA <list[2]> <list[2]> #> 5:          0        NA 23:27:13.785387 <list[2]> <list[2]>"},{"path":"/reference/any_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data frame generator — any_data_frame","title":"Random data frame generator — any_data_frame","text":"Generate random data frames.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data frame generator — any_data_frame","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data frame generator — any_data_frame","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data frame generator — any_data_frame","text":"","code":"any_data_frame() |> show_example() #>              ...1       ...2       ...3            ...4       ...5  ...6 #> 1 11:41:28.165763 2801-09-30 1480-10-17 10:28:50.068429 1652-05-15  TRUE #> 2 07:06:47.637455 2431-06-19 1873-01-06 09:33:00.134787 2819-09-08 FALSE #> 3 15:37:58.968015 2992-01-18 1501-01-24 08:03:59.663526 1489-07-27 FALSE #> 4 01:46:42.100751 2027-02-22 2282-02-16 02:14:19.084695 1119-04-16 FALSE #> 5 15:25:54.409521 1074-10-27 2495-03-07 09:06:28.652163 2148-09-01 FALSE #> 6 22:39:49.649524 2900-11-11 1296-01-26 11:11:05.422113 2822-05-01 FALSE #> 7 15:47:13.914144 2687-07-05 2590-03-24 23:33:02.222152 2228-10-07 FALSE #> 8 16:51:30.081084 1155-09-19 1509-03-20 22:12:24.311932 1311-08-14  TRUE #> 9 15:32:02.727339 1642-03-08 1212-09-02 05:35:10.124285 1708-10-25 FALSE #>         ...7      ...8                ...9 #> 1  558648035   7<z}^52 1500-11-08 08:27:27 #> 2  711220366         $  354-08-10 03:02:47 #> 3  697378979      $2nw 2986-10-22 23:03:34 #> 4 -464457138      M;S9  410-04-22 03:25:48 #> 5 -540170097         )  181-06-04 20:40:55 #> 6 -818459970         Y 1548-11-25 06:12:36 #> 7 -604454241    1-'T2G 2199-09-24 20:42:21 #> 8          0 H>\"sug_I(  972-11-26 10:02:43 #> 9 -661288347 mm~ro!*T@ 1813-02-24 06:13:56 any_data_frame(rows = 10L) |> show_example() #>                   ...1  ...2  ...3     ...4 #> 1   497-09-28 02:10:13  TRUE   935  JVR}W I #> 2  1610-01-10 21:45:18  TRUE -4538 akzU%;&' #> 3  1015-07-05 04:32:04  TRUE -8589  yIB%NYi #> 4  2798-01-05 22:14:06 FALSE  2555    SzjM, #> 5  1467-01-15 19:36:53  TRUE  6574     ,4;L #> 6   975-05-23 07:28:56 FALSE -8208 >M(8Y?Sc #> 7  1138-02-23 12:42:43  TRUE  6368        + #> 8  2875-09-19 06:20:42 FALSE -8137     zbj- #> 9   801-02-06 13:48:13 FALSE -3472        ~ #> 10 2650-10-31 22:40:09 FALSE     0 m}|/V{DG any_data_frame(cols = 5L, any_na = TRUE) |> show_example() #>                  ...1 ...2       ...3 ...4      ...5 #> 1 1641-07-18 01:36:32   NA 1304-05-01   NA 326957435 #> 2 2706-05-01 04:41:40    1 2630-06-05    1  19692099"},{"path":"/reference/any_data_frame_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data frame classed object generator — any_data_frame_object","title":"Random data frame classed object generator — any_data_frame_object","text":"Generate random data frame objects.","code":""},{"path":"/reference/any_data_frame_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data frame classed object generator — any_data_frame_object","text":"","code":"any_data_frame_object(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data_frame_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data frame classed object generator — any_data_frame_object","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data_frame_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data frame classed object generator — any_data_frame_object","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_data_frame_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data frame classed object generator — any_data_frame_object","text":"","code":"any_data_frame_object() |> show_example() #>          ...1    ...2      ...3      ...4 #> 1: 2874-01-07 pbs]F;p <list[2]> <list[2]> #> 2: 1541-07-05 y'}qm;N <list[2]> <list[2]> any_data_frame_object(rows = 10L) |> show_example() #>                                                                                                                          ...1 #>  1:                                           12:07:39.466050,19:21:06.763760,15:33:34.988917,17:53:54.055242,16:42:49.301121 #>  2: 808-04-25 19:57:01,1473-02-22 07:43:27,2385-11-01 16:18:05,1638-04-26 08:01:27,1568-06-13 23:11:12,582-05-22 11:46:51,... #>  3:                                                                                                                   N5,UW5n #>  4:                                                                                             FALSE,FALSE,FALSE, TRUE,FALSE #>  5:   2023-07-28 19:50:52,364-07-15 00:50:59,2803-05-12 09:24:40,419-12-01 05:25:04,181-05-10 10:50:00,574-07-15 16:55:08,... #>  6:                                                                                                               -3396,-5255 #>  7:                                                       60730390, 224834044, 394303314,  32173992,-253874555,-205962859,... #>  8:                                                         2676-03-01,2081-12-06,1053-03-31,2889-11-04,2813-06-10,1022-09-20 #>  9:                                                                                 Rh@Qa,QZ5^,kwmK_,kcm~8+TR, g@BHp9db,|,... #> 10:                                                                                                               -6088, 2254 #>      ...2  ...3  ...4                ...5       ...6      ...7 #>  1:  4226  TRUE  3010 2617-04-08 09:24:26  845644535 <list[2]> #>  2:  6900  TRUE  1573  429-06-24 16:05:06   40313500 <list[2]> #>  3:  3364 FALSE     0 1146-12-24 09:58:39  845816538 <list[2]> #>  4: -1762  TRUE  7911 1707-11-27 16:56:58  972293638 <list[2]> #>  5: -7589  TRUE     0 1954-09-20 11:16:41 -641855482 <list[2]> #>  6:  5312 FALSE -6757 1876-03-05 01:27:07          0 <list[2]> #>  7:     0 FALSE  2719 2910-07-29 18:30:04  141699790 <list[2]> #>  8: -8350 FALSE     0 1146-03-26 18:59:39 -379649803 <list[2]> #>  9:  8385 FALSE   164  310-07-15 01:02:53  965237143 <list[2]> #> 10:  7248 FALSE -3570  279-03-09 08:09:14          0 <list[2]> any_data_frame_object(cols = 5L, any_na = TRUE) |> show_example() #>        ...1    ...2                ...3 ...4       ...5 #> 1:       NA     KAl  757-09-02 13:12:31 TRUE       <NA> #> 2: 30857883 >0]<Y*+ 2105-12-09 02:09:34   NA 2036-02-07"},{"path":"/reference/any_defined.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator with no undefined values — any_defined","title":"Any R object generator with no undefined values — any_defined","text":"Generate R object undefined value contain undefined values. actually generate possible object, just common ones, namely atomic vectors, lists, tibbles. None objects created include undefined values like NA, NULL, Inf, NaN, empty vectors tibbles.","code":""},{"path":"/reference/any_defined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator with no undefined values — any_defined","text":"","code":"any_defined()"},{"path":"/reference/any_defined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator with no undefined values — any_defined","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_defined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator with no undefined values — any_defined","text":"","code":"any_defined() |> show_example() #> [[1]] #> [[1]]$a #> [1] \"1567-01-28\" #>  #> [[1]]$b #> [1] \"d'8nUzil\" #>  #>  #> [[2]] #> [[2]]$a #> [1] ''C Yst #> Levels: ''C Yst #>  #> [[2]]$b #> 06:09:05.286150 #> 15:57:08.532341 #> 08:16:30.064027 #> 16:46:52.936932 #> 09:58:11.686783 #> 23:56:43.979980 #> 07:19:58.487923 #> 18:50:57.699882 #>  #>  #> [[3]] #> [[3]]$a #> [1] \"v\"        \"W=kR/#{a\" \"!K~e3`\"   \"vf){k\"    \"a\"        \">dgBARK\"  \"s5Z\"      #> [8] \"+<0L\"     \"N;vs3\"    #>  #> [[3]]$b #> [1]   9380 -10000   2450   9369  -3126  -9872   3935   6850  -6812 #>  #>  #> [[4]] #> [[4]]$a #> [1] -3815 -8244   294  4497 -1099 -9866   425  2262  9141 #>  #> [[4]]$b #> [1] -191121668 -753257530  847106791 -290408878  348376386 #>  #>  #> [[5]] #> [[5]]$a #> [1] \"2706-10-23\" \"2118-03-23\" \"1107-06-25\" \"1089-12-22\" \"2978-09-24\" #> [6] \"2055-12-14\" \"1730-11-05\" \"1979-10-05\" \"2872-02-08\" #>  #> [[5]]$b #> [1] \"By_B+xP\" #>  #>  #> [[6]] #> [[6]]$a #> [1] \\\\ #> Levels: \\\\ #>  #> [[6]]$b #> [1] -176479756  104253091 -356027917 -714185409 -901704428  476477568 #>  #>  #> [[7]] #> [[7]]$a #> [1]  7150  6712 -7403 -7044 -7512  5659  8411  1330  1056 #>  #> [[7]]$b #> [1] \"1282-04-11\" \"1710-01-25\" #>  #>"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat homogeneous list generator — any_flat_homogeneous_list","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic scalar type.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() |> show_example() #> [[1]] #> [1] *b{~\\\\9X #> Levels: *b{~\\\\9X #>  #> [[2]] #> [1] -+# #> Levels: -+# #>  #> [[3]] #> [1] Sv #> Levels: Sv #>  #> [[4]] #> [1] l*` #> Levels: l*` #>  #> [[5]] #> [1] E/UBSo#^\" #> Levels: E/UBSo#^\" #>  #> [[6]] #> [1] F[~(;?a #> Levels: F[~(;?a #>  #> [[7]] #> [1] K[*vBReG #> Levels: K[*vBReG #>  any_flat_homogeneous_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] 623739077 #>  #> [[2]] #> [1] NA #>  #> [[3]] #> [1] -273229433 #>  #> [[4]] #> [1] -587869581 #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] 445131070 #>  #> [[7]] #> [1] 948961479 #>  #> [[8]] #> [1] -790827778 #>  #> [[9]] #> [1] -444595142 #>  #> [[10]] #> [1] 474833774 #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] \"1989-01-13 04:22:15 UTC\" #>  #> [[4]] #> [1] _V,w\\\\Mq| #> Levels: _V,w\\\\Mq| #>  #> [[5]] #> [1] -5965 #>  #> [[6]] #> [1] .VO!2A  #> Levels: .VO!2A  #>  #> [[7]] #> 02:41:04.028627 #>  #> [[8]] #> [1] \"2130-06-19\" #>  #> [[9]] #> [1] 5742 #>  #> [[10]] #> [1] Q$ #> Levels: Q$ #>  any_flat_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> NA #>  #> [[2]] #> [1] 9mfSJ9Pa& #> Levels: 9mfSJ9Pa& #>  #> [[3]] #> [1] 347098574 #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] \"/U\" #>  #> [[6]] #> [1] \"2216-04-17\" #>  #> [[7]] #> [1] -353297534 #>  #> [[8]] #> [1] \"j`<GC:\" #>  #> [[9]] #> [1] -657449498 #>  #> [[10]] #> [1] -6005 #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [1] \"Y]u&I'e$\" #>  #> [[2]] #> [1] \"y0u\" #>  #> [[3]] #> [1] #aj_Lyjk #> Levels: #aj_Lyjk #>  #> [[4]] #> [1] 1860 #>  #> [[5]] #> [1] 7366 #>  #> [[6]] #> [1] 5886 #>  #> [[7]] #> [1] 756938229 #>  any_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] NA #>  #> [[3]] #> [1] 0 #>  #> [[4]] #> [1] 60 #>  #> [[5]] #> [1] -6674 #>  #> [[6]] #> [1] 3609 #>  #> [[7]] #> [1] 0 #>  #> [[8]] #> [1] -2389 #>  #> [[9]] #> [1] -1760 #>  #> [[10]] #> [1] 0 #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 8 × 8 #>   ...1       ...2     ...3                       ...4 ...5   ...6  ...7   ...8   #>   <list>     <fct>    <dttm>                    <dbl> <chr>  <chr> <list> <list> #> 1 <fct [1]>  RDYdu%n< 2376-07-18 09:57:06  763563722. \";_~_… \"?G|\" <int>  <date> #> 2 <chr [10]> }Q+}TL[  2395-02-22 02:46:09 -509319651. \"Tf\"   \"WRD… <date> <date> #> 3 <lgl [9]>  8M[:X    2876-03-07 08:09:37          0  \"NGv}… \",Xg… <time> <date> #> 4 <time [3]> >        1412-08-29 21:17:18 -440301274. \"b+h\"  \"_2M\" <chr>  <date> #> 5 <lgl [2]>  zGx(,F   1973-07-20 02:02:23 -535264520. \" x~Q… \"b$@… <time> <date> #> 6 <lgl [8]>  h]0      126-01-26 08:56:02           0  \"@f?t… \"89-… <date> <date> #> 7 <dttm [3]> ^s       1638-11-09 17:04:14  101156195. \";h\"   \"6eb… <date> <date> #> 8 <dbl [10]> )VR:Xk8M 1819-07-26 01:33:28 -352823973. \"1}Q}… \"k.{… <dbl>  <date> any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 4 #>    ...1       ...2        ...3       ...4       #>    <list>     <fct>       <list>     <list>     #>  1 <fct [7]>  \"$R3>\"      <dttm [6]> <dttm [1]> #>  2 <dttm [9]> \"IT,Ku=C\"   <fct [4]>  <dttm [1]> #>  3 <dbl [3]>  \"9Wh4J\"     <dbl [8]>  <dttm [1]> #>  4 <date [4]> \"HU \"       <int [7]>  <dttm [1]> #>  5 <dttm [9]> \"t4yHt\\\"c(\" <fct [10]> <dttm [1]> #>  6 <date [4]> \"(6Tvf =C\"  <chr [4]>  <dttm [1]> #>  7 <int [8]>  \"[\"         <chr [2]>  <dttm [1]> #>  8 <dbl [9]>  \"nEDS|CQg&\" <lgl [4]>  <dttm [1]> #>  9 <fct [4]>  \"?Fwyn@1yN\" <dbl [9]>  <dttm [1]> #> 10 <fct [8]>  \"&1s:g\"     <int [7]>  <dttm [1]> any_tibble(cols = 5L, any_na = TRUE) |> show_example() #> # A tibble: 8 × 5 #>   ...1             ...2             ...3              ...4 ...5                #>   <list>           <list>           <date>           <dbl> <dttm>              #> 1 <named list [2]> <named list [2]> 1807-11-07         NA  1084-03-20 23:25:47 #> 2 <named list [2]> <named list [2]> 1554-11-21 -974571626. 19-10-13 02:25:04   #> 3 <named list [2]> <named list [2]> 2883-11-12 -608174335. 1960-12-25 02:47:57 #> 4 <named list [2]> <named list [2]> 1820-07-24  129967043. 905-12-29 02:50:36  #> 5 <named list [2]> <named list [2]> 2415-12-17         NA  1311-01-01 06:55:01 #> 6 <named list [2]> <named list [2]> 2865-02-24  693034606. 2092-07-15 16:27:34 #> 7 <named list [2]> <named list [2]> 1941-07-31  791768456. 471-12-26 12:16:54  #> 8 <named list [2]> <named list [2]> 1447-10-15 -658565740. 1094-03-23 13:02:34"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Undefined value generator — any_undefined","title":"Undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Undefined value generator — any_undefined","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined() |> show_example() #> [1] NA"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #>  [1] E!7.u#7P  dm2LY wk  wSI/      (#s3-AX#6 '{sbg~k4  xB        \\\\J       #>  [8] *bkl      1         y         #> Levels: E!7.u#7P dm2LY wk wSI/ (#s3-AX#6 '{sbg~k4 xB \\\\J *bkl 1 y any_vector(len = 10L, any_na = TRUE) |> show_example() #>  [1]  TRUE    NA  TRUE FALSE FALSE  TRUE    NA  TRUE FALSE  TRUE"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, data.frames, tibbles, data.tables, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything()"},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator generator","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() |> show_example() #> [1] \"2289-08-13 18:36:42 UTC\" \"1347-01-31 10:52:31 UTC\" #> [3] \"1048-12-19 02:38:12 UTC\" \"2252-07-16 19:10:44 UTC\""},{"path":"/reference/as_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"Convert quickcheck generator hedgehog generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"as_hedgehog(generator)"},{"path":"/reference/as_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"generator quickcheck_generator generator","code":""},{"path":"/reference/as_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) |>     as_hedgehog() |>     hedgehog::gen.with(\\(a) 2 ^ a) for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_letters(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_numbers(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_alphanumeric(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_empty Whether empty character values allowed.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"A\"      \"F#\"     \"t;_\"    \"Y\\\"D=$\" \".u/\"    \"mQmI\"   \"Y\"      \"=s#\"    #> [9] \"|w\"     character_(len = 10L, any_na = TRUE) |> show_example() #>  [1] \"w\"        \"q9%pv[ob\" \"*(Z\"      NA         \"rg\"       \"I2.DrfLH\" #>  [7] \"K\"        \"j0y\"      \"d\"        NA         character_(len = 10L, any_empty = TRUE) |> show_example() #>  [1] \"\"       \"a?}\"    \"\\\"(\"    \"K\"      \"uP=~.z\" \"\"       \"W\"      \"J\"      #>  [9] \"\"       \"\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/data.table_.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generators — data.table_","title":"data.table generators — data.table_","text":"Construct data.table generators similar way data.table::data.table.","code":""},{"path":"/reference/data.table_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generators — data.table_","text":"","code":"data.table_(..., rows = c(1L, 10L))"},{"path":"/reference/data.table_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generators — data.table_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data.table_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generators — data.table_","text":"quickcheck_generator generator","code":""},{"path":"/reference/data.table_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generators — data.table_","text":"","code":"data.table_(a = integer_()) |> show_example() #>        a #> 1:  9012 #> 2: -7586 #> 3:  1721 #> 4: -2299 #> 5:  -686 data.table_(a = integer_(), b = character_(), rows = 5L) |> show_example() #>        a         b #> 1: -1510     4g'fT #> 2:     0    N+.2c. #> 3:  9312 m3 ;AE~a> #> 4: -2622  8.J(G`_= #> 5:   253  bbn^trq."},{"path":"/reference/data.table_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data.table generator — data.table_of","title":"Random data.table generator — data.table_of","text":"Random data.table generator","code":""},{"path":"/reference/data.table_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data.table generator — data.table_of","text":"","code":"data.table_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data.table_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data.table generator — data.table_of","text":"... set unnamed generators. generated data.tables built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data.table_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data.table generator — data.table_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/data.table_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data.table generator — data.table_of","text":"","code":"data.table_of(logical_(), date_()) |> show_example() #>     ...1  ...2  ...3 #> 1:  TRUE FALSE FALSE #> 2: FALSE FALSE FALSE #> 3: FALSE FALSE FALSE #> 4:  TRUE  TRUE  TRUE data.table_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #>      ...1       ...2            ...3       ...4  ...5 #>  1:  6234          0 10:27:22.818433 2101-10-09 FALSE #>  2: -4561  -91401745 23:17:19.357471 2893-02-28  TRUE #>  3:     0  448170383 14:21:20.932153 1263-12-30  TRUE #>  4: -6602          0 18:14:29.799636 2899-04-24 FALSE #>  5: -2112 -357756090 16:17:41.374953 1272-04-08 FALSE #>  6:  1946 -560096854 00:08:24.591624 2730-03-30  TRUE #>  7:  8641  700311762 23:23:52.226532 2845-07-16 FALSE #>  8:  4741  222987195 19:34:46.593417 1509-04-18 FALSE #>  9: -3566          0 10:29:55.632030 1553-09-10  TRUE #> 10:  5965 -812109538 10:57:27.762808 1021-03-11  TRUE"},{"path":"/reference/data_frame_.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generators — data_frame_","title":"Data frame generators — data_frame_","text":"Construct data frame generators similar way data_frame.","code":""},{"path":"/reference/data_frame_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(..., rows = c(1L, 10L))"},{"path":"/reference/data_frame_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generators — data_frame_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data_frame_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generators — data_frame_","text":"quickcheck_generator generator","code":""},{"path":"/reference/data_frame_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(a = integer_()) |> show_example() #>       a #> 1  5278 #> 2     0 #> 3     0 #> 4 -6683 #> 5 -3271 #> 6   437 #> 7  5501 #> 8 -2757 #> 9  9779 data_frame_(a = integer_(), b = character_(), rows = 5L) |> show_example() #>       a        b #> 1  4436 FcfP,f4p #> 2     0       Ql #> 3 -9552  gYJ?v\"F #> 4 -1966      nV4 #> 5 -5973      \"Kq"},{"path":"/reference/data_frame_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data frame generator — data_frame_of","title":"Random data frame generator — data_frame_of","text":"Random data frame generator","code":""},{"path":"/reference/data_frame_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data frame generator — data_frame_of","text":"","code":"data_frame_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data_frame_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data frame generator — data_frame_of","text":"... set unnamed generators. generated data frames built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data_frame_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data frame generator — data_frame_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/data_frame_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data frame generator — data_frame_of","text":"","code":"data_frame_of(logical_(), date_()) |> show_example() #>    ...1       ...2 #> 1  TRUE 1250-05-08 #> 2  TRUE 1897-11-19 #> 3 FALSE 2975-03-25 #> 4 FALSE 1726-12-29 #> 5 FALSE 2748-11-13 #> 6 FALSE 2741-06-01 #> 7 FALSE 1345-03-11 #> 8  TRUE 1380-02-25 data_frame_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #>          ...1       ...2       ...3       ...4                ...5 #> 1   176937128 1558-06-03 -406109348 1921-12-17 1593-02-18 18:03:01 #> 2  -465776038 1801-07-13 -962347805 1420-01-05 1924-01-03 06:32:03 #> 3   491418228 1573-06-17  294955004 1638-04-13 2727-01-05 17:34:57 #> 4           0 2418-12-15  476286420 1243-12-05 2962-10-16 03:11:41 #> 5   991710342 1937-04-14  544008526 2703-10-24 1928-08-04 21:00:29 #> 6  -583659905 1784-09-09 -671798928 2528-01-11 1762-11-26 02:07:06 #> 7  -694811824 2046-08-20 -279305791 1767-04-30    9-06-17 15:08:58 #> 8           0 1267-04-26  959493884 2170-07-26 1211-04-06 23:55:15 #> 9    89047665 2297-09-07 -735820216 1702-11-24 1758-06-18 05:24:21 #> 10 -931075603 2152-03-21   70165909 2578-12-09 1405-07-20 15:59:33"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), any_na = FALSE)  date_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  date_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  date_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"2769-11-19\" \"1263-07-16\" \"1311-11-10\" \"1346-04-12\" \"2961-04-17\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-08\" date_(len = 10L, any_na = TRUE) |> show_example() #>  [1] \"1983-11-16\" NA           \"2306-03-09\" \"2780-02-05\" \"1549-08-11\" #>  [6] \"1535-12-09\" \"1469-01-21\" NA           \"1767-01-20\" \"2487-05-18\""},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE )  double_left_bounded(   left,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_nan Whether NaN values allowed. any_inf Whether Inf/-Inf values allowed. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1]         0 417486492  49168636 double_(big_dbl = TRUE) |> show_example() #> [1] -4.640807e+307  4.445387e+307   0.000000e+00  2.175950e+307 double_bounded(left = -5, right = 5) |> show_example() #> [1]  0.01590672 -1.75489057  0.00000000 -4.11840300 -4.26342964 double_(len = 10L, any_na = TRUE) |> show_example() #>  [1]          0 -392502079 -103076901 -492645389 -791274972 -455851227 #>  [7] -245084525 -797422024  733616812 -824456903 double_(len = 10L, any_nan = TRUE, any_inf = TRUE) |> show_example() #>  [1]       -Inf       -Inf -652351029   62203515       -Inf          0 #>  [7] -303531394       -Inf       -Inf       -Inf"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal length vector generator — equal_length","title":"Equal length vector generator — equal_length","text":"Generates equal length vectors contained list.","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(..., len = c(1L, 10L))"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal length vector generator — equal_length","text":"... set vector generators. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal length vector generator — equal_length","text":"quickcheck_generator generator","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(integer_(), double_()) |> show_example() #> [[1]] #> [1]  3825 -8054 -8404   -70     0 -5104  3516 #>  #> [[2]] #> [1] -580578626 -515295619 -367732983  789193187  347639083  -58064802  253816270 #>  equal_length(a = logical_(), b = character_(), len = 5L) |> show_example() #> $a #> [1] FALSE  TRUE FALSE FALSE  TRUE #>  #> $b #> [1] \"0KIz:%)\"  \"m\"        \"s'c)=AJ8\" \"2|2K~^y\"  \"^_>v\"     #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] y\\\\N      hz        g<&gA     wyY,%      ((X~Yitt ]r        !z9!{Y{   #> [8] ,F6BLr_,m Y         #> Levels: y\\\\N hz g<&gA wyY,%  ((X~Yitt ]r !z9!{Y{ ,F6BLr_,m Y factor_(len = 10L, any_na = TRUE) |> show_example() #>  [1]  1  1  1  1 NA  1  1  1  1  1"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"generate flat lists values coming single input generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] -4150 #>  #> [[2]] #> [1] -3127 #>  #> [[3]] #> [1] -1743 #>  #> [[4]] #> [1] -1161 #>  #> [[5]] #> [1] 3889 #>  #> [[6]] #> [1] 9098 #>  #> [[7]] #> [1] -7363 #>  #> [[8]] #> [1] 598 #>  #> [[9]] #> [1] -8470 #>  #> [[10]] #> [1] 0 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen generator","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) |> hedgehog::gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), any_na = FALSE)  hms_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  hms_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  hms_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 06:03:54.182989 #> 07:49:07.909282 #> 09:09:02.597022 #> 14:02:42.923255 #> 17:08:59.083289 #> 12:22:59.486259 #> 06:09:07.349221 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 06:53:01.487300 #> 02:15:22.479329 #> 03:24:18.336900 #> 08:16:31.889021 #> 00:20:14.046976 hms_(len = 10L, any_na = TRUE) |> show_example() #> 17:51:32.309211 #> 22:13:06.608396 #> 22:26:57.009087 #> 19:57:19.991253 #> 05:54:07.976841 #> 23:12:50.616897 #>              NA #>              NA #>              NA #>              NA"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  integer_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_positive(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_negative(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #>  [1] -8796  9426   904     0  3198 -8036  6471 -5397 -4928  -221 integer_(big_int = TRUE) |> show_example() #> [1] -1955966969  -834187631  -805336105 -1396735447  1762914191   487552536 #> [7]   135876335 -1940866688 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1] 0 4 integer_(len = 10L, any_na = TRUE) |> show_example() #>  [1]    NA  -561  3327 -5635  -105  7132   190  3150 -1584    NA"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1] 0 #>  #> [[2]] #> [1] FALSE FALSE  TRUE FALSE FALSE FALSE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> [1] 970077860         0 #>  #> $b #> $b[[1]] #> [1] \"2046-02-11\" \"1793-09-23\" \"2343-10-30\" \"1432-09-09\" \"1908-06-26\" #>  #> $b[[2]] #> [1] \"'Z]655Iw\"  \"[5+)(\\\"tO\" #>  #> $b[[3]] #>  [1] \"2735-03-20 00:35:13 UTC\" \"193-03-22 04:16:12 UTC\"  #>  [3] \"445-12-02 19:17:35 UTC\"  \"350-06-22 10:51:16 UTC\"  #>  [5] \"369-09-16 13:31:45 UTC\"  \"1821-08-24 14:52:45 UTC\" #>  [7] \"388-12-30 02:19:02 UTC\"  \"1040-09-18 01:13:42 UTC\" #>  [9] \"1778-03-10 14:33:49 UTC\" \"2860-07-02 01:57:44 UTC\" #>  #> $b[[4]] #> [1] ~i])N0:h/ ~Eu       5l!l<)    ZN:CT1    ~yX5=j    3*nU3_)@  #> Levels: ~i])N0:h/ ~Eu 5l!l<) ZN:CT1 ~yX5=j 3*nU3_)@ #>  #> $b[[5]] #> [1] \"W8\"       \"*\"        \"4?+y3O~B\" \"G>UW\"     \"4=Q-&\"    \"kr\"       #>  #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1]  7854 -5911 -5356 -7984     0 #>  #> [[2]] #> [1] 7399    0 1353 #>  #> [[3]] #>  [1]  1559 -3034 -7664 -9291 -6038     0 -2997 -5118     0  3799 #>  #> [[4]] #> [1]  9641   978 -5761 #>  #> [[5]] #> [1]  3857 -4784  -713 #>  #> [[6]] #> [1] -6093 -2873  2912  1076  9590 #>  #> [[7]] #> [1]     0  2875  6134  6904 -2947 #>  #> [[8]] #> [1]     0 -4204     0  -313 -7090 -2262 #>  #> [[9]] #> [1] -1820  6872   -57  2600 #>  #> [[10]] #> [1] -4035     0 -7071  7371  9220 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1]  TRUE FALSE logical_(len = 10L, any_na = TRUE) |> show_example() #>  [1] FALSE FALSE FALSE  TRUE FALSE    NA FALSE FALSE FALSE  TRUE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  numeric_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_positive(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_negative(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1]  4314 -9702 -4056 -7864   687  6957 -8619 -7101 numeric_(big_num = TRUE) |> show_example() #> [1]  4.412764e+307 -5.665145e+307 -4.809797e+307 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1] 5 0 numeric_(len = 10L, any_na = TRUE) |> show_example() #>  [1] -9549     0    NA    NA -7325     0  3727  1479    NA    NA"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1] \":KEttq(<\" \"0f?jT@\"   \"m|\"       \",5R,Se\"   one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), any_na = FALSE)  posixct_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  posixct_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  posixct_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"1699-11-05 07:10:07 UTC\" \"476-08-09 23:56:51 UTC\"  #> [3] \"153-01-13 10:10:12 UTC\"  posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-10-03 07:36:54 UTC\" \"2020-01-02 16:55:17 UTC\" #> [3] \"2020-11-15 11:32:35 UTC\" \"2020-03-18 10:53:53 UTC\" #> [5] \"2020-09-29 09:12:20 UTC\" \"2020-07-25 10:02:32 UTC\" #> [7] \"2020-11-09 16:31:44 UTC\" posixct_(len = 10L, any_na = TRUE) |> show_example() #>  [1] \"2704-07-14 17:44:43 UTC\" \"875-08-09 08:56:14 UTC\"  #>  [3] \"675-07-09 16:17:31 UTC\"  \"2237-08-20 09:47:05 UTC\" #>  [5] \"1123-11-14 20:05:37 UTC\" \"2202-12-06 20:18:58 UTC\" #>  [7] NA                        \"2271-01-26 12:15:01 UTC\" #>  [9] \"1955-04-12 16:27:59 UTC\" NA"},{"path":"/reference/repeat_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly test properties of a function — repeat_test","title":"Repeatedly test properties of a function — repeat_test","text":"Repeatedly test properties function","code":""},{"path":"/reference/repeat_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(property, tests = getOption(\"quickcheck.tests\", 100L))"},{"path":"/reference/repeat_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly test properties of a function — repeat_test","text":"property anonymous function arguments includes expectation. tests number tests run.","code":""},{"path":"/reference/repeat_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly test properties of a function — repeat_test","text":"testthat expectation object.","code":""},{"path":"/reference/repeat_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(   property = \\() {     num <- stats::runif(1, min = 0, max = 10)     testthat::expect_true(num >= 0 && num <= 10)   } )"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1] FALSE  TRUE FALSE  TRUE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 4 × 1 #>       a #>   <int> #> 1 -8171 #> 2 -4831 #> 3 -8418 #> 4  4949 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b           #>   <int> <chr>       #> 1 -1427 \"gr911Q\"    #> 2 -9677 \"X'sA?\\\\j\"  #> 3 -9228 \"l&!%O7: p\" #> 4  3031 \"ao9CSRZCC\" #> 5 -4125 \"c~4<,g[0$\""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 2 × 1 #>   ...1  #>   <lgl> #> 1 TRUE  #> 2 TRUE  tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>    ...1            ...2      ...3                ...4       ...5            #>    <time>          <fct>     <dttm>              <fct>      <time>          #>  1 12:23:25.315693 \"S\"       1942-09-20 05:59:42 \"7;,$^\"    00:04:29.557357 #>  2 18:24:59.863559 \"Tr2Ap\"   1401-04-12 06:49:39 \"m\"        00:30:11.509742 #>  3 04:29:59.485650 \"oi\"      2092-07-04 06:00:31 \"{%8\"      18:53:28.636524 #>  4 12:48:49.004438 \"tsH\"     2221-04-11 08:58:34 \"mX-\"      22:09:35.164374 #>  5 23:15:26.393790 \"o4am~\"   1068-01-19 23:33:35 \" {4AL#*\"  03:18:42.719643 #>  6 14:20:16.788222 \"+ZI/\"    1511-02-27 10:41:49 \"!\"        05:57:41.509582 #>  7 19:53:05.899173 \"zH6P\\\\\"  1154-07-02 12:35:34 \";\"        23:40:36.116750 #>  8 05:07:34.130930 \"itGe>V\"  2777-10-31 18:03:09 \"hom$!dx\"  00:06:21.377645 #>  9 10:00:12.710536 \"pC\"      2666-05-10 12:56:09 \"zxyqPb&Q\" 00:24:49.631146 #> 10 06:42:24.942544 \"rB=f+E)\" 1201-03-09 20:05:15 \"Txz\"      15:50:15.626988"},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
