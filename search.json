[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Examples.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing +","title":"Examples","text":"","code":"test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1L),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     c = numeric_(len = 1L),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           })"},{"path":"/articles/Examples.html","id":"testing-baserev","dir":"Articles","previous_headings":"","what":"Testing base::rev","title":"Examples","text":"","code":"test_that(\"reverse of reverse is identity\", {   for_all(     a = any_vector(len = c(1L, 10L)),     property = \\(a) a |> rev() |> rev() |> expect_equal(a)   ) })  test_that(\"reverse of concatenation is flipped concatenation of reversed\", {   for_all(     a = integer_(len = c(1L, 10L)),     b = integer_(len = c(1L, 10L)),     property = \\(a, b) rev(c(a, b)) |> expect_equal(c(rev(b), rev(a)))   ) })"},{"path":"/articles/Examples.html","id":"testing-stringrstr_c","dir":"Articles","previous_headings":"","what":"Testing stringr::str_c","title":"Examples","text":"","code":"test_that(\"str_c does nothing with a single input string\", {   for_all(     a = character_(len = 1L),     property = \\(a) str_c(a) |> expect_equal(a)   ) })  test_that(\"str_c returns a single string with multiple input strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     c = character_(len = 1L),     property = \\(a, b, c) str_c(a, b, c) |> length() |> expect_equal(1L)   ) })  test_that(\"concatenation of strings always contains the original strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     property = \\(a, b) {       str_c(a, b) |> str_detect(fixed(a)) |> expect_true()       str_c(a, b) |> str_detect(fixed(b)) |> expect_true()     }   ) })"},{"path":"/articles/Examples.html","id":"testing-dplyrdistinct","dir":"Articles","previous_headings":"","what":"Testing dplyr::distinct","title":"Examples","text":"","code":"test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = \\(a) expect_equal(a, a + 0)   )           }) #> Test passed 🌈  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = \\(a, b) expect_equal(a + b, b + a)   )           }) #> Test passed 😸  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) #> Test passed 😸 library(dplyr, warn.conflicts = FALSE)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) }) #> Test passed 😀  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) }) #> Test passed 🌈  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) }) #> Test passed 😸"},{"path":"/index.html","id":"quickcheck-generators","dir":"","previous_headings":"","what":"Quickcheck generators","title":"Property Based Testing","text":"Many generators provided quickcheck. examples.","code":""},{"path":"/index.html","id":"atomic-vectors","dir":"","previous_headings":"Quickcheck generators","what":"Atomic vectors","title":"Property Based Testing","text":"","code":"integer_(len = 10) |> show_example() #>  [1] -9443 -9238 -3114  6117  8084  6281 -1609 -8123  9167 -4998 character_alphanumeric(len = 10) |> show_example() #>  [1] \"H\"         \"d18\"       \"2moKXgiaA\" \"l\"         \"apJIkZ4\"   \"xQ\"        #>  [7] \"IxWbgGPl\"  \"U4VoE\"     \"feow\"      \"nyyjpbBlm\" posixct_(len = 10, frac_na = 0.5) |> show_example()  #>  [1] \"2174-04-30 10:34:22 PDT\" \"0990-04-16 13:38:43 LMT\" #>  [3] NA                        NA                        #>  [5] NA                        \"1635-05-06 17:06:07 LMT\" #>  [7] NA                        \"1326-01-19 03:38:54 LMT\" #>  [9] NA                        NA"},{"path":"/index.html","id":"lists","dir":"","previous_headings":"Quickcheck generators","what":"Lists","title":"Property Based Testing","text":"","code":"list_(a = constant(NULL), b = any_undefined()) |> show_example() #> $a #> NULL #>  #> $b #> [1] NA flat_list_of(logical_(), len = 3) |> show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] TRUE"},{"path":"/index.html","id":"tibbles","dir":"","previous_headings":"Quickcheck generators","what":"Tibbles","title":"Property Based Testing","text":"","code":"tibble_(a = date_(), b = hms_(), rows = 5) |> show_example() #> # A tibble: 5 x 2 #>   a          b               #>   <date>     <time>          #> 1 1754-10-12 00:11:21.388116 #> 2 1043-05-24 22:48:47.926494 #> 3 1066-05-18 18:18:56.531533 #> 4 2195-01-13 21:31:59.337200 #> 5 2613-10-17 16:37:56.068528 tibble_of(double_bounded(-10, 10), rows = 3, cols = 3) |> show_example() #> # A tibble: 3 x 3 #>    ...1   ...2  ...3 #>   <dbl>  <dbl> <dbl> #> 1 -1.63 -5.73   8.37 #> 2 -6.92 -6.70   6.69 #> 3 -2.11  0.487  3.66 any_tibble(rows = 3, cols = 3) |> show_example() #> # A tibble: 3 x 3 #>   ...1            ...2      ...3      #>   <time>          <list>    <list>    #> 1 00:00:56.564217 <dbl [1]> <lgl [1]> #> 2 02:29:51.265953 <dbl [1]> <lgl [1]> #> 3 13:02:05.884475 <dbl [1]> <lgl [1]>"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used wrapping from_hedgehog. hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error: quickcheck generator can also converted hedgehog generator can used hedgehog functions.","code":"library(hedgehog)  is_even <-    \\(a) a %% 2 == 0  gen_powers_of_two <-    gen.element(1:10) |> gen.with(\\(a) 2 ^ a)  test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) |> expect_true()   ) }) #> Test passed 🥇 test_that(\"powers of two and integers are both numeric values\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     b = integer_(),     property = \\(a, b) c(a, b) |> is.numeric() |> expect_true()   ) }) #> Test passed 🥇 test_that(\"composing hedgehog with quickcheck generators fails\", {   tibble_of(from_hedgehog(gen_powers_of_two)) |> expect_error() }) #> Test passed 🥳 gen_powers_of_two <-    integer_bounded(1L, 10L, len = 1L) |>      as_hedgehog() |>      gen.with(\\(a) 2 ^ a)   test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) |> expect_true()   ) }) #> Test passed 🥇"},{"path":"/index.html","id":"fuzz-tests","dir":"","previous_headings":"","what":"Fuzz tests","title":"Property Based Testing","text":"Fuzz testing special case property based testing property tested code doesn’t fail range inputs. example fuzz testing quickcheck. Let’s say want test purrr::map function won’t fail vector input.","code":"test_that(\"map won't fail with any vector as input\", {   for_all(     a = any_vector(),     property = \\(a) purrr::map(a, identity) |> expect_silent()   ) }) #> Test passed 🌈"},{"path":"/index.html","id":"repeat-tests","dir":"","previous_headings":"","what":"Repeat tests","title":"Property Based Testing","text":"Repeat tests can used repeatedly test property holds true many calls function. different regular property based tests don’t require generators. function repeat_test call function many times ensure expectation passes cases. kind test can useful testing functions randomness.","code":"test_that(\"runif generates random numbers between a min and max value\", {   repeat_test(     property = \\() {       random_number <- runif(1, min = 0, max = 10)       expect_true(random_number >= 0 && random_number <= 10)     }   ) }) #> Test passed 🥇"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1]  TRUE FALSE FALSE any_atomic(len = 10L, frac_na = 0.5) |> show_example() #> 15:47:09.770400 #>              NA #>              NA #> 22:48:23.170769 #> 14:12:13.547130 #>              NA #>              NA #>              NA #>              NA #> 01:31:32.108434"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat homogeneous list generator — any_flat_homogeneous_list","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic scalar type.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() |> show_example() #> [[1]] #> [1] \"]8I\" #>  #> [[2]] #> [1] \"L#2O\" #>  any_flat_homogeneous_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] /Q*6 #> Levels: /Q*6 #>  #> [[2]] #> [1] aRT-#%9y #> Levels: aRT-#%9y #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] G9^iRCs] #> Levels: G9^iRCs] #>  #> [[6]] #> [1] y\",[#5 #> Levels: y\",[#5 #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] ~SC05vF #> Levels: ~SC05vF #>  #> [[9]] #> [1] C,=Xx #> Levels: C,=Xx #>  #> [[10]] #> [1] $Z1AL2Z* #> Levels: $Z1AL2Z* #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> 03:35:07.07169 #>  #> [[2]] #> [1] \"1040-05-08\" #>  #> [[3]] #> [1] 688404013 #>  #> [[4]] #> [1] \"u\" #>  #> [[5]] #> 20:32:49.951607 #>  #> [[6]] #> 00:58:09.418618 #>  #> [[7]] #> [1] b+!`3q #> Levels: b+!`3q #>  #> [[8]] #> [1] TRUE #>  any_flat_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] 705387673 #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] \"|w9^FO^.\" #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] \"2452-03-14 22:53:06 UTC\" #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [[1]]$a #> [1] \"\\\\}L{\" #>  #> [[1]]$b #> [1] \"564-08-08 23:39:04 UTC\" #>  #>  #> [[2]] #> [[2]]$a #> [1] F         4$165     ]v0zf/7;$ 7u*^}LWE} 0DkR[) o_ R         kC*       #> Levels: F 4$165 ]v0zf/7;$ 7u*^}LWE} 0DkR[) o_ R kC* #>  #> [[2]]$b #> [1] \"y128\" \"=\"    \"E$%$\" #>  #>  #> [[3]] #> [[3]]$a #> 12:54:50.694649 #>  #> [[3]]$b #> [1] -3719     0 -6153 -5045  4234   371 -3804  8249 -3480 #>  #>  any_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] -779514666 #>  #> [[2]] #> [1] -32935981 #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] -465842373 #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] -72730056 #>  #> [[9]] #> [1] NA #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 9 × 5 #>    ...1 ...2       ...3  ...4         ...5 #>   <int> <list>     <lgl> <list>      <int> #> 1  6925 <dttm [1]> FALSE <fct [9]>   -8974 #> 2  9513 <dttm [1]> FALSE <time [10]>     0 #> 3  7485 <dttm [1]> TRUE  <int [1]>    8561 #> 4 -6169 <dttm [1]> FALSE <chr [5]>   -7728 #> 5  3236 <dttm [1]> TRUE  <date [2]>   -360 #> 6  7215 <dttm [1]> FALSE <lgl [4]>       0 #> 7   334 <dttm [1]> TRUE  <dttm [8]>      0 #> 8  8096 <dttm [1]> TRUE  <lgl [10]>   6310 #> 9 -3768 <dttm [1]> TRUE  <chr [2]>       0 any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 4 #>    ...1                ...2                       ...3 ...4       #>    <dttm>              <dttm>                    <dbl> <date>     #>  1 1854-03-18 03:33:40 2043-05-22 03:47:22  895492233. 2203-05-12 #>  2 1353-09-02 00:43:04 568-03-11 15:36:37   612191975. 2006-07-15 #>  3 1495-11-17 04:44:04 2802-08-17 07:08:43          0  2138-02-16 #>  4 1608-09-17 20:12:33 2897-05-24 17:06:12 -889012890. 2890-04-01 #>  5 482-06-02 19:41:54  1987-06-08 16:39:35 -891681704. 2499-12-11 #>  6 2122-05-08 10:58:58 537-08-31 07:04:07           0  1344-06-07 #>  7 962-07-23 10:38:00  2560-01-25 16:04:31 -805017660. 1490-09-23 #>  8 2908-12-29 20:32:50 1764-06-24 14:36:01 -285345415. 2168-09-27 #>  9 1530-12-19 03:42:06 561-11-13 22:18:33   -16350517. 2811-04-17 #> 10 2322-04-27 22:33:53 1057-02-28 03:07:46  566202283. 2753-07-15 any_tibble(cols = 5L, frac_na = 0.5) |> show_example() #> # A tibble: 2 × 5 #>   ...1       ...2  ...3 ...4       ...5      #>   <list>    <dbl> <int> <list>     <list>    #> 1 <dbl [1]>    NA     1 <date [2]> <lgl [6]> #> 2 <dbl [1]>    NA    NA <fct [2]>  <chr [7]>"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Undefined value generator — any_undefined","title":"Undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Undefined value generator — any_undefined","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined() |> show_example() #> [1] NA"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [1]  9977  1666 -3370     0 -6576 any_vector(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] \"1109-11-01\" #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> 09:24:20.716398 #>  #> [[4]] #> [1] 1807 #>  #> [[5]] #> 10:02:27.845797 #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] FALSE #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] -662521070 #>  #> [[10]] #> [1] \"2732-06-11 05:31:07 UTC\" #>"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, tibbles, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything()"},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator generator","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() |> show_example() #> [1] \"2078-02-21\" \"2521-01-02\" \"1686-06-23\" \"2839-01-09\" \"2075-07-04\" #> [6] \"2653-07-27\""},{"path":"/reference/anything_defined.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator with no undefined values — anything_defined","title":"Any R object generator with no undefined values — anything_defined","text":"Generate R object undefined value contain undefined values. actually generate possible object, just common ones, namely atomic vectors, lists, tibbles. None objects created include undefined values like NA, NULL, Inf, NaN, empty vectors tibbles.","code":""},{"path":"/reference/anything_defined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator with no undefined values — anything_defined","text":"","code":"anything_defined()"},{"path":"/reference/anything_defined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator with no undefined values — anything_defined","text":"quickcheck_generator generator","code":""},{"path":"/reference/anything_defined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator with no undefined values — anything_defined","text":"","code":"anything_defined() |> show_example() #> [[1]] #> [1] \"&h%v$`[\" #>  #> [[2]] #> [1] \"#vl,\" #>  #> [[3]] #> [1] TRUE #>  #> [[4]] #> [1] ,ZA3i#- #> Levels: ,ZA3i#- #>"},{"path":"/reference/as_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"Convert quickcheck generator hedgehog generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"as_hedgehog(generator)"},{"path":"/reference/as_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"generator quickcheck_generator generator","code":""},{"path":"/reference/as_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) |>     as_hedgehog() |>     hedgehog::gen.with(\\(a) 2 ^ a) for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), frac_na = 0, frac_empty = 0)  character_letter(len = c(1L, 10L), frac_na = 0, frac_empty = 0)  character_word(len = c(1L, 10L), frac_na = 0, frac_empty = 0)  character_alphanumeric(len = c(1L, 10L), frac_na = 0, frac_empty = 0)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_empty approximate fraction empty character values included vector. fraction 0, default, include empty values. fraction 0.5 include around 50% empty values.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"<5iRi\" character_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"6UE\"      NA         \"d)Gt9r:-\" NA         \")\"        NA         #>  [7] NA         NA         \"0,[&~E\"   NA         character_(len = 10L, frac_empty = 0.5) |> show_example() #>  [1] \"%&qvph\"   \"\"         \"#\\\\LPK\"   \"\"         \"YNz3'\"    \"\"         #>  [7] \"\"         \"@ZXc48ja\" \"\"         \"\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), frac_na = 0)  date_bounded(left, right, len = c(1L, 10L), frac_na = 0)  date_left_bounded(left, len = c(1L, 10L), frac_na = 0)  date_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"2652-05-19\" \"1196-06-22\" \"2890-04-11\" \"2509-06-08\" \"1853-05-04\" #> [6] \"2681-06-10\" \"2126-05-02\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-05\" \"2020-01-07\" \"2020-01-03\" \"2020-01-10\" \"2020-01-02\" date_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA           NA           NA           \"2369-08-06\" \"1814-05-17\" #>  [6] NA           NA           \"2133-03-10\" NA           NA"},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0 )  double_left_bounded(   left,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_nan approximate fraction NaN values included vector. fraction 0, default, include NaN values. fraction 0.5 include around 50% NaN values. frac_inf approximate fraction Inf -Inf values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1]   93188767 -989632044  957202125 -325433822 -435232204 double_(big_dbl = TRUE) |> show_example() #> [1] -7.199576e+307 double_bounded(left = -5, right = 5) |> show_example() #> [1] -4.478027 -1.033772  4.957726 -2.766600  1.053060 -2.332207  4.200475 #> [8] -1.454217 -2.006827 double_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] -761269402         NA   90792650  235016907         NA         NA #>  [7]         NA         NA  418769287  953293582 double_(len = 10L, frac_nan = 0.2, frac_inf = 0.2) |> show_example() #>  [1]        Inf  943291548 -720750658  990517983 -388490140  -57308885 #>  [7]  484831033  815447366 -626811601 -993574941"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal length vector generator — equal_length","title":"Equal length vector generator — equal_length","text":"Generates equal length vectors contained list.","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(..., len = c(1L, 10L))"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal length vector generator — equal_length","text":"... set vector generators. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal length vector generator — equal_length","text":"quickcheck_generator generator","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(integer_(), double_()) |> show_example() #> [[1]] #> [1] -6435 -2932 -1729 #>  #> [[2]] #> [1] -574473703          0  901663583 #>  equal_length(a = logical_(), b = character_(), len = 5L) |> show_example() #> $a #> [1] FALSE FALSE  TRUE FALSE  TRUE #>  #> $b #> [1] \"E|>D\"      \"b @;u@Q?w\" \"\\\\\"        \"r&p@T\"     \"Zv@2,K0gv\" #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] &Wlxq3eDk sxdhW(B=X lxgrMH$Mw Sir       _y*/y^8QV F2]SAKb+C #> Levels: &Wlxq3eDk sxdhW(B=X lxgrMH$Mw Sir _y*/y^8QV F2]SAKb+C factor_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA NA  1  1  1 NA NA NA NA NA"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"generate flat lists values coming single input generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] -8448 #>  #> [[2]] #> [1] 0 #>  #> [[3]] #> [1] 4532 #>  #> [[4]] #> [1] -903 #>  #> [[5]] #> [1] 5378 #>  #> [[6]] #> [1] -5881 #>  #> [[7]] #> [1] -7047 #>  #> [[8]] #> [1] 323 #>  #> [[9]] #> [1] -7729 #>  #> [[10]] #> [1] 33 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen generator","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) |> hedgehog::gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), frac_na = 0)  hms_bounded(left, right, len = c(1L, 10L), frac_na = 0)  hms_left_bounded(left, len = c(1L, 10L), frac_na = 0)  hms_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 15:56:26.984727 #> 16:12:09.437264 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 06:27:31.522927 #> 06:12:07.799362 #> 02:28:48.426798 #> 05:52:57.980442 #> 02:01:29.755944 #> 10:38:08.106294 #> 04:56:29.834044 #> 06:59:28.278523 #> 11:39:09.041084 #> 05:34:13.142649 hms_(len = 10L, frac_na = 0.5) |> show_example() #>              NA #> 23:27:39.999888 #>              NA #> 08:50:05.756137 #>              NA #>              NA #>              NA #> 16:47:49.953605 #>              NA #> 02:26:15.000347"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), frac_na = 0)  integer_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_positive(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_negative(len = c(1L, 10L), frac_na = 0, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1] -946 4980 7352 integer_(big_int = TRUE) |> show_example() #> [1] -487442165  447634528  272468936 -558439428 integer_bounded(left = -5L, right = 5L) |> show_example() #>  [1] -2  1  5  0 -4  5 -4  5 -2  0 integer_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]     0    NA -2801    NA  5806  2326    NA -7088    NA    NA"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1] 4208    0 #>  #> [[2]] #> [1] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> $a[[1]] #>  [1] cr        [M^O5#O   ,[[z<dZ~q +-9de;)Ny 0AA       AfWC79Wc  {=hp      #>  [8] ;]0l%     ~=        e&NO9v8v  #> 10 Levels: cr [M^O5#O ,[[z<dZ~q +-9de;)Ny 0AA AfWC79Wc {=hp ;]0l% ... e&NO9v8v #>  #> $a[[2]] #> [1] \"1437-03-19\" \"2865-11-09\" #>  #> $a[[3]] #> [1] \"1810-04-07\" \"2633-12-28\" \"1959-11-23\" \"2595-01-22\" #>  #> $a[[4]] #> [1] \"Xp*oz0%SL\" \"%(\"        \"#<3quDRf\"  \"cL,>)\"     \" '\"        \"< >)_2v\"   #>  #> $a[[5]] #> [1] \"847-10-10 05:36:56 UTC\"  \"1234-08-28 12:24:57 UTC\" #>  #>  #> $b #> $b[[1]] #> 15:01:55.837132 #>  #> $b[[2]] #> 01:36:38.56798 #>  #> $b[[3]] #> 03:05:42.629443 #>  #> $b[[4]] #> 23:24:49.714189 #>  #> $b[[5]] #> 22:10:45.826259 #>  #> $b[[6]] #> 09:12:44.106151 #>  #> $b[[7]] #> 05:17:30.148177 #>  #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1]  6343  6712     0 -8117 -5817 -4890  9550  7954 #>  #> [[2]] #> [1] -9503     0  5202  8222 -9641  8701 -1451 -2751  6199 #>  #> [[3]] #> [1] -2633 -8679  7599 -2613  2191 #>  #> [[4]] #> [1]  4969 -9730  6247  5541  9592   247  1689 #>  #> [[5]] #> [1] -4983 -1556  8384  5767  9612  2872 -9319     0 #>  #> [[6]] #>  [1]  6612     0 -5039  6999 -8522     0 -9765 -1740  8149   -74 #>  #> [[7]] #> [1] 3519 #>  #> [[8]] #> [1] -364 5927 -462    0 #>  #> [[9]] #> [1]  7837  2018     0 -2084  2323 #>  #> [[10]] #> [1] 6738 9517 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE logical_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]    NA    NA    NA  TRUE    NA FALSE  TRUE    NA  TRUE    NA"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), frac_na = 0)  numeric_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_positive(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_negative(len = c(1L, 10L), frac_na = 0, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1] -597091279 -903586206  949835572 -172935450 -991757386  737028529 numeric_(big_num = TRUE) |> show_example() #> [1]  552329969  531183567  554298314 -506636654  590476902 2133161232  643712343 #> [8] 1801573618 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1] 0 numeric_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]         NA  289901975 -780693795         NA         NA -644405889 #>  [7]         NA         NA -132988392         NA"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1] \"7z-('8Z%=\" one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> [1] FALSE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), frac_na = 0)  posixct_bounded(left, right, len = c(1L, 10L), frac_na = 0)  posixct_left_bounded(left, len = c(1L, 10L), frac_na = 0)  posixct_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"258-12-13 07:35:20 UTC\"  \"1676-08-09 20:45:39 UTC\" #> [3] \"1010-09-02 13:47:11 UTC\" \"2450-11-28 05:22:38 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-12-02 08:18:10 UTC\" \"2020-03-26 17:42:39 UTC\" #> [3] \"2020-07-15 10:24:54 UTC\" \"2020-07-01 12:15:22 UTC\" #> [5] \"2020-01-11 10:30:54 UTC\" \"2020-01-23 19:15:13 UTC\" #> [7] \"2020-11-07 17:21:06 UTC\" \"2020-08-10 22:38:01 UTC\" posixct_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"374-03-31 16:30:22 UTC\"  \"1215-05-19 04:01:00 UTC\" #>  [3] \"664-11-21 22:58:43 UTC\"  NA                        #>  [5] \"2458-06-09 06:33:09 UTC\" NA                        #>  [7] NA                        \"982-04-06 10:37:50 UTC\"  #>  [9] NA                        \"1533-04-20 05:58:02 UTC\""},{"path":"/reference/repeat_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly test properties of a function — repeat_test","title":"Repeatedly test properties of a function — repeat_test","text":"Repeatedly test properties function","code":""},{"path":"/reference/repeat_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(property, tests = getOption(\"quickcheck.tests\", 100L))"},{"path":"/reference/repeat_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly test properties of a function — repeat_test","text":"property anonymous function arguments includes expectation. tests number tests run.","code":""},{"path":"/reference/repeat_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly test properties of a function — repeat_test","text":"testthat expectation object.","code":""},{"path":"/reference/repeat_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(   property = \\() {     num <- stats::runif(1, min = 0, max = 10)     testthat::expect_true(num >= 0 && num <= 10)   } )"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 1 × 1 #>       a #>   <int> #> 1  3607 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b           #>   <int> <chr>       #> 1 -9013 \"G3\"        #> 2 -1764 \"W[v\\\"?Eig\" #> 3 -5522 \" J?BtW\"    #> 4 -9535 \"5r`\"       #> 5  9896 \"`k-(9\""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 7 × 3 #>   ...1  ...2       ...3       #>   <lgl> <date>     <date>     #> 1 FALSE 2354-11-14 2022-12-07 #> 2 FALSE 1910-02-28 2095-01-25 #> 3 FALSE 1130-02-06 2560-01-21 #> 4 TRUE  1021-05-20 1480-05-30 #> 5 FALSE 2368-09-16 2471-12-09 #> 6 TRUE  1806-01-29 2822-04-05 #> 7 FALSE 1244-05-22 1005-03-02 tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>           ...1 ...2  ...3                ...4             ...5 #>          <dbl> <lgl> <dttm>              <time>          <int> #>  1 -582622219. FALSE 1110-03-26 17:04:25 11:52:00.607215  4785 #>  2 -586177371. FALSE 323-07-17 18:14:46  04:52:11.922445 -8700 #>  3  883424886. TRUE  638-05-16 01:14:49  19:40:11.970727 -1764 #>  4  807616400. TRUE  1178-03-08 05:40:14 03:29:48.267735 -8305 #>  5          0  TRUE  1637-05-12 21:27:00 09:34:10.271434 -2339 #>  6  430081524. TRUE  1498-01-28 16:09:12 08:44:45.869299  1130 #>  7  414263796. TRUE  1803-01-07 04:44:49 12:52:06.924007   802 #>  8  978260094. FALSE 1162-03-30 23:29:37 12:35:34.684023 -3478 #>  9 -405888064. TRUE  402-10-12 17:45:34  23:54:58.823288  2942 #> 10   99797282. FALSE 242-12-05 14:59:53  08:28:58.346097   715"},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
