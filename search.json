[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Examples.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing +","title":"Examples","text":"","code":"test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1L),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     c = numeric_(len = 1L),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           })"},{"path":"/articles/Examples.html","id":"testing-baserev","dir":"Articles","previous_headings":"","what":"Testing base::rev","title":"Examples","text":"","code":"test_that(\"reverse of reverse is identity\", {   for_all(     a = any_vector(len = c(1L, 10L)),     property = \\(a) a |> rev() |> rev() |> expect_equal(a)   ) })  test_that(\"reverse of concatenation is flipped concatenation of reversed\", {   for_all(     a = integer_(len = c(1L, 10L)),     b = integer_(len = c(1L, 10L)),     property = \\(a, b) rev(c(a, b)) |> expect_equal(c(rev(b), rev(a)))   ) })"},{"path":"/articles/Examples.html","id":"testing-stringrstr_c","dir":"Articles","previous_headings":"","what":"Testing stringr::str_c","title":"Examples","text":"","code":"test_that(\"str_c does nothing with a single input string\", {   for_all(     a = character_(len = 1L),     property = \\(a) str_c(a) |> expect_equal(a)   ) })  test_that(\"str_c returns a single string with multiple input strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     c = character_(len = 1L),     property = \\(a, b, c) str_c(a, b, c) |> length() |> expect_equal(1L)   ) })  test_that(\"concatenation of strings always contains the original strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     property = \\(a, b) {       str_c(a, b) |> str_detect(fixed(a)) |> expect_true()       str_c(a, b) |> str_detect(fixed(b)) |> expect_true()     }   ) })"},{"path":"/articles/Examples.html","id":"testing-dplyrdistinct","dir":"Articles","previous_headings":"","what":"Testing dplyr::distinct","title":"Examples","text":"","code":"test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) library(dplyr)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1]  979888622 -344363446 -932023821   65463237 -218045847 -632738792 any_atomic(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"6\"        \"u2}k\"     \"pbp`2*\"   \"iV{W\"     NA         \"|G8\"      #>  [7] \"<nuYVh@D\" \"R.K\"      NA         \"J<!Z\""},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> 03:08:24.156329 #>  #> [[2]] #> 07:21:14.835428 #>  #> [[3]] #> 13:37:11.15748 #>  #> [[4]] #> [1] e<;- #> Levels: e<;- #>  #> [[5]] #> [1] 51321649 #>  #> [[6]] #> [1] 9957 #>  #> [[7]] #> 17:06:45.479425 #>  #> [[8]] #> [1] J #> Levels: J #>  any_flat_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] \"1945-12-17 00:27:03 UTC\" #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] \"z\" #>  #> [[5]] #> [1] \"1135-09-09 13:59:13 UTC\" #>  #> [[6]] #> NA #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] FALSE #>  #> [[9]] #> [1] NA #>  #> [[10]] #> 08:13:51.836602 #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [[1]]$a #> [1] FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE #>  #> [[1]]$b #> [1] \"ku\"     \"^> nIW\" \"]Hi#p\"  \"D+\"     #>  #>  #> [[2]] #> [[2]]$a #> [1]  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE #>  #> [[2]]$b #> [1] \"2937-06-19\" \"1009-08-21\" \"2651-06-19\" \"2517-12-18\" \"1053-01-04\" #> [6] \"2882-06-23\" \"1035-11-30\" \"1332-12-31\" #>  #>  #> [[3]] #> [[3]]$a #>  [1] \"331-10-24 10:57:53 UTC\"  \"2477-12-15 08:47:32 UTC\" #>  [3] \"2296-05-03 02:43:19 UTC\" \"2792-07-21 09:18:27 UTC\" #>  [5] \"1429-03-12 03:55:44 UTC\" \"121-08-05 07:44:58 UTC\"  #>  [7] \"829-08-12 00:08:28 UTC\"  \"2365-01-28 02:42:05 UTC\" #>  [9] \"1231-10-26 16:47:57 UTC\" \"2198-12-13 19:04:27 UTC\" #>  #> [[3]]$b #> [1] \"# yFL\"     \"!U3z}P.=y\" \"3\"         \")JeW\"      \"JE3]&]\\\\\"  #>  #>  #> [[4]] #> [[4]]$a #> 20:58:12.542201 #> 21:01:34.398375 #> 09:31:02.551672 #>  #> [[4]]$b #> [1] \"!uM]#D\"   \"/pgCvn\"   \"TuP'*Kus\" \"z\"        \"|K;3P`\"   #>  #>  #> [[5]] #> [[5]]$a #> [1] 827605202         0 643071221 783131008         0 #>  #> [[5]]$b #> 15:43:42.089260 #> 10:41:30.156877 #> 21:50:58.099697 #> 21:59:32.738726 #> 03:56:07.776733 #>  #>  #> [[6]] #> [[6]]$a #> [1] \"1769-05-03 23:03:17 UTC\" \"113-12-09 17:08:31 UTC\"  #> [3] \"2856-12-24 19:27:37 UTC\" \"738-06-22 21:38:41 UTC\"  #> [5] \"834-01-07 14:18:26 UTC\"  \"176-01-11 05:53:15 UTC\"  #>  #> [[6]]$b #> 23:05:16.788562 #> 23:36:02.449283 #> 19:18:19.001172 #> 06:18:38.841659 #> 15:56:28.754783 #> 08:41:43.930247 #> 15:49:45.010449 #> 14:00:28.235422 #> 19:46:36.760384 #> 15:20:42.469943 #>  #>  #> [[7]] #> [[7]]$a #> [1]  2247  2424 -7000 #>  #> [[7]]$b #>  [1] \"2032-09-28\" \"1865-05-24\" \"2228-04-19\" \"2802-03-18\" \"1004-03-23\" #>  [6] \"1898-09-12\" \"1286-03-14\" \"2915-02-08\" \"1967-12-12\" \"2012-06-12\" #>  #>  #> [[8]] #> [[8]]$a #> [1] ECL       |ilY[YD   u         Mj o      E         H> k8$*c  .0b.]     #> [8] 2,tnYZ84, Mj o      #> Levels: ECL |ilY[YD u Mj o E H> k8$*c .0b.] 2,tnYZ84, #>  #> [[8]]$b #> [1] AI  o   JZ9 #> Levels: AI o JZ9 #>  #>  #> [[9]] #> [[9]]$a #> [1]  TRUE  TRUE FALSE FALSE FALSE #>  #> [[9]]$b #> [1] -5837 -8954  5697 -1785     0 #>  #>  any_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> 12:55:28.672096 #>  #> [[2]] #> [1]     NA     NA 201339     NA #>  #> [[3]] #> [1]    0   NA 6555   NA   NA #>  #> [[4]] #> [1] -6239  -463 -5673 -6820 #>  #> [[5]] #> [1]  1  1 NA #>  #> [[6]] #> [1]    NA  4410  4411    NA  3462    NA -3535 -1391    NA #>  #> [[7]] #> [1]    0   NA   NA    0 -401   NA    0 #>  #> [[8]] #> [1]         NA -449023090 #>  #> [[9]] #> [1]      NA -254864 -318038  216451  373844  286467  173978      NA #>  #> [[10]] #> [1] NA  1  1 NA NA  1 #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 6 × 6 #>   ...1        ...2             ...3       ...4             ...5       ...6  #>   <list>      <list>           <list>     <list>           <list>     <lgl> #> 1 <date [6]>  <named list [2]> <int [1]>  <named list [2]> <chr [1]>  FALSE #> 2 <fct [2]>   <named list [2]> <lgl [1]>  <named list [2]> <chr [1]>  TRUE  #> 3 <dttm [10]> <named list [2]> <int [1]>  <named list [2]> <dttm [1]> TRUE  #> 4 <dbl [6]>   <named list [2]> <time [1]> <named list [2]> <date [1]> TRUE  #> 5 <dttm [5]>  <named list [2]> <dbl [1]>  <named list [2]> <lgl [1]>  TRUE  #> 6 <dbl [7]>   <named list [2]> <date [1]> <named list [2]> <dbl [1]>  TRUE  any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 8 #>    ...1       ...2       ...3        ...4                ...5  ...6  ...7  ...8  #>    <list>     <date>     <chr>       <dttm>              <lis> <fct> <fct> <lis> #>  1 <chr [1]>  2621-12-03 \"g }.<\"     2221-12-10 18:27:05 <nam… \"@;]… \"r,\"  <int… #>  2 <date [1]> 1460-11-08 \"d?8?\"      2798-12-26 06:23:38 <nam… \"z\"   \"i*0… <int… #>  3 <dttm [1]> 1826-01-21 \"DDy(o@EGg\" 2648-12-25 14:47:10 <nam… \"v\\\"… \"S)~… <int… #>  4 <lgl [1]>  2107-09-15 \"$E\\\"H\"     1283-07-10 05:05:16 <nam… \"ai6… \"75x\" <dtt… #>  5 <chr [1]>  1234-08-28 \"'+)D@i:M[\" 2762-12-15 22:57:55 <nam… \"fdV… \"&M9… <dat… #>  6 <dttm [1]> 2816-02-16 \"*p~^F\"     2506-11-07 04:28:53 <nam… \"ulV… \"Td=… <int… #>  7 <dttm [1]> 1359-11-10 \"vcSy\"      2050-03-29 02:03:54 <nam… \"<C_… \"p,r\" <dbl… #>  8 <dttm [1]> 2165-11-11 \"'w-S0hrq=\" 312-07-09 22:41:45  <nam… \"62>… \"*:\"  <lgl… #>  9 <chr [1]>  2352-05-03 \"q`T\"       788-07-25 08:28:56  <nam… \"D+2\" \":id… <int… #> 10 <date [1]> 2075-03-02 \"<ZG~g!q\"   2360-12-07 22:13:25 <nam… \":-T… \"L=t… <dat… any_tibble(cols = 5L, frac_na = 0.5) |> show_example() #> # A tibble: 9 × 5 #>   ...1       ...2  ...3        ...4 ...5       #>   <list>     <lgl> <list>     <int> <list>     #> 1 <dbl [6]>  TRUE  <dbl [9]>      1 <dbl [1]>  #> 2 <chr [2]>  NA    <chr [8]>      1 <dbl [1]>  #> 3 <dttm [6]> NA    <fct [2]>      1 <dttm [1]> #> 4 <lgl [9]>  NA    <dbl [7]>      1 <int [1]>  #> 5 <dbl [8]>  NA    <lgl [1]>     NA <lgl [1]>  #> 6 <time [9]> NA    <time [1]>     1 <time [1]> #> 7 <dttm [1]> TRUE  <int [3]>     NA <fct [1]>  #> 8 <chr [4]>  NA    <lgl [7]>      1 <chr [1]>  #> 9 <int [7]>  FALSE <int [9]>     NA <chr [1]>"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [1]  748875674 -914033446 -394487930  750735369 -234622595  585989608 -107671050 any_vector(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #>  [1]         NA         NA -717243456         NA -723264902 -532899057 #>  [7]   65765432  730962668         NA  408198386 #>  #> [[2]] #> NA #>  #> [[3]] #> [1] NA  \"e\" NA  NA  NA  NA  #>  #> [[4]] #>              NA #>              NA #>              NA #> 21:26:48.159528 #> 13:51:32.814247 #> 21:28:59.790845 #> 16:13:10.993108 #>              NA #>              NA #>  #> [[5]] #> [1] NA #>  #> [[6]] #>              NA #> 02:02:07.214959 #> 06:12:12.640077 #>              NA #> 08:39:38.857318 #> 16:38:04.974754 #>  #> [[7]] #> [1] \"<\"     NA      \"'R!\\\"\" NA      \"E8KZb\" NA      NA      #>  #> [[8]] #> [1]           NA           NA -47850811848 -37752805600 #>  #> [[9]] #> [1] NA  1 NA  1  1 NA #>  #> [[10]] #>              NA #> 06:38:27.071391 #> 22:53:03.842401 #> 16:03:05.932924 #>              NA #>              NA #>              NA #> 00:51:07.743428 #>              NA #>"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), frac_na = 0, frac_empty = 0)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_empty approximate fraction empty character values included vector. fraction 0, default, include empty values. fraction 0.5 include around 50% empty values.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"\\\"<!o )#|:\" \" \"          \"1\"          \"eyx@3+$@\"   \"S4+GLNc'\"   #> [6] \"#\"          character_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA         \"ZdN$-0o\"  \"Q&/\"      \"c1i(D/\"   \"\\\\t&AF1+\" NA         #>  [7] NA         \"usj|(CLk\" \"]?f?S\"    NA         character_(len = 10L, frac_empty = 0.5) |> show_example() #>  [1] \"\"           \"\"           \"\"           \"\"           \"*\"          #>  [6] \"?qV121o'x\"  \"\\\"#;m44Oc\"  \"]uEO-/\\\\!]\" \"*\"          \"\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), frac_na = 0)  date_bounded(left, right, len = c(1L, 10L), frac_na = 0)  date_left_bounded(left, len = c(1L, 10L), frac_na = 0)  date_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"2359-10-29\" \"2181-11-21\" \"1937-02-10\" \"2670-08-12\" \"1975-09-02\" #> [6] \"1262-07-21\" \"2113-10-04\" \"1072-03-06\" \"1125-10-21\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-03\" \"2020-01-03\" date_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]      NA      NA  -80221      NA -116098      NA      NA  245558      NA #> [10] -303125"},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0 )  double_left_bounded(   left,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_nan approximate fraction NaN values included vector. fraction 0, default, include NaN values. fraction 0.5 include around 50% NaN values. frac_inf approximate fraction Inf -Inf values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1]  767879301 -405433005  710290196  242281373 -801123289 double_(big_dbl = TRUE) |> show_example() #> [1]   0.000000e+00  5.806205e+307 -4.369727e+307 -7.036091e+306 double_bounded(left = -5, right = 5) |> show_example() #> [1] -2.078058  3.941250 -1.297382 double_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]         NA         NA -939089111 -976438427 -453074316 -102435629 #>  [7]  215266182         NA          0 -502386014 double_(len = 10L, frac_nan = 0.2, frac_inf = 0.2) |> show_example() #>  [1] -468180564 -469447777  296752923 -960637699 -829592228  403700199 #>  [7]  369934891        NaN -706214900   55639162"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] >-lH]fHJ. %DT       '.fRo     A_5+Y     mNUA4T$   za7b      #> Levels: >-lH]fHJ. %DT '.fRo A_5+Y mNUA4T$ za7b factor_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA NA NA  1  1  1 NA  1  1 NA"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   size = getOption(\"quickcheck.size\", 50L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. size maximum length generators. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), frac_na = 0)  hms_bounded(left, right, len = c(1L, 10L), frac_na = 0)  hms_left_bounded(left, len = c(1L, 10L), frac_na = 0)  hms_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 21:59:02.464246 #> 21:00:49.385481 #> 22:03:08.683195 #> 03:39:07.245620 #> 21:41:15.993941 #> 04:10:41.092888 #> 02:08:10.988457 #> 09:15:57.868036 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 10:00:05.569480 #> 10:37:04.635003 hms_(len = 10L, frac_na = 0.5) |> show_example() #>              NA #> 13:44:20.554224 #>              NA #> 07:27:28.303069 #> 23:00:59.552299 #> 06:45:23.888969 #>              NA #> 17:27:15.135630 #> 21:42:45.431186 #> 16:38:48.951596"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), frac_na = 0)  integer_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_positive(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_negative(len = c(1L, 10L), frac_na = 0, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1] -2366 -7130 -4877  6318  3717 -1034  7899  -452  6253 integer_(big_int = TRUE) |> show_example() #> [1]  2130545231 -2074512957  1016623953  -828725186           0   -89265893 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1] -2  0 integer_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]    NA    NA     0  8962 -1726    NA    NA  9728     0    NA"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1]  6135 -2048  -845 -9783     0  7859  -483  9089 #>  #> [[2]] #>  [1] FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #>  [1] \"1681-06-12\" \"2910-12-18\" \"2678-09-13\" \"1465-03-25\" \"2670-04-21\" #>  [6] \"1967-07-06\" \"1236-12-04\" \"2726-06-16\" \"2648-08-07\" \"1510-12-14\" #>  #> $b #> $b[[1]] #> [1]  9476 -4200     0  7879  4599 -9565 -1916  9518 #>  #> $b[[2]] #> [1] \"b\"       \"TOJyaNv\" \".&\"      \",aL'n`\"  #>  #> $b[[3]] #> [1]  628756281 -979747315          0  700762495  222339047 -209368765  867448352 #>  #> $b[[4]] #> [1] \"GC|\"      \"aZ^Qz\\\"G\" \":M\"       \"7s\"       \"jrujP}\"   \"F]=hP,\"   \"F=-o0\"    #> [8] \"j\"        #>  #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10.","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] -5916  8559  4901 -7251     0 #>  #> [[2]] #> [1] -3255 -6395  2462 -8320     0 -1041 -5910    10 #>  #> [[3]] #>  [1]  2453     0 -8348 -9316  -537  8417  -139 -8246  3407  3136 #>  #> [[4]] #>  [1]  2794     0  7362  1057 -5819 -2696  4659  8308   616  1622 #>  #> [[5]] #> [1] -9498 -3665 -2442 #>  #> [[6]] #> [1]  1163 -6407  4220  8046 -3724 -3432 #>  #> [[7]] #> [1]     0 -7155 #>  #> [[8]] #> [1] 0 #>  #> [[9]] #> [1]  1606 -3620 -1951 -6379  3452 -6484     0   -19 #>  #> [[10]] #> [1] -9291  4768  -205 -4566 -5209  7787 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #>  [1]  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE logical_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]   NA TRUE   NA   NA TRUE   NA   NA   NA   NA   NA"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), frac_na = 0)  numeric_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_positive(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_negative(len = c(1L, 10L), frac_na = 0, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1] -4620  5151     0  3319  3570 numeric_(big_num = TRUE) |> show_example() #> [1]  1555121789  1194529685 -1586983836 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1] -1.6402530  0.4871058 -0.4626092 -2.9455975 numeric_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  8728    NA    NA    NA -6738  2579    NA    NA -7983  5600"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1] \"AkH#8y\"    \"y`h<R\"     \"l\"         \"Y*Cq1\"     \"3=:Kp\"     \"'f~#\"      #> [7] \"{O5t/d40D\" \"fEdO7W\"    \"S,Ge\"      one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> [1]  TRUE FALSE FALSE FALSE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), frac_na = 0)  posixct_bounded(left, right, len = c(1L, 10L), frac_na = 0)  posixct_left_bounded(left, len = c(1L, 10L), frac_na = 0)  posixct_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"233-06-22 08:09:15 UTC\"  \"1586-09-23 09:37:36 UTC\" #> [3] \"2993-10-05 04:05:06 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-01-01 06:30:45 UTC\" \"2020-11-14 14:44:57 UTC\" #> [3] \"2020-03-24 09:17:21 UTC\" \"2020-12-13 17:56:45 UTC\" #> [5] \"2020-02-16 05:29:31 UTC\" \"2020-09-18 11:19:08 UTC\" #> [7] \"2020-09-12 00:07:32 UTC\" \"2020-03-23 03:21:32 UTC\" posixct_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"1625-10-01 23:35:18 UTC\" NA                        #>  [3] NA                        \"1969-08-20 07:30:30 UTC\" #>  [5] NA                        \"2653-02-11 15:14:32 UTC\" #>  [7] \"2638-07-14 11:17:04 UTC\" NA                        #>  [9] \"538-03-25 13:39:00 UTC\"  \"523-02-13 05:43:40 UTC\""},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10.","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 9 × 1 #>       a #>   <int> #> 1 -8043 #> 2     0 #> 3  9679 #> 4  3631 #> 5 -4032 #> 6 -2599 #> 7  2800 #> 8  7226 #> 9  2914 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b        #>   <int> <chr>    #> 1 -7729 K        #> 2  2880 8        #> 3 -2660 ?MyH|bV> #> 4  9100 [@@5j9>  #> 5 -7146 p"},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10.","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 3 × 3 #>   ...1  ...2  ...3  #>   <lgl> <lgl> <lgl> #> 1 FALSE FALSE TRUE  #> 2 FALSE FALSE TRUE  #> 3 FALSE FALSE TRUE  tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>    ...1        ...2            ...3                ...4         ...5 #>    <chr>       <time>          <dttm>              <lgl>       <dbl> #>  1 \"s#B\"       07:10:45.355965 1184-02-05 15:28:39 TRUE   716885860. #>  2 \"Z#jg`t7\"   22:11:47.887727 1743-10-30 21:23:03 TRUE   369797891. #>  3 \"A\"         03:20:59.268559 433-12-06 16:31:57  TRUE    74493197. #>  4 \"R$SS\"      15:54:33.917508 2399-03-04 08:47:08 FALSE  134323956. #>  5 \"b\"         10:15:39.279316 388-12-27 08:49:15  FALSE  107742386. #>  6 \" GIpX}aKp\" 21:06:15.932496 2828-02-19 14:17:22 TRUE  -446040921. #>  7 \"T\\\\q+q{Ad\" 11:56:21.564718 1770-12-21 21:52:46 FALSE  838046390. #>  8 \"ViYFh:v?i\" 23:50:40.226638 841-07-01 12:47:25  TRUE   870376932. #>  9 \"a=Z\"       09:20:22.826115 711-07-05 06:33:09  FALSE  -64314722. #> 10 \"~Kj\"       18:28:41.686221 435-05-22 13:36:45  FALSE -615667556."},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
