[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Examples.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing +","title":"Examples","text":"","code":"test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1L),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     c = numeric_(len = 1L),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           })"},{"path":"/articles/Examples.html","id":"testing-baserev","dir":"Articles","previous_headings":"","what":"Testing base::rev","title":"Examples","text":"","code":"test_that(\"reverse of reverse is identity\", {   for_all(     a = any_vector(len = c(1L, 10L)),     property = \\(a) a |> rev() |> rev() |> expect_equal(a)   ) })  test_that(\"reverse of concatenation is flipped concatenation of reversed\", {   for_all(     a = integer_(len = c(1L, 10L)),     b = integer_(len = c(1L, 10L)),     property = \\(a, b) rev(c(a, b)) |> expect_equal(c(rev(b), rev(a)))   ) })"},{"path":"/articles/Examples.html","id":"testing-stringrstr_c","dir":"Articles","previous_headings":"","what":"Testing stringr::str_c","title":"Examples","text":"","code":"test_that(\"str_c does nothing with a single input string\", {   for_all(     a = character_(len = 1L),     property = \\(a) str_c(a) |> expect_equal(a)   ) })  test_that(\"str_c returns a single string with multiple input strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     c = character_(len = 1L),     property = \\(a, b, c) str_c(a, b, c) |> length() |> expect_equal(1L)   ) })  test_that(\"concatenation of strings always contains the original strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     property = \\(a, b) {       str_c(a, b) |> str_detect(fixed(a)) |> expect_true()       str_c(a, b) |> str_detect(fixed(b)) |> expect_true()     }   ) })"},{"path":"/articles/Examples.html","id":"testing-dplyrdistinct","dir":"Articles","previous_headings":"","what":"Testing dplyr::distinct","title":"Examples","text":"","code":"test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) library(dplyr)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used simply wrapping from_hedgehog. hood function wrap hedgehog generator anonymous function add quickcheck_generator class . hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error:","code":"library(hedgehog)  is_even <-    \\(a) a %% 2 == 0  gen_powers_of_two <-    gen.element(1:10) |> gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> expect_true() ) for_all(   a = from_hedgehog(gen_powers_of_two),   b = integer_(),   property = \\(a, b) c(a, b) |> is.numeric() |> expect_true() ) for_all(   a = tibble_of(from_hedgehog(gen_powers_of_two)),   property = \\(a) is_tibble(a) |> expect_true() )"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1]  547233835 -787810167 -342425128   37400190   99662264 -446780002 -821066836 #> [8]  -27990145   29691684 any_atomic(len = 10L, frac_na = 0.5) |> show_example() #>  [1]     NA     NA -95003     NA     NA 255914 239450     NA     NA     NA"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat homogeneous list generator — any_flat_homogeneous_list","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic scalar type.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() |> show_example() #> [[1]] #> [1] \"2636-01-27\" #>  #> [[2]] #> [1] \"1940-03-21\" #>  #> [[3]] #> [1] \"2696-06-24\" #>  #> [[4]] #> [1] \"2703-01-09\" #>  #> [[5]] #> [1] \"1233-09-17\" #>  #> [[6]] #> [1] \"1916-08-31\" #>  any_flat_homogeneous_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] NA #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] TRUE #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] NA #>  #> [[10]] #> [1] TRUE #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] \"842-09-15 02:48:21 UTC\" #>  #> [[3]] #> [1] FALSE #>  #> [[4]] #> [1] \"1310-05-14\" #>  #> [[5]] #> [1] \"2433-08-14\" #>  #> [[6]] #> [1] \"1453-05-19\" #>  any_flat_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] NA #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] \"G!VV'|C\" #>  #> [[7]] #> [1] -845513135 #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] \"=^\" #>  #> [[10]] #> [1] -638518652 #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [1] \"1087-10-19 00:27:46 UTC\" #>  #> [[2]] #> [1] \"K^I\" #>  #> [[3]] #> 07:20:33.982149 #>  any_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] \"2008-01-02\" #>  #> [[3]] #> [1] \"1504-09-19\" #>  #> [[4]] #> [1] FALSE #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] NA #>  #> [[7]] #> 21:26:02.02541 #>  #> [[8]] #> 22:42:31.633031 #>  #> [[9]] #> NA #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 2 × 1 #>   ...1            #>   <time>          #> 1 10:21:32.685660 #> 2 14:42:26.856943 any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 7 #>    ...1         ...2                ...3         ...4 ...5       ...6      ...7  #>    <fct>        <dttm>              <list>      <int> <list>     <list>    <lgl> #>  1 \"vkl-}fh\"    1702-08-06 07:05:53 <time [3]>  -3250 <int [1]>  <fct [4]> TRUE  #>  2 \"V\"          48-06-06 16:39:05   <lgl [7]>       0 <time [8]> <lgl [4]> TRUE  #>  3 \"-2ZpHB\\\"*I\" 2454-07-30 05:47:00 <dttm [4]>      0 <time [4]> <chr [8]> TRUE  #>  4 \"7j%+36S\"    778-10-31 04:18:58  <dbl [10]>   8326 <date [9]> <dbl [9]> TRUE  #>  5 \"4JX?x/L(\"   458-05-29 20:51:47  <date [3]>   5339 <fct [5]>  <lgl [3]> FALSE #>  6 \"wR^K1\"      2644-03-11 12:04:14 <fct [7]>    5025 <dttm [9]> <time [8… TRUE  #>  7 \"fCbE~\"      488-03-24 19:14:38  <time [8]>   7574 <dttm [9]> <chr [3]> TRUE  #>  8 \"d=uqs\"      805-02-12 04:37:21  <dbl [5]>   -4629 <fct [1]>  <date [1… TRUE  #>  9 \"\\\"'(7u\"     724-11-29 05:20:03  <dbl [1]>   -6137 <int [10]> <fct [7]> TRUE  #> 10 \">\"          646-02-23 03:27:15  <dttm [10]>   197 <dttm [1]> <time [1… FALSE any_tibble(cols = 5L, frac_na = 0.5) |> show_example() #> # A tibble: 6 × 5 #>   ...1       ...2    ...3               ...4 ...5       #>   <list>     <chr>   <chr>             <dbl> <list>     #> 1 <time [6]> (v1|c   NA                  NA  <lgl [3]>  #> 2 <chr [10]> NA      NA                  NA  <lgl [6]>  #> 3 <dbl [9]>  kSl     YsL}#bW             NA  <lgl [9]>  #> 4 <dbl [1]>  NA      -|i5_:Zhh           NA  <time [3]> #> 5 <int [8]>  20hDp@c NA        -52827629086. <int [9]>  #> 6 <chr [7]>  [9.r2nG 5ym@e2+8`           NA  <lgl [3]>"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Undefined value generator — any_undefined","title":"Undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Undefined value generator — any_undefined","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined() |> show_example() #> [1] NA"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [1] \"916-12-31 07:27:57 UTC\"  \"785-03-30 23:25:16 UTC\"  #> [3] \"923-07-05 00:44:44 UTC\"  \"1353-12-24 14:46:45 UTC\" #> [5] \"2070-07-09 12:22:43 UTC\" any_vector(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"214-04-22 20:04:24 UTC\"  NA                        #>  [3] NA                        \"822-07-01 14:46:41 UTC\"  #>  [5] NA                        NA                        #>  [7] NA                        NA                        #>  [9] NA                        \"1347-04-11 14:04:02 UTC\""},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, tibbles, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything()"},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator generator","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() |> show_example() #> # A tibble: 0 × 0"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), frac_na = 0, frac_empty = 0)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_empty approximate fraction empty character values included vector. fraction 0, default, include empty values. fraction 0.5 include around 50% empty values.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"y@o~\"     \"|_4r\"     \"?11& \"    \"D\"        \"gG-[z;L\"  \"V!FUM(K~\" \"^i-0\"     #> [8] \"&!V#!O*\"  \" ?U^wZ\"   character_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"P\"     NA      \"2 a`N\" NA      \")IcU\"  NA      \"uog4\"  NA      \"\\\\d[\"  #> [10] NA      character_(len = 10L, frac_empty = 0.5) |> show_example() #>  [1] \"\"          \"{@M9%fJ:\"  \"n&00z:\"    \"\"          \"^44^E\"     \"]exh<\/`\"   #>  [7] \"uP{a*?-K)\" \"AWa8);JA_\" \"S<\"        \"\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), frac_na = 0)  date_bounded(left, right, len = c(1L, 10L), frac_na = 0)  date_left_bounded(left, len = c(1L, 10L), frac_na = 0)  date_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"1862-04-01\" \"1321-08-31\" \"1444-07-08\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #>  [1] \"2020-01-08\" \"2020-01-05\" \"2020-01-03\" \"2020-01-08\" \"2020-01-09\" #>  [6] \"2020-01-01\" \"2020-01-06\" \"2020-01-02\" \"2020-01-04\" \"2020-01-05\" date_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"2781-02-21\" NA           NA           NA           \"1458-09-22\" #>  [6] NA           NA           \"1536-07-06\" \"1999-12-04\" \"2930-02-10\""},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0 )  double_left_bounded(   left,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_nan approximate fraction NaN values included vector. fraction 0, default, include NaN values. fraction 0.5 include around 50% NaN values. frac_inf approximate fraction Inf -Inf values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1]  507670707  549341562  134070229 -838464355 -362903187 double_(big_dbl = TRUE) |> show_example() #> [1] 7.886212e+307 4.389642e+307 3.471271e+307  0.000000e+00 double_bounded(left = -5, right = 5) |> show_example() #>  [1]  0.6072612 -0.6821063  3.2562413 -4.4175535  3.9593619  0.0000000 #>  [7]  3.2969863  3.5336241 -2.7839216  0.8458913 double_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] -924808084         NA         NA         NA   45443556 -737681739 #>  [7] -734189062         NA  766210977         NA double_(len = 10L, frac_nan = 0.2, frac_inf = 0.2) |> show_example() #>  [1] -241565975 -534736094 -932887308       -Inf  958547300        NaN #>  [7]  885099640 -470056498 -359059182 -281019120"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] dRyQ1},:  7z        K,uLgQZd  x3y4hYU9b 1)ub$9aH  \"j+g@qi2  #> Levels: dRyQ1},: 7z K,uLgQZd x3y4hYU9b 1)ub$9aH \"j+g@qi2 factor_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA NA NA  1 NA NA NA  1 NA  1"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"generate flat lists values coming single input generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] -6301 #>  #> [[2]] #> [1] -8741 #>  #> [[3]] #> [1] 0 #>  #> [[4]] #> [1] 8656 #>  #> [[5]] #> [1] -7486 #>  #> [[6]] #> [1] -7412 #>  #> [[7]] #> [1] -1391 #>  #> [[8]] #> [1] 2062 #>  #> [[9]] #> [1] -4465 #>  #> [[10]] #> [1] -6988 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   size = getOption(\"quickcheck.size\", 50L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. size maximum length generators. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen generator","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"library(quickcheck) library(testthat)  is_even <-   \\(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) |> hedgehog::gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), frac_na = 0)  hms_bounded(left, right, len = c(1L, 10L), frac_na = 0)  hms_left_bounded(left, len = c(1L, 10L), frac_na = 0)  hms_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 11:30:57.010629 #> 19:55:15.909938 #> 10:17:38.914700 #> 14:29:57.786775 #> 05:29:05.055757 #> 08:48:11.115036 #> 12:19:48.559510 #> 08:37:36.145604 #> 16:48:40.833348 #> 01:59:45.216769 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 09:01:04.089373 #> 01:33:18.708005 #> 00:12:41.685770 hms_(len = 10L, frac_na = 0.5) |> show_example() #>              NA #> 07:43:56.105710 #>              NA #>              NA #>              NA #> 04:07:24.972162 #>              NA #> 10:02:19.515824 #>              NA #>              NA"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), frac_na = 0)  integer_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_positive(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_negative(len = c(1L, 10L), frac_na = 0, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1]  -533 -6796 integer_(big_int = TRUE) |> show_example() #> [1]  1349576813  1910048727           0  1587874956  -721720488 -1232178874 #> [7] -2089729022  -490739079 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1]  3  5 -1  0  5  2 -5 -2 integer_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  3240 -4632    NA -3761    NA     0   212    NA  1466 -6440"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1]   601     0 -7477 -1523 -6138  6936  5143 -3964  5611 #>  #> [[2]] #>  [1]  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> $a[[1]] #> $a[[1]]$a #> [1] \"]Fm\"       \"h(+sPt4nt\" \"iT\"        \"cwm,\"      \"e'Eix|m\"   \"Q(!lX-mdR\" #> [7] \"K\"         \" ''=9\"     \"]f)R?Q%',\" #>  #> $a[[1]]$b #> [1] \"1716-09-18\" \"2386-06-14\" \"2023-06-15\" \"1065-11-04\" \"2127-06-18\" #> [6] \"2306-07-20\" #>  #>  #> $a[[2]] #> $a[[2]]$a #> [1]  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE #>  #> $a[[2]]$b #> [1] \"a3.scSGf\" \"|rr\"      \"+%Dm\"     \"HW=r&9\"   \":AlW\"     \"|)Y\"      \" mPA9}\"   #> [8] \"+\"        #>  #>  #> $a[[3]] #> $a[[3]]$a #> [1] \"1719-04-18\" \"2230-05-08\" \"2388-11-14\" \"1392-01-01\" \"1594-04-13\" #> [6] \"2857-04-07\" #>  #> $a[[3]]$b #> [1] qkv #> Levels: qkv #>  #>  #> $a[[4]] #> $a[[4]]$a #> [1] \"X(Bg GUn\" \"f{2k0\"    \"sw~aoCZ\"  \"X(Bg GUn\" \"/b\"       \"Ws.vKP7\"  \"yQ.S!\"    #> [8] \"@|WN_yU\"  #>  #> $a[[4]]$b #> [1]  TRUE  TRUE FALSE #>  #>  #> $a[[5]] #> $a[[5]]$a #> [1] -6908  9260 -3602   219 -5198 #>  #> $a[[5]]$b #> [1] \"2524-04-02 09:05:02 UTC\" \"1691-09-17 09:38:16 UTC\" #> [3] \"2886-02-24 09:54:16 UTC\" \"1182-12-01 03:12:34 UTC\" #> [5] \"795-11-09 13:37:36 UTC\"  \"2087-10-05 15:58:06 UTC\" #> [7] \"2680-04-30 22:32:20 UTC\" \"2174-12-09 11:15:23 UTC\" #>  #>  #> $a[[6]] #> $a[[6]]$a #> 06:05:40.801052 #> 00:51:35.278647 #> 03:00:43.747419 #> 06:16:30.682140 #> 19:10:02.031447 #> 03:16:11.560173 #> 18:34:53.521301 #> 11:17:55.087469 #> 03:05:40.545532 #>  #> $a[[6]]$b #> [1] \"246-09-28 13:24:26 UTC\"  \"2187-09-03 18:07:33 UTC\" #> [3] \"28-08-26 03:38:33 UTC\"   #>  #>  #> $a[[7]] #> $a[[7]]$a #>  [1] \"Ca\"        \"HfD<v\"     \"_dyI\"      \"t8\"        \"c|\"        \":L\"        #>  [7] \":UTm'b\"    \"*Mb\"       \"ffqED4Xf3\" \"*E%^$J3G\"  #>  #> $a[[7]]$b #> 08:34:29.570783 #>  #>  #> $a[[8]] #> $a[[8]]$a #> [1] \"1201-05-15\" \"1261-04-29\" \"1226-06-10\" \"2921-09-29\" \"2462-01-14\" #> [6] \"1079-02-16\" \"1733-04-03\" \"1212-04-23\" \"2019-09-01\" #>  #> $a[[8]]$b #> 17:21:13.582914 #> 23:41:15.204639 #> 17:10:41.676838 #>  #>  #> $a[[9]] #> $a[[9]]$a #> [1] 6860 #>  #> $a[[9]]$b #> [1] \"o la##w't\" \"p>\"        \"74KE\"      \"/G3'u)M/\"  \"B\"         \"\\\"9+f\"     #> [7] \"m,rlcn\"    \"j1!h4{\"    #>  #>  #>  #> $b #> [1] \"2048-05-23\" \"1179-09-08\" #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] -827 #>  #> [[2]] #> [1]  2807 -9559 -3034 -1893 -3367 -1967  7187 #>  #> [[3]] #>  [1]  3618 -9197  6617     0     0  2561  8214     0  -566  1427 #>  #> [[4]] #> [1]  7930 -7411  9114  4699  6692 #>  #> [[5]] #> [1]  3538  5605  2161 -7111 -6722  5242 #>  #> [[6]] #> [1]     0  6022 -9772 #>  #> [[7]] #> [1] -3125 #>  #> [[8]] #> [1] -5929 -9747  3573 #>  #> [[9]] #> [1] -5567  7858 -9030  5433     0 #>  #> [[10]] #> [1] -1641  8106 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1] TRUE logical_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] FALSE    NA FALSE    NA FALSE  TRUE FALSE    NA    NA  TRUE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), frac_na = 0)  numeric_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_positive(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_negative(len = c(1L, 10L), frac_na = 0, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1] -4120  8148 numeric_(big_num = TRUE) |> show_example() #> [1]  3.106538e+307 -5.484811e+307 -1.013398e+307  2.212832e+307  4.987093e+307 #> [6]  7.538236e+307 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1]  0.5730598 -2.9416775  4.1264629 -4.2348885 numeric_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] -2585  -347 -3572 -8595  2983     0     0    NA  7463    NA"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1]  8660 -9546 one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> [1] FALSE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), frac_na = 0)  posixct_bounded(left, right, len = c(1L, 10L), frac_na = 0)  posixct_left_bounded(left, len = c(1L, 10L), frac_na = 0)  posixct_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"671-06-13 16:25:41 UTC\"  \"2567-11-14 13:03:49 UTC\" #> [3] \"632-04-18 03:47:14 UTC\"  \"2685-09-08 14:15:53 UTC\" #> [5] \"2814-12-04 23:25:41 UTC\" \"1852-12-09 18:23:42 UTC\" #> [7] \"933-10-24 02:07:25 UTC\"  posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-03-03 10:54:44 UTC\" posixct_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]           NA  16721174781 -49706098133  24115087756  -2015957529 #>  [6]           NA   -272259128 -43889891101 -44114707808   4553755101"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1] FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 6 × 1 #>       a #>   <int> #> 1 -5063 #> 2 -4889 #> 3  8331 #> 4 -3781 #> 5  5133 #> 6  9956 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b            #>   <int> <chr>        #> 1  3314 \"gg++0W~\"    #> 2 -1226 \"c_kn25@\"    #> 3  8575 \"y(QXim \"    #> 4  1480 \"V&o(\\\\w:}b\" #> 5 -1304 \":s3/d:F\""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 5 × 7 #>   ...1  ...2  ...3       ...4       ...5       ...6  ...7       #>   <lgl> <lgl> <date>     <date>     <date>     <lgl> <date>     #> 1 FALSE FALSE 2618-08-07 2348-07-13 1911-03-17 TRUE  1482-07-26 #> 2 TRUE  FALSE 2953-03-12 2648-08-16 2001-01-01 FALSE 2960-02-18 #> 3 FALSE FALSE 2097-03-20 2427-07-24 2516-09-28 FALSE 1178-05-13 #> 4 TRUE  TRUE  2771-02-01 2255-01-03 2133-08-10 FALSE 2240-07-31 #> 5 TRUE  TRUE  2240-11-07 1542-01-27 1625-08-05 TRUE  1589-10-14 tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>    ...1                ...2              ...3 ...4              ...5 #>    <dttm>              <date>           <dbl> <date>           <dbl> #>  1 903-04-29 11:24:13  1009-04-14          0  2870-06-08 -360414416. #>  2 2888-07-21 06:06:42 2343-08-29  618780365. 2700-10-24    5151833. #>  3 75-11-13 22:31:42   1020-05-28 -957997578. 1623-05-18 -901799280. #>  4 1252-06-22 22:15:51 2120-01-31 -852201249. 1999-10-24          0  #>  5 1669-09-04 09:46:42 2794-09-21 -999843942. 1335-05-17  337325064. #>  6 432-04-08 13:55:34  1416-06-13  311476966. 2358-03-05  647588427. #>  7 751-03-11 22:07:29  1960-09-03 -216410729. 2892-12-30 -556772198. #>  8 2551-12-23 01:24:06 1951-02-23          0  1147-03-20          0  #>  9 795-07-09 19:11:07  2041-06-07  498426781. 1585-02-21  302159975. #> 10 784-03-09 06:18:52  1781-02-24  -44647934. 1688-11-14 -507301049."},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
