[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"Install CRAN version : install development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(),     b = numeric_(),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(),     b = numeric_(),     c = numeric_(),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) library(dplyr)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = 1L, frac_na = 0)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1] -176592560 any_atomic(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA         \"\\\"rC?:I\"  NA         \"X3mUw<S8\" NA         \"I%z01\"    #>  [7] \"5~\"       \"\\\\Ff^%\"   NA         \"N]8:\""},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = 1L, frac_na = 0)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] \"q/WCtp-d\" #>  any_flat_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> 17:48:11.178572 #>  #> [[2]] #> [1] NA #>  #> [[3]] #> [1] l^ #> Levels: l^ #>  #> [[4]] #> [1] NA #>  #> [[5]] #> NA #>  #> [[6]] #> [1] Z#^0)`3* #> Levels: Z#^0)`3* #>  #> [[7]] #> [1] \"645-03-08 23:47:39 UTC\" #>  #> [[8]] #> [1] b~hp #> Levels: b~hp #>  #> [[9]] #> [1] 171793873 #>  #> [[10]] #> [1] -1952 #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = 1L, frac_na = 0)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [1] \"~N07x\" #>  any_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [[1]]$a #> [1]  543342360         NA  245329726         NA -432332384          0  541136613 #>  #> [[1]]$b #>              NA #> 18:58:15.515856 #> 06:54:37.948973 #> 05:53:22.961814 #>  #>  #> [[2]] #> [[2]]$a #> [1] 185233681        NA 202590803        NA #>  #> [[2]]$b #> [1] NA        \"Z&\"      \"y|V>hqq\" \"T3H#V\"   NA        NA        #>  #>  #> [[3]] #> [[3]]$a #> [1] BXXB5'[ D[n     7]KP    #> Levels: BXXB5'[ D[n 7]KP #>  #> [[3]]$b #> [1]    NA FALSE    NA  TRUE FALSE FALSE #>  #>  #> [[4]] #> [[4]]$a #> [1] -589631275 -777200219  236670678 -548314088  -11395020         NA         NA #> [8]         NA -863191473 #>  #> [[4]]$b #> [1] \"1527-03-16\" NA           \"2345-08-27\" \"1667-02-24\" NA           #> [6] NA           NA           NA           NA           #>  #>  #> [[5]] #> [[5]]$a #> 11:17:25.017914 #> 04:43:11.889300 #>              NA #>              NA #>              NA #> 00:14:20.502211 #>              NA #>              NA #>  #> [[5]]$b #>              NA #> 16:11:57.441813 #>              NA #> 17:18:35.962520 #> 17:52:14.237043 #> 22:42:10.522607 #> 10:17:29.982544 #> 21:03:56.451282 #> 12:27:44.959358 #> 04:52:01.256785 #>  #>  #> [[6]] #> [[6]]$a #>  [1] NA          \"2C&zu4\"    \":NFv[RIl\"  \"@E^6S\"     NA          \")~&Sk\"     #>  [7] \"?G~/k2z [\" NA          NA          \"Ofnm\"      #>  #> [[6]]$b #> [1]           NA -48744684864 #>  #>  #> [[7]] #> [[7]]$a #> [1] NA #>  #> [[7]]$b #> [1] & #> Levels: & #>  #>  #> [[8]] #> [[8]]$a #> [1] NA #>  #> [[8]]$b #> [1]          NA          NA 22294507668 #>  #>  #> [[9]] #> [[9]]$a #> [1] -609482755  902205996 -203039733 -703811710 -279318301 #>  #> [[9]]$b #>  [1]  1  1  1 NA  1  1 NA NA  1  1 #>  #>  #> [[10]] #> [[10]]$a #> [1] NA         NA         \"[N\\\\Q!pf\" NA         \"N\"        NA         \"{s\"       #> [8] \"}Fq9\"     #>  #> [[10]]$b #> [1] -2007  2432    NA #>  #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 2 × 10 #>   ...1      ...2                ...3    ...4                ...5     ...6 ...7   #>   <list>    <dttm>              <list>  <dttm>              <lgl>   <dbl> <list> #> 1 <dbl [1]> 1980-08-21 12:54:03 <fct [… 1044-04-01 03:46:43 FALSE  2.13e8 <time… #> 2 <int [9]> 2575-05-12 07:50:33 <time … 2628-01-03 17:21:03 TRUE  -2.34e8 <fct … #> # … with 3 more variables: ...8 <dttm>, ...9 <list>, ...10 <chr> any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 7 #>    ...1       ...2         ...3            ...4  ...5                ...6  ...7  #>    <list>     <chr>        <time>          <lis> <dttm>              <chr> <lis> #>  1 <dttm [1]> \"Q,[uiF>\"    23:03:23.394734 <nam… 2876-07-19 15:21:39 \"f7\"  <nam… #>  2 <chr [1]>  \"NN\\\"V68\\\"\"  10:52:28.614101 <nam… 1649-08-30 00:45:31 \"\\\"h… <nam… #>  3 <dbl [1]>  \"$.c4WW\\\"K\"  05:19:26.593411 <nam… 215-11-11 16:01:01  \"E-@… <nam… #>  4 <lgl [1]>  \"rr\"         14:35:20.410782 <nam… 415-01-19 22:52:36  \"ao9… <nam… #>  5 <int [1]>  \"IMM\"        09:24:48.234599 <nam… 1720-04-05 03:52:12 \"q`\"  <nam… #>  6 <lgl [1]>  \"vAoGFt\"     14:26:36.606247 <nam… 1734-05-07 04:08:46 \"T+\\… <nam… #>  7 <fct [1]>  \"PXSzE\"      14:13:36.508222 <nam… 1101-11-12 08:17:38 \"(@q\" <nam… #>  8 <lgl [1]>  \"1ki~lCu2\\\"\" 14:47:05.059818 <nam… 1847-11-09 10:53:29 \"TJm\" <nam… #>  9 <dbl [1]>  \"OPJ{;z{Q~\"  10:49:04.539396 <nam… 2577-05-20 23:51:40 \"'QH… <nam… #> 10 <lgl [1]>  \"pg\"         23:02:10.292698 <nam… 787-03-12 02:52:03  \"@a~… <nam… any_tibble(cols = 5L, frac_na = 0.5) |> show_example() #> # A tibble: 10 × 5 #>    ...1         ...2       ...3                ...4       ...5             #>    <chr>        <list>     <dttm>              <date>     <list>           #>  1  NA          <dbl [1]>  850-05-08 10:11:44  1920-07-14 <named list [2]> #>  2 \"wG}.$Bm9g\"  <int [1]>  NA                  1508-07-16 <named list [2]> #>  3 \"OH@e\"       <int [1]>  1545-07-07 20:36:09 2022-12-23 <named list [2]> #>  4 \"-\"          <lgl [1]>  855-10-03 14:28:33  1762-07-26 <named list [2]> #>  5  NA          <dbl [1]>  NA                  NA         <named list [2]> #>  6 \"R<h;RJ/F\"   <dttm [1]> 1648-09-28 03:40:49 2099-02-12 <named list [2]> #>  7 \"4TG.\\\\R4+k\" <chr [1]>  NA                  NA         <named list [2]> #>  8 \"2)oU\"       <int [1]>  NA                  NA         <named list [2]> #>  9  NA          <int [1]>  NA                  1295-04-26 <named list [2]> #> 10  NA          <date [1]> 1993-07-23 20:42:43 NA         <named list [2]>"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = 1L, frac_na = 0)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [[1]] #> [[1]]$a #> [1] \"c}?u!Rq\"   \"3\"         \"v#i0$\"     \"qfMKTE9/f\" \"?O\"        \"A)N&)[r\"   #> [7] \"L|?b(i?\"   \"4oDeGK\"    \"}\"         #>  #> [[1]]$b #> [1] -922200717  790923389 -765588186  869479713  705176082  764212006  964349115 #>  #>  any_vector(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [[1]]$a #> [1] NA NA NA  1 #>  #> [[1]]$b #> [1]    NA    NA    NA -8407    NA -6506    NA  4885 #>  #>  #> [[2]] #> [[2]]$a #>  [1]    NA    NA -3914    NA    NA    NA    NA -9141  3496    NA #>  #> [[2]]$b #> 19:27:07.546543 #> 05:31:17.505467 #>              NA #>              NA #>              NA #> 23:31:58.881848 #> 01:28:37.645598 #> 21:16:06.020071 #> 02:41:25.163049 #>  #>  #> [[3]] #> [[3]]$a #>  [1]         NA  572049492 -444471705  387916160 -844600219  670193517 #>  [7]  399788223 -547318963 -276349278  300808853 #>  #> [[3]]$b #> 10:02:39.522645 #>              NA #>              NA #> 11:22:34.838739 #> 03:54:19.090249 #> 20:56:45.847155 #>  #>  #> [[4]] #> [[4]]$a #> [1]  1 NA  1  1  1 #>  #> [[4]]$b #> [1] \"Y5\\\\\"      \"M7hOS\"     \"-}dKzu\"    NA          \"#>\"        \"YE\"        #> [7] \"Q$y4:1@DN\" #>  #>  #> [[5]] #> [[5]]$a #> [1] \"2313-07-11\" \"1747-07-23\" NA           #>  #> [[5]]$b #> [1] NA #>  #>  #> [[6]] #> [[6]]$a #> [1]   NA TRUE TRUE #>  #> [[6]]$b #> [1]  1 NA  1  1  1  1 NA NA  1 #>  #>  #> [[7]] #> [[7]]$a #> [1] NA     NA     \"l^O2\" #>  #> [[7]]$b #> [1] NA NA #>  #>  #> [[8]] #> [[8]]$a #>  [1] \"188-07-10 13:19:19 UTC\"  \"2775-03-05 23:24:40 UTC\" #>  [3] \"2785-02-27 05:03:49 UTC\" \"2534-02-26 23:50:16 UTC\" #>  [5] \"1617-07-31 11:23:27 UTC\" NA                        #>  [7] \"2137-07-26 18:51:26 UTC\" \"1673-03-13 06:02:41 UTC\" #>  [9] NA                        NA                        #>  #> [[8]]$b #> [1]  TRUE FALSE #>  #>  #> [[9]] #> [[9]]$a #> 12:26:07.017772 #> 11:45:00.788260 #>              NA #> 06:28:26.966726 #>              NA #> 12:57:32.395078 #>  #> [[9]]$b #> [1]  134476800 -322882717          0  999373241 -217807740         NA         NA #>  #>  #> [[10]] #> [[10]]$a #> [1]          NA 29734694743 11269498231          NA  2142118730 #>  #> [[10]]$b #> [1]         NA         NA         NA         NA -701635920         NA #>  #>"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = 1L, frac_na = 0, frac_empty = 0)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_empty approximate fraction empty character values included vector. fraction 0, default, include empty values. fraction 0.5 include around 50% empty values.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"F%v#&\" character_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"W*5\"        \"MU#lJ$\\\"E7\" NA           NA           \"(e17\"       #>  [6] \"6,:%\"       \"~6YJGpva\"   \"~|n|\"       NA           NA           character_(len = 10L, frac_empty = 0.5) |> show_example() #>  [1] \"B-;$\"     \"\"         \"\"         \"\"         \"2EQzIJnp\" \".L\"       #>  [7] \"\"         \"D<dL\"     \"nL\"       \"\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = 1L, frac_na = 0)  date_bounded(left, right, len = 1L, frac_na = 0)  date_left_bounded(left, len = 1L, frac_na = 0)  date_right_bounded(right, len = 1L, frac_na = 0)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"1551-07-14\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-02\" date_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]      NA -271001      NA      NA      NA      NA      NA   72922      NA #> [10] -293597"},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(len = 1L, frac_na = 0, frac_nan = 0, frac_inf = 0, big_dbl = FALSE)  double_bounded(left, right, len = 1L, frac_na = 0, frac_nan = 0, frac_inf = 0)  double_left_bounded(   left,   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_right_bounded(   right,   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_positive(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_negative(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_fractional(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_whole(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_nan approximate fraction NaN values included vector. fraction 0, default, include NaN values. fraction 0.5 include around 50% NaN values. frac_inf approximate fraction Inf -Inf values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1] 0 double_(big_dbl = TRUE) |> show_example() #> [1] -1.697204e+307 double_bounded(left = -5, right = 5) |> show_example() #> [1] 3.077705 double_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]         NA         NA -613254016         NA -179202377  -89029909 #>  [7]  752675440         NA         NA -319227622 double_(len = 10L, frac_nan = 0.2, frac_inf = 0.2) |> show_example() #>  [1] -842717809        NaN  602508821 -697004437        NaN       -Inf #>  [7] -623865619 -355367454 -831261421        NaN"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = 1L, frac_na = 0)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] E_; #> Levels: E_; factor_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA NA  1 NA NA  1 NA  1 NA  1"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   size = getOption(\"quickcheck.size\", 50L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. size maximum length generators. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = 1L, frac_na = 0)  hms_bounded(left, right, len = 1L, frac_na = 0)  hms_left_bounded(left, len = 1L, frac_na = 0)  hms_right_bounded(right, len = 1L, frac_na = 0)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 06:51:13.871493 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 06:13:23.488309 hms_(len = 10L, frac_na = 0.5) |> show_example() #> 15:51:35.568015 #> 06:54:38.132112 #>              NA #>              NA #> 21:51:04.177928 #> 15:16:40.570977 #>              NA #> 20:29:09.027380 #> 22:03:13.248034 #> 23:10:43.864676"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = 1L, frac_na = 0, big_int = FALSE)  integer_bounded(left, right, len = 1L, frac_na = 0)  integer_left_bounded(left, len = 1L, frac_na = 0, big_int = FALSE)  integer_right_bounded(right, len = 1L, frac_na = 0, big_int = FALSE)  integer_positive(len = 1L, frac_na = 0, big_int = FALSE)  integer_negative(len = 1L, frac_na = 0, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1] 1614 integer_(big_int = TRUE) |> show_example() #> [1] 53769339 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1] -1 integer_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  1066     0    NA    NA  4834  5843 -3065    NA  6314    NA"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1] -7996 #>  #> [[2]] #> [1] FALSE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> $a[[1]] #> $a[[1]]$a #> 14:59:04.801516 #> 18:28:06.734210 #> 08:16:12.506611 #> 11:12:21.716833 #> 06:51:18.093670 #> 02:46:19.390214 #> 21:56:25.207977 #>  #> $a[[1]]$b #> 16:33:49.426492 #> 13:36:32.165445 #> 10:08:36.568195 #> 02:03:29.955053 #> 08:24:59.266697 #> 17:39:58.351403 #> 00:57:38.998435 #> 03:23:04.875658 #> 13:06:12.304286 #> 21:58:42.884997 #>  #>  #>  #> $b #> $b[[1]] #> [1] 0 #>  #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = 1L)"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10.","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] 3269 #>  #> [[2]] #> [1] -1164 #>  #> [[3]] #> [1] -7783 #>  #> [[4]] #> [1] -4185 #>  #> [[5]] #> [1] 2987 #>  #> [[6]] #> [1] 8725 #>  #> [[7]] #> [1] -5414 #>  #> [[8]] #> [1] -3535 #>  #> [[9]] #> [1] 8644 #>  #> [[10]] #> [1] -3793 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = 1L, frac_na = 0)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1] FALSE logical_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  TRUE    NA    NA    NA    NA FALSE FALSE  TRUE    NA  TRUE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = 1L, frac_na = 0, big_num = FALSE)  numeric_bounded(left, right, len = 1L, frac_na = 0)  numeric_left_bounded(left, len = 1L, frac_na = 0, big_num = FALSE)  numeric_right_bounded(right, len = 1L, frac_na = 0, big_num = FALSE)  numeric_positive(len = 1L, frac_na = 0, big_num = FALSE)  numeric_negative(len = 1L, frac_na = 0, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1] 403553802 numeric_(big_num = TRUE) |> show_example() #> [1] 0 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1] 4 numeric_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]    NA    NA     0   448    NA    NA    NA -5363  7411 -8654"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1] -9159 one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> [1] TRUE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = 1L, frac_na = 0)  posixct_bounded(left, right, len = 1L, frac_na = 0)  posixct_left_bounded(left, len = 1L, frac_na = 0)  posixct_right_bounded(right, len = 1L, frac_na = 0)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"1220-09-21 19:33:31 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-02-29 21:34:22 UTC\" posixct_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]           NA -57833185298 -45740961270 -15942740048           NA #>  [6]           NA           NA -10503555655           NA           NA"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1] TRUE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10.","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 5 × 1 #>       a #>   <int> #> 1  9358 #> 2  8152 #> 3  8271 #> 4 -9520 #> 5   623 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b        #>   <int> <chr>    #> 1 -1307 \"\\\\#_\"   #> 2 -6937 \"rSLu)\"  #> 3 -8022 \"qE\"     #> 4  -185 \"v$[L<Z\" #> 5 -8313 \"$=f5\""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10.","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 1 × 8 #>   ...1  ...2  ...3  ...4  ...5  ...6  ...7       ...8  #>   <lgl> <lgl> <lgl> <lgl> <lgl> <lgl> <date>     <lgl> #> 1 TRUE  TRUE  TRUE  FALSE FALSE TRUE  1972-11-19 FALSE tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>    ...1        ...2            ...3       ...4        ...5            #>    <chr>       <time>          <date>     <fct>       <time>          #>  1 \"rKHT\\\\7\"   18:47:32.060348 1483-10-28 \"`-I\"       16:47:09.556846 #>  2 \"'ql\"       07:41:40.362775 2202-12-16 \"<&Lt`K@9\"  22:28:31.462179 #>  3 \"~_-Yn\"     13:51:53.096361 2226-08-18 \"m%N,\"      23:12:53.914668 #>  4 \"WIt$aR TH\" 00:37:54.158688 1526-07-27 \"f?\"        07:40:04.280120 #>  5 \"&2oq;\"     06:36:42.806798 1098-06-03 \"G$mH:u\"    06:28:12.799032 #>  6 \"d~\"        16:10:38.103472 2755-07-04 \"/uFTJ\"     15:16:37.986651 #>  7 \"h<6R{0\"    13:11:01.073145 1368-04-25 \"8@v X*1B_\" 02:40:56.191926 #>  8 \"6va\"       14:29:48.171086 1323-07-18 \"gY;jw@s\"   21:32:10.060313 #>  9 \"L/sU\"      08:27:00.584873 2208-03-21 \"G8f^ \\\"A\"  04:22:56.993737 #> 10 \"NRq17,\"    22:01:33.501208 2523-07-08 \"ai5yl\"     18:25:30.118969"},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
