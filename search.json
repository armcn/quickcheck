[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2023). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2023},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = function(a) expect_equal(a, a + 0)   ) }) #> Test passed 🎉  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = function(a, b) expect_equal(a + b, b + a)   ) }) #> Test passed 😸  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = function(a, b, c) expect_equal(a + (b + c), (a + b) + c)   ) }) #> Test passed 😀 library(dplyr, warn.conflicts = FALSE)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = function(a) {       distinct(a) %>% expect_equal(a)     }   ) }) #> Test passed 🎊  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = function(a) {       bind_rows(a, a) %>%         distinct() %>%         expect_equal(a)     }   ) }) #> Test passed 🎊  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = function(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) %>% expect_equal(unique_rows)     }   ) }) #> Test passed 😀"},{"path":"/index.html","id":"quickcheck-generators","dir":"","previous_headings":"","what":"Quickcheck generators","title":"Property Based Testing","text":"Many generators provided quickcheck. examples.","code":""},{"path":"/index.html","id":"atomic-vectors","dir":"","previous_headings":"Quickcheck generators","what":"Atomic vectors","title":"Property Based Testing","text":"","code":"integer_(len = 10) %>% show_example() #>  [1]  -833  5111 -8831 -3495 -1899  1051  9964  2473  9557 -2465 character_alphanumeric(len = 10) %>% show_example() #>  [1] \"y5Ph\"      \"8\"         \"B8\"        \"3vOcYf\"    \"qr\"        \"o\"         #>  [7] \"5rW2nHdrA\" \"88\"        \"umU\"       \"vJpqr\" posixct_(len = 10, any_na = TRUE) %>% show_example() #>  [1] \"1652-02-25 11:34:40 LMT\" \"1683-08-15 05:26:47 LMT\" #>  [3] \"2339-08-19 19:19:07 PDT\" \"0244-05-09 12:26:30 LMT\" #>  [5] \"0756-11-24 03:23:10 LMT\" \"0660-04-16 21:21:08 LMT\" #>  [7] \"2993-05-14 04:45:47 PDT\" NA                        #>  [9] \"1301-04-09 00:40:00 LMT\" NA"},{"path":"/index.html","id":"lists","dir":"","previous_headings":"Quickcheck generators","what":"Lists","title":"Property Based Testing","text":"","code":"list_(a = constant(NULL), b = any_undefined()) %>% show_example() #> $a #> NULL #>  #> $b #> [1] -Inf flat_list_of(logical_(), len = 3) %>% show_example() #> [[1]] #> [1] TRUE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] TRUE"},{"path":"/index.html","id":"tibbles","dir":"","previous_headings":"Quickcheck generators","what":"Tibbles","title":"Property Based Testing","text":"","code":"tibble_(a = date_(), b = hms_(), rows = 5) %>% show_example() #> # A tibble: 5 x 2 #>   a          b               #>   <date>     <time>          #> 1 1271-08-16 22:32:16.108893 #> 2 2788-05-31 20:37:31.119791 #> 3 1246-05-10 09:14:29.411623 #> 4 2434-06-08 16:01:39.498445 #> 5 1074-10-19 04:07:18.552658 tibble_of(double_bounded(-10, 10), rows = 3, cols = 3) %>% show_example() #> # A tibble: 3 x 3 #>    ...1  ...2  ...3 #>   <dbl> <dbl> <dbl> #> 1  0     2.55  5.81 #> 2  4.42  8.87 -5.43 #> 3  9.45  7.02 -3.97 any_tibble(rows = 3, cols = 3) %>% show_example() #> # A tibble: 3 x 3 #>   ...1             ...2       ...3       #>   <list>           <list>     <date>     #> 1 <named list [2]> <time [2]> 1628-11-24 #> 2 <named list [2]> <time [7]> 2989-06-25 #> 3 <named list [2]> <fct [4]>  2175-02-14"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used wrapping from_hedgehog. hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error: quickcheck generator can also converted hedgehog generator can used hedgehog functions.","code":"library(hedgehog)  is_even <-   function(a) a %% 2 == 0  gen_powers_of_two <-   gen.element(1:10) %>% gen.with(function(a) 2^a)  test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = function(a) is_even(a) %>% expect_true()   ) }) #> Test passed 😀 test_that(\"powers of two and integers are both numeric values\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     b = integer_(),     property = function(a, b) {       c(a, b) %>%         is.numeric() %>%         expect_true()     }   ) }) #> Test passed 🎉 test_that(\"composing hedgehog with quickcheck generators fails\", {   tibble_of(from_hedgehog(gen_powers_of_two)) %>% expect_error() }) #> Test passed 🥇 gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) %>%   as_hedgehog() %>%   gen.with(function(a) 2^a)   test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = function(a) is_even(a) %>% expect_true()   ) }) #> Test passed 😀"},{"path":"/index.html","id":"fuzz-tests","dir":"","previous_headings":"","what":"Fuzz tests","title":"Property Based Testing","text":"Fuzz testing special case property based testing property tested code doesn’t fail range inputs. example fuzz testing quickcheck. Let’s say want test purrr::map function won’t fail vector input.","code":"test_that(\"map won't fail with any vector as input\", {   for_all(     a = any_vector(),     property = function(a) purrr::map(a, identity) %>% expect_silent()   ) }) #> Test passed 🎉"},{"path":"/index.html","id":"repeat-tests","dir":"","previous_headings":"","what":"Repeat tests","title":"Property Based Testing","text":"Repeat tests can used repeatedly test property holds true many calls function. different regular property based tests don’t require generators. function repeat_test call function many times ensure expectation passes cases. kind test can useful testing functions randomness.","code":"test_that(\"runif generates random numbers between a min and max value\", {   repeat_test(     property = function() {       random_number <- runif(1, min = 0, max = 10)       expect_true(random_number >= 0 && random_number <= 10)     }   ) }) #> Test passed 🎉"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Any atomic vector generator — any_atomic","title":"Any atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any atomic vector generator — any_atomic","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any atomic vector generator — any_atomic","text":"","code":"any_atomic() %>% show_example() #> [1] \"2909-07-22\" \"2053-01-23\" \"2236-06-09\" \"1628-12-02\" \"1181-06-13\" #> [6] \"1721-06-23\" \"1348-09-17\" any_atomic(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  1  1  1 NA NA  1  1 NA NA  1"},{"path":"/reference/any_data.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data.table generator — any_data.table","title":"Any data.table generator — any_data.table","text":"Generate data.tables.","code":""},{"path":"/reference/any_data.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data.table generator — any_data.table","text":"","code":"any_data.table(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data.table generator — any_data.table","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data.table generator — any_data.table","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_data.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data.table generator — any_data.table","text":"","code":"any_data.table(rows = 3L, cols = 3L) %>% show_example() #>     ...1                                                              ...2 #> 1: 8):1i                       2077-07-06,1599-06-09,2261-11-09,2188-09-27 #> 2: :olro                                                    BBu}P,.)WmP%U| #> 3:  K$z7          0,-235185452,  56836493,  41522128, 905553740,-406054955 #>     ...3 #> 1:  TRUE #> 2: FALSE #> 3: FALSE"},{"path":"/reference/any_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data frame generator — any_data_frame","title":"Any data frame generator — any_data_frame","text":"Generate data.frames.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data frame generator — any_data_frame","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data frame generator — any_data_frame","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = 3L, cols = 3L) %>% show_example() #>         ...1       ...2  ...3 #> 1          0  561014111     0 #> 2  937803094  833717056  7453 #> 3 -662001843 -299286276 -5045"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any flat homogeneous list generator — any_flat_homogeneous_list","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic scalar class.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() %>% show_example() #> [[1]] #> [1] -571712205 #>  #> [[2]] #> [1] -595348730 #>  #> [[3]] #> [1] -431006883 #>  #> [[4]] #> [1] -464258692 #>  #> [[5]] #> [1] 194009278 #>  any_flat_homogeneous_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [1] TRUE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] TRUE #>  #> [[4]] #> [1] FALSE #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] TRUE #>  #> [[10]] #> [1] TRUE #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any flat list generator — any_flat_list","title":"Any flat list generator — any_flat_list","text":"Generate lists element atomic scalar.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any flat list generator — any_flat_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any flat list generator — any_flat_list","text":"","code":"any_flat_list() %>% show_example() #> [[1]] #> [1] TRUE #>  #> [[2]] #> [1] 0 #>  #> [[3]] #> [1] \"2048-08-10 11:06:12 UTC\" #>  #> [[4]] #> [1] \"1395-01-09\" #>  #> [[5]] #> [1] -322334493 #>  #> [[6]] #> [1] \"280-01-31 10:55:56 UTC\" #>  #> [[7]] #> [1] U%vP1)mg #> Levels: U%vP1)mg #>  any_flat_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] NA #>  #> [[3]] #> [1] d&aL #> Levels: d&aL #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] -741 #>  #> [[6]] #> [1] U`0oe?U?7 #> Levels: U`0oe?U?7 #>  #> [[7]] #> [1] #Bm #> Levels: #Bm #>  #> [[8]] #> [1] -412003795 #>  #> [[9]] #> [1] \"2453-10-09 20:41:36 UTC\" #>  #> [[10]] #> [1] \"1172-01-29\" #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any list generator — any_list","title":"Any list generator — any_list","text":"Generate lists containing lists atomic vectors.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any list generator — any_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any list generator — any_list","text":"","code":"any_list() %>% show_example() #> [[1]] #> [1] \"2108-05-15\" \"2605-07-22\" \"1566-08-11\" \"1436-11-24\" #>  #> [[2]] #> [1] \"1843-04-14 17:15:42 UTC\" \"2096-03-02 03:32:40 UTC\" #> [3] \"2385-03-08 08:46:30 UTC\" \"2582-01-11 17:10:22 UTC\" #> [5] \"2349-03-04 20:18:01 UTC\" #>  #> [[3]] #> [1] -3225 -8015     0  1231 -6359 -1512  3383 #>  #> [[4]] #> [1] \"2842-05-09\" \"2995-11-23\" \"2900-06-28\" \"2727-11-12\" \"2159-12-05\" #> [6] \"1812-05-29\" \"2916-01-06\" #>  #> [[5]] #> [1]  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE #>  #> [[6]] #> [1] FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE #>  #> [[7]] #> 08:23:37.556177 #> 18:26:07.145778 #> 21:33:59.611820 #>  #> [[8]] #> [1] \"1685-09-03\" \"2579-11-16\" \"2370-08-28\" #>  #> [[9]] #> [1] hlMOff' @a-3tW  }A^C6   TVh\"    2z=4    #> Levels: hlMOff' @a-3tW }A^C6 TVh\" 2z=4 #>  any_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [[1]]$a #> [1] h\\\\2$(0#[ #> Levels: h\\\\2$(0#[ #>  #> [[1]]$b #> 20:18:40.367336 #> 16:22:10.385387 #>              NA #>              NA #> 03:06:50.668862 #>              NA #>  #>  #> [[2]] #> [[2]]$a #> [1] \".^~a/{F4\" \",~e\"      \"Ff_A}NU\"  NA         #>  #> [[2]]$b #> [1]    NA FALSE    NA FALSE FALSE  TRUE FALSE    NA  TRUE #>  #>  #> [[3]] #> [[3]]$a #> 03:04:34.039662 #>              NA #> 04:33:10.532815 #> 11:22:26.590740 #> 01:19:01.872082 #> 17:26:32.341889 #>  #> [[3]]$b #> [1] FALSE    NA  TRUE    NA  TRUE  TRUE  TRUE    NA #>  #>  #> [[4]] #> [[4]]$a #> [1] TRUE   NA TRUE TRUE   NA TRUE #>  #> [[4]]$b #> NA #>  #>  #> [[5]] #> [[5]]$a #> [1]  4526    NA    NA -9351 -9970 #>  #> [[5]]$b #> [1]  5916  5183 -2492 -3734     0 #>  #>  #> [[6]] #> [[6]]$a #>  [1]    NA    NA  3786    NA     0 -8401 -6853    NA    NA    NA #>  #> [[6]]$b #>  [1]  TRUE  TRUE    NA  TRUE  TRUE    NA FALSE  TRUE FALSE  TRUE #>  #>  #> [[7]] #> [[7]]$a #> [1] NA         NA         \"oD[`\"     \"\\\\ovqQRr\" #>  #> [[7]]$b #> [1] FALSE    NA #>  #>  #> [[8]] #> [[8]]$a #>  [1]    NA -4862  1499     0    NA    NA  2558 -5005 -7239 -7605 #>  #> [[8]]$b #> [1] \"1531-03-27\" #>  #>  #> [[9]] #> [[9]]$a #> [1] NA          \"\\\\\"        \"Z,Wz>f\"    \"\\\\jtNH=#N\" NA          NA          #> [7] \"&&CK($\\\\h\" #>  #> [[9]]$b #> [1]   NA TRUE TRUE #>  #>  #> [[10]] #> [[10]]$a #> [1] NA           \"2091-08-22\" \"1142-05-25\" NA           NA           #>  #> [[10]]$b #> [1] -260825642          0         NA  186458631 #>  #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Any tibble generator — any_tibble","title":"Any tibble generator — any_tibble","text":"Generate tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any tibble generator — any_tibble","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble(rows = 3L, cols = 3L) %>% show_example() #> # A tibble: 3 × 3 #>   ...1      ...2       ...3      #>   <list>    <date>     <list>    #> 1 <fct [1]> 1882-05-26 <lgl [1]> #> 2 <fct [1]> 2942-11-09 <lgl [1]> #> 3 <fct [1]> 2743-12-12 <lgl [1]>"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Any undefined value generator — any_undefined","title":"Any undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any undefined value generator — any_undefined","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any undefined value generator — any_undefined","text":"","code":"any_undefined() %>% show_example() #> [1] NA"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Any vector generator — any_vector","title":"Any vector generator — any_vector","text":"Generate atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any vector generator — any_vector","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any vector generator — any_vector","text":"","code":"any_vector() %>% show_example() #> [1] -818061997 -458211042  933446051  514832651          0 -281164566  475289924 #> [8] -253693478 -323924961 any_vector(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [1] \"237-03-23 01:56:48 UTC\" #>  #> [[2]] #> [1] NA #>  #> [[3]] #> 14:23:19.33877 #>  #> [[4]] #> [1] \"2985-11-20 20:52:06 UTC\" #>  #> [[5]] #> [1] \"2294-01-06\" #>  #> [[6]] #> [1] \"731-08-17 14:13:07 UTC\" #>  #> [[7]] #> [1] 7981 #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] 4965 #>  #> [[10]] #> [1] 618881553 #>"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, data.frames, tibbles, data.tables, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything(any_empty = TRUE, any_undefined = TRUE)"},{"path":"/reference/anything.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any R object generator — anything","text":"any_empty Whether empty vectors data frames allowed. any_undefined Whether undefined values allowed.","code":""},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator object.","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() %>% show_example() #> data frame with 0 columns and 0 rows"},{"path":"/reference/as_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"Convert quickcheck generator hedgehog generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"as_hedgehog(generator)"},{"path":"/reference/as_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"generator quickcheck_generator object.","code":""},{"path":"/reference/as_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"quickcheck_generator object.","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"is_even <-   function(a) a %% 2L == 0L gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) %>%     as_hedgehog() %>%     hedgehog::gen.with(function(a) 2 ^ a) for_all(   a = from_hedgehog(gen_powers_of_two),   property = function(a) is_even(a) %>% testthat::expect_true() )"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_letters(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_numbers(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_alphanumeric(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_empty Whether empty character values allowed.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator object.","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() %>% show_example() #> [1] \"8]^E*x\" \"whP\"    \"x\"      \"bv\"     \"h`~\"    \"O\"      \"Z4$:\"   character_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] \"hQ\"       \"0&.<\"     \"{^\"       \"|V\\\\qgO`\" \"'!sUh4-\"  NA         #>  [7] NA         \"uGx2~\"    NA         NA         character_(len = 10L, any_empty = TRUE) %>% show_example() #>  [1] \"\"         \"\"         \"+\"        \"[(??n\"    \"-qhP78\"   \"\"         #>  [7] \"~Feh\"     \"!#Jw:d~K\" \"\"         \"zC\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator object.","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) %>% show_example() #> NULL"},{"path":"/reference/data.table_.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generators — data.table_","title":"data.table generators — data.table_","text":"Construct data.table generators similar way data.table::data.table.","code":""},{"path":"/reference/data.table_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generators — data.table_","text":"","code":"data.table_(..., rows = c(1L, 10L))"},{"path":"/reference/data.table_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generators — data.table_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data.table_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generators — data.table_","text":"quickcheck_generator object.","code":""},{"path":"/reference/data.table_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generators — data.table_","text":"","code":"data.table_(a = integer_()) %>% show_example() #>       a #> 1: 3914 data.table_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #>       a        b #> 1: 4260 AhPlaR&\" #> 2: 6818   *7BwWL #> 3: 1011   4*aec/ #> 4:  902    LF;@^ #> 5: 2180     @_!K"},{"path":"/reference/data.table_of.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generator with randomized columns — data.table_of","title":"data.table generator with randomized columns — data.table_of","text":"data.table generator randomized columns","code":""},{"path":"/reference/data.table_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generator with randomized columns — data.table_of","text":"","code":"data.table_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data.table_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generator with randomized columns — data.table_of","text":"... set unnamed generators. generated data.tables built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data.table_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generator with randomized columns — data.table_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/data.table_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generator with randomized columns — data.table_of","text":"","code":"data.table_of(logical_(), date_()) %>% show_example() #>      ...1       ...2  ...3  ...4       ...5  ...6       ...7 #>  1:  TRUE 1346-07-02 FALSE FALSE 2854-07-09 FALSE 2097-04-09 #>  2: FALSE 2633-08-25 FALSE  TRUE 1513-01-09  TRUE 1745-06-27 #>  3: FALSE 1936-03-16 FALSE  TRUE 2057-08-03 FALSE 2614-05-01 #>  4: FALSE 2832-01-17 FALSE FALSE 2458-08-01 FALSE 2973-07-31 #>  5: FALSE 1388-04-19 FALSE FALSE 1371-04-03  TRUE 1319-11-19 #>  6: FALSE 2846-09-01 FALSE  TRUE 2752-04-14 FALSE 2556-03-09 #>  7:  TRUE 1631-12-30  TRUE FALSE 1256-06-18 FALSE 2786-12-16 #>  8:  TRUE 2155-11-07  TRUE  TRUE 2293-02-20 FALSE 1732-01-28 #>  9:  TRUE 1249-10-10 FALSE FALSE 1448-01-15 FALSE 2893-05-28 #> 10:  TRUE 1640-04-06  TRUE FALSE 2441-10-05 FALSE 1989-05-30 data.table_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #>      ...1       ...2       ...3  ...4       ...5 #>  1: FALSE 1380-12-10 1721-05-24  2656 2798-06-12 #>  2:  TRUE 1452-09-23 2348-07-29 -1416 2165-01-29 #>  3:  TRUE 1788-04-06 2537-10-17   224 1603-06-21 #>  4:  TRUE 2989-07-02 1457-05-27  9057 2492-01-10 #>  5: FALSE 1144-07-29 1577-09-19 -2300 2899-05-31 #>  6: FALSE 1480-12-31 2682-10-21 -8420 1009-02-20 #>  7: FALSE 2906-03-13 2235-11-14 -8233 2955-11-27 #>  8:  TRUE 2276-09-18 2675-06-27     0 2130-09-16 #>  9: FALSE 1013-04-03 2659-04-24   107 2068-10-16 #> 10: FALSE 2165-11-08 1066-04-02  -730 1307-11-03"},{"path":"/reference/data_frame_.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generators — data_frame_","title":"Data frame generators — data_frame_","text":"Construct data frame generators similar way base::data.frame.","code":""},{"path":"/reference/data_frame_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(..., rows = c(1L, 10L))"},{"path":"/reference/data_frame_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generators — data_frame_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data_frame_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generators — data_frame_","text":"quickcheck_generator object.","code":""},{"path":"/reference/data_frame_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(a = integer_()) %>% show_example() #>       a #> 1 -6634 #> 2 -3670 #> 3   916 #> 4 -4091 data_frame_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #>       a        b #> 1  -400   %/(9Wq #> 2 -1284   OmR*l# #> 3  1392    G;U`b #> 4  1523 3cf&*(&a #> 5 -8185  #,I`SgF"},{"path":"/reference/data_frame_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generator with randomized columns — data_frame_of","title":"Data frame generator with randomized columns — data_frame_of","text":"Data frame generator randomized columns","code":""},{"path":"/reference/data_frame_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generator with randomized columns — data_frame_of","text":"","code":"data_frame_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data_frame_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generator with randomized columns — data_frame_of","text":"... set unnamed generators. generated data frames built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data_frame_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generator with randomized columns — data_frame_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/data_frame_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generator with randomized columns — data_frame_of","text":"","code":"data_frame_of(logical_(), date_()) %>% show_example() #>    ...1       ...2       ...3  ...4  ...5  ...6  ...7  ...8  ...9 ...10 #> 1 FALSE 1349-09-07 1766-09-26 FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE #> 2  TRUE 2595-02-23 2408-10-07 FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE #> 3  TRUE 1641-03-21 1627-05-29  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE #> 4 FALSE 2154-06-26 2105-12-13 FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE #> 5  TRUE 1203-08-22 1414-03-22 FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE #> 6 FALSE 1976-02-24 1062-06-07 FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE #> 7 FALSE 2089-06-19 2710-03-29  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE data_frame_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #>         ...1       ...2                ...3       ...4                ...5 #> 1      [e7s& 1365-12-04 2371-02-14 17:25:20 2885-01-02  189-01-26 13:17:57 #> 2  i0vVhdHgZ 1855-05-01 1106-12-16 08:44:11 1541-03-10  750-12-21 06:07:34 #> 3   x}E*KW[2 1158-10-14  423-12-15 08:55:48 2294-04-17 1253-07-02 09:31:44 #> 4       (e{P 1469-06-16 2888-06-18 10:04:32 1282-06-22 2889-03-25 05:03:44 #> 5   T4wqPv.2 2145-02-07 1790-07-19 05:13:15 2077-10-08 1305-10-03 20:01:58 #> 6       }[&% 2793-03-04  267-04-16 23:17:02 2389-09-04  409-09-19 08:55:38 #> 7       4TpG 2160-03-03 2126-05-04 13:40:13 2866-10-04 1538-08-30 02:45:07 #> 8       C-h% 1914-08-04 2658-11-09 09:21:35 1919-12-24 2920-03-05 14:07:43 #> 9   :<aCsKls 1080-09-06 1582-09-20 10:57:03 2447-02-07 2939-05-05 20:05:11 #> 10   KcvH3ZN 1693-02-15 2817-01-13 21:58:50 2983-11-17  407-06-17 05:02:28"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), any_na = FALSE)  date_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  date_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  date_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator object.","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() %>% show_example() #> [1] \"1473-08-29\" \"1254-07-21\" \"2448-08-02\" \"1336-04-12\" \"1283-05-12\" #> [6] \"2168-09-01\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) %>% show_example() #> [1] \"2020-01-04\" \"2020-01-01\" \"2020-01-01\" \"2020-01-03\" \"2020-01-07\" date_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] \"2373-05-16\" \"1669-02-03\" NA           \"1865-01-30\" NA           #>  [6] \"2887-02-04\" NA           NA           \"1075-06-27\" \"2377-09-03\""},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE )  double_left_bounded(   left,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_nan Whether NaN values allowed. any_inf Whether Inf/-Inf values allowed. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator object.","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() %>% show_example() #> [1] -896757909          0 -548095398  288346909 -416675263  790017647  518964321 #> [8] -298808624 double_(big_dbl = TRUE) %>% show_example() #> [1] 5.542566e+307 8.131943e+307 4.027915e+306 double_bounded(left = -5, right = 5) %>% show_example() #>  [1] -2.849737 -3.460845  2.118681 -4.210345  0.000000  4.763344  2.292785 #>  [8] -1.782531 -4.965854 -3.949224 double_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]         NA         NA         NA         NA          0  764252448 #>  [7] -662940983  201207581         NA -845955689 double_(len = 10L, any_nan = TRUE, any_inf = TRUE) %>% show_example() #>  [1]       -Inf       -Inf  349496941 -992469097        NaN  810911845 #>  [7]  987752591       -Inf -593595623          0"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal length vector generator — equal_length","title":"Equal length vector generator — equal_length","text":"Generates equal length vectors contained list.","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(..., len = c(1L, 10L))"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal length vector generator — equal_length","text":"... set named unnamed vector generators. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal length vector generator — equal_length","text":"quickcheck_generator object.","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(integer_(), double_()) %>% show_example() #> [[1]] #>  [1] -5541  4009 -1901 -4378 -5408 -6933 -7584  8234  9746  9202 #>  #> [[2]] #>  [1] -744550933 -837064812  555631093  676863033 -656133271  965150806 #>  [7] -531170647  410013591          0  169517562 #>  equal_length(a = logical_(), b = character_(), len = 5L) %>% show_example() #> $a #> [1] FALSE  TRUE  TRUE  TRUE FALSE #>  #> $b #> [1] \"Je\"      \"5BR~Vpi\" \"Q\"       \"lQ=~;0o\" \" c9f\"    #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator object.","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() %>% show_example() #> [1] $nN   h92K~ #> Levels: $nN h92K~ factor_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  1 NA  1  1  1 NA  1  1  1  1"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"Generate flat lists values coming single generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator quickcheck_generator object. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) %>% show_example() #> [[1]] #> [1] -6124 #>  #> [[2]] #> [1] 1844 #>  #> [[3]] #> [1] -1422 #>  #> [[4]] #> [1] 5448 #>  #> [[5]] #> [1] 8265 #>  #> [[6]] #> [1] -3365 #>  #> [[7]] #> [1] -5059 #>  #> [[8]] #> [1] 5332 #>  #> [[9]] #> [1] 7695 #>  #> [[10]] #> [1] -2672 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes values generator calls expectation . function must parameters matching generator names. tests number tests run. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(len = 1L),   b = numeric_(len = 1L),   property = function(a, b) testthat::expect_equal(a + b, b + a),   tests = 10L )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen object.","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator object.","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"is_even <-   function(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) %>% hedgehog::gen.with(function(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = function(a) is_even(a) %>% testthat::expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), any_na = FALSE)  hms_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  hms_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  hms_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator object.","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() %>% show_example() #> 20:40:00.121523 #> 07:44:44.086629 #> 06:34:52.372687 #> 17:29:14.394315 #> 17:59:52.447400 #> 20:37:01.483059 #> 08:32:12.427268 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) %>% show_example() #> 04:26:38.187375 #> 01:26:13.077071 hms_(len = 10L, any_na = TRUE) %>% show_example() #> 03:27:06.631576 #>              NA #> 22:09:13.556434 #> 06:49:00.965746 #>              NA #> 13:29:11.194667 #> 08:31:48.687016 #> 12:31:19.246663 #> 21:14:01.588410 #>              NA"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  integer_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_positive(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_negative(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator object.","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() %>% show_example() #> [1] -8818 -9394   428  4806 -1093 -3786  4696   238     0 integer_(big_int = TRUE) %>% show_example() #> [1]   736816680 -1730886292           0  -174129295 integer_bounded(left = -5L, right = 5L) %>% show_example() #> [1]  1  3 -3 integer_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]    NA   691  9262     0    NA    NA -5561 -5609  1255 -3302"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"Generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... set named unnamed generators.","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator object.","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) %>% show_example() #> [[1]] #> [1]  8281 -8048   311 -4286  1723  6210  3160  1185 #>  #> [[2]] #> [1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE #>  list_(a = any_vector(), b = any_vector()) %>% show_example() #> $a #> [1] \"2579-07-10 02:12:43 UTC\" \"1453-04-23 09:27:45 UTC\" #>  #> $b #>  [1] FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"Generate lists values coming single generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator quickcheck_generator object. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) %>% show_example() #> [[1]] #> [1]  -803 -3166 -7883     0  3424 #>  #> [[2]] #> [1] -9338  -621 -4407  5157  4610  -922  8510  9625 #>  #> [[3]] #> [1] 4752 #>  #> [[4]] #>  [1]  8503 -3192  3774 -5593     0 -3412  5888 -8190  1995 -5924 #>  #> [[5]] #> [1]    0 9072 #>  #> [[6]] #> [1]  5377 -8290 -2109  5076 #>  #> [[7]] #> [1] 2917 8628 9247 2150 3511 #>  #> [[8]] #> [1]  2562     0  3020  -739   495  1265 -9556 -9663  1433 #>  #> [[9]] #> [1] -9784  5045 -1547 -5398  5280 -1526 #>  #> [[10]] #> [1]   370     0     0     0 -9664  5433 -4517 -7685 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator object.","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() %>% show_example() #> [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE logical_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] FALSE  TRUE  TRUE FALSE    NA  TRUE    NA    NA FALSE FALSE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  numeric_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_positive(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_negative(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator object.","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() %>% show_example() #> [1]  1500  3875 -8377 -5401 -1367 numeric_(big_num = TRUE) %>% show_example() #> [1]     572149  672724392 1432248207 1015662317  162297194 numeric_bounded(left = -5L, right = 5L) %>% show_example() #> [1] -1.0644474  4.5947855  3.1358975 -0.8570107  0.6891515  4.2261911 -2.4046150 #> [8]  1.7091640 -4.8263062 numeric_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  9407     0 -7752  3876   572  6024 -1301  -197     0 -1527"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... set unnamed generators. prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) %>% show_example() #> [1] \":|u\\\\\"     \"a\"         \"EWN\"       \"oRbI'Ov,K\" \"F6n\\\"\"     one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) %>% show_example() #> [1] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), any_na = FALSE)  posixct_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  posixct_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  posixct_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator object.","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() %>% show_example() #> [1] \"692-06-16 08:11:18 UTC\"  \"1382-07-26 14:31:11 UTC\" #> [3] \"959-08-19 17:41:02 UTC\"  \"1505-01-23 09:29:06 UTC\" #> [5] \"2030-12-20 05:28:04 UTC\" \"753-10-16 05:19:10 UTC\"  #> [7] \"127-09-14 16:22:20 UTC\"  \"1154-06-21 20:09:19 UTC\" #> [9] \"688-02-13 18:59:57 UTC\"  posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) %>% show_example() #> [1] \"2020-02-25 16:13:33 UTC\" posixct_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] \"2511-04-30 12:22:36 UTC\" NA                        #>  [3] NA                        \"2654-06-27 23:32:41 UTC\" #>  [5] \"1849-01-13 19:35:02 UTC\" \"1641-11-27 06:00:51 UTC\" #>  [7] \"2973-09-20 18:35:52 UTC\" NA                        #>  [9] \"2208-12-08 09:48:25 UTC\" \"1147-03-23 18:42:59 UTC\""},{"path":"/reference/repeat_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly test properties of a function — repeat_test","title":"Repeatedly test properties of a function — repeat_test","text":"Repeatedly test properties function","code":""},{"path":"/reference/repeat_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(property, tests = getOption(\"quickcheck.tests\", 100L))"},{"path":"/reference/repeat_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly test properties of a function — repeat_test","text":"property function parameters includes expectation. tests number tests run.","code":""},{"path":"/reference/repeat_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly test properties of a function — repeat_test","text":"testthat expectation object.","code":""},{"path":"/reference/repeat_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(   property = function() {     num <- stats::runif(1, min = 0, max = 10)     testthat::expect_true(num >= 0 && num <= 10)   } )"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator quickcheck_generator object.","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() %>% show_example() #> [1] FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way tibble::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator object.","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) %>% show_example() #> # A tibble: 6 × 1 #>       a #>   <int> #> 1  4988 #> 2  2441 #> 3 -6950 #> 4  3530 #> 5 -3635 #> 6 -6203 tibble_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #> # A tibble: 5 × 2 #>       a b         #>   <int> <chr>     #> 1 -4756 2&3v      #> 2  7519 a~Glul}   #> 3  2904 ;=]g      #> 4  -564 MW&_2AHUS #> 5 -2818 'm^gqd~!"},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) %>% show_example() #> # A tibble: 4 × 8 #>   ...1  ...2       ...3       ...4  ...5  ...6       ...7       ...8       #>   <lgl> <date>     <date>     <lgl> <lgl> <date>     <date>     <date>     #> 1 FALSE 2321-02-27 2260-04-09 FALSE FALSE 1245-12-30 2287-12-06 1030-04-12 #> 2 TRUE  2100-07-09 1551-09-17 FALSE FALSE 1736-02-05 2609-05-06 2430-11-25 #> 3 TRUE  2396-12-18 2624-08-30 TRUE  FALSE 1237-10-26 1540-10-03 1181-04-10 #> 4 FALSE 1576-11-13 1758-01-18 FALSE FALSE 1989-06-13 1459-04-18 1271-12-10 tibble_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #> # A tibble: 10 × 5 #>    ...1         ...2 ...3       ...4        ...5                #>    <chr>       <int> <date>     <chr>       <dttm>              #>  1 \"e|3iJzQ\"    8866 1870-03-24 \"n>q\"       1872-04-02 02:42:12 #>  2 \"ARi<\"      -5280 1480-03-21 \"Kva@AD0\\\"\" 2967-12-07 03:54:18 #>  3 \"j\"         -1260 1580-08-18 \"jWr*C\"     924-10-13 19:58:35  #>  4 \"J>jY+\"     -1475 2198-10-30 \"|w\"        361-12-20 16:48:38  #>  5 \"RoL\"          40 2231-11-19 \"}A>a)\\\\f\"  1471-04-19 18:39:24 #>  6 \"hKx8 \"      -443 2293-04-21 \"lI{h#[B7$\" 2873-10-14 07:33:42 #>  7 \"[H1E&@me%\"  7115 2975-10-07 \"i(u}p\"     2004-03-22 18:58:08 #>  8 \"M5o\"       -9404 1066-06-13 \"_X\\\"m\"     765-06-21 10:57:38  #>  9 \"}\"          6400 2582-08-06 \"1\"         171-10-28 08:11:10  #> 10 \"E,Zw\"      -7023 2725-10-29 \"4po-OYYu~\" 1344-04-20 02:13:56"},{"path":[]},{"path":"/news/index.html","id":"internal-changes-0-1-3","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"quickcheck 0.1.3","text":"Prevented future failing test R 4.4.0 .atomic change.","code":""},{"path":"/news/index.html","id":"quickcheck-012","dir":"Changelog","previous_headings":"","what":"quickcheck 0.1.2","title":"quickcheck 0.1.2","text":"CRAN release: 2022-03-17","code":""},{"path":"/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"quickcheck 0.1.2","text":"Fixed bug date generator any_na = TRUE","code":""},{"path":"/news/index.html","id":"quickcheck-011","dir":"Changelog","previous_headings":"","what":"quickcheck 0.1.1","title":"quickcheck 0.1.1","text":"CRAN release: 2022-03-11","code":""},{"path":"/news/index.html","id":"internal-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"quickcheck 0.1.1","text":"Now doesn’t require R >= 4.1","code":""},{"path":"/news/index.html","id":"quickcheck-010","dir":"Changelog","previous_headings":"","what":"quickcheck 0.1.0","title":"quickcheck 0.1.0","text":"CRAN release: 2022-02-10","code":""},{"path":"/news/index.html","id":"major-breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Major breaking changes","title":"quickcheck 0.1.0","text":"default length vector generators changed 1 range 1 10. parameters form frac_ replaced any_, take logical value instead double value.","code":""},{"path":"/news/index.html","id":"features-0-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"quickcheck 0.1.0","text":"New character_letters generates character vectors letters. New character_numbers generates character vectors numbers. New character_alphanumeric generates character vectors letters numbers. New flat_list_of generates lists atomic scalars. New data_frame_ generate data.frames. New data_frame_of generate data.frames. New data.table_ generate data.tables. New data.table_of generate data.tables. New anything generates R object. New any_flat_homogeneous_list generates flat lists homogeneous elements. New any_data_frame generates data.frames. New any_data.table generates data.tables. New any_undefined generates undefined values. New equal_length generates equal length vectors. New from_hedgehog converts hedgehog quickcheck generator. New as_hedgehog converts quickcheck hedgehog generator. New repeat_test tests property repeatedly.","code":""},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
