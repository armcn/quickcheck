[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Examples.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing +","title":"Examples","text":"","code":"test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1L),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     c = numeric_(len = 1L),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           })"},{"path":"/articles/Examples.html","id":"testing-baserev","dir":"Articles","previous_headings":"","what":"Testing base::rev","title":"Examples","text":"","code":"test_that(\"reverse of reverse is identity\", {   for_all(     a = any_vector(len = c(1L, 10L)),     property = \\(a) a |> rev() |> rev() |> expect_equal(a)   ) })  test_that(\"reverse of concatenation is flipped concatenation of reversed\", {   for_all(     a = integer_(len = c(1L, 10L)),     b = integer_(len = c(1L, 10L)),     property = \\(a, b) rev(c(a, b)) |> expect_equal(c(rev(b), rev(a)))   ) })"},{"path":"/articles/Examples.html","id":"testing-stringrstr_c","dir":"Articles","previous_headings":"","what":"Testing stringr::str_c","title":"Examples","text":"","code":"test_that(\"str_c does nothing with a single input string\", {   for_all(     a = character_(len = 1L),     property = \\(a) str_c(a) |> expect_equal(a)   ) })  test_that(\"str_c returns a single string with multiple input strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     c = character_(len = 1L),     property = \\(a, b, c) str_c(a, b, c) |> length() |> expect_equal(1L)   ) })  test_that(\"concatenation of strings always contains the original strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     property = \\(a, b) {       str_c(a, b) |> str_detect(fixed(a)) |> expect_true()       str_c(a, b) |> str_detect(fixed(b)) |> expect_true()     }   ) })"},{"path":"/articles/Examples.html","id":"testing-dplyrdistinct","dir":"Articles","previous_headings":"","what":"Testing dplyr::distinct","title":"Examples","text":"","code":"test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = \\(a) expect_equal(a, a + 0)   )           }) #> Test passed 🥳  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = \\(a, b) expect_equal(a + b, b + a)   )           }) #> Test passed 😸  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) #> Test passed 🎉 library(dplyr, warn.conflicts = FALSE)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) }) #> Test passed 🥇  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) }) #> Test passed 🎊  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) }) #> Test passed 🌈"},{"path":"/index.html","id":"quickcheck-generators","dir":"","previous_headings":"","what":"Quickcheck generators","title":"Property Based Testing","text":"Many generators provided quickcheck. examples.","code":""},{"path":"/index.html","id":"atomic-vectors","dir":"","previous_headings":"Quickcheck generators","what":"Atomic vectors","title":"Property Based Testing","text":"","code":"integer_(len = 10) |> show_example() #>  [1]  2028  2772 -4457  6936     0 -8891     0  7352  8148   638 character_alphanumeric(len = 10) |> show_example() #>  [1] \"MTzA\"      \"gH4H9Raw\"  \"n3sVjh\"    \"XGXs\"      \"u6CGXHtzc\" \"nMy7Wdyu\"  #>  [7] \"TzR\"       \"YQlSHb\"    \"TzR\"       \"ytB\" posixct_(len = 10, any_na = TRUE) |> show_example()  #>  [1] \"1361-04-08 23:51:46 LMT\" \"1166-01-03 17:46:59 LMT\" #>  [3] \"1180-07-03 05:30:28 LMT\" \"0483-11-10 07:45:12 LMT\" #>  [5] \"0482-09-21 16:13:06 LMT\" \"1255-02-04 23:07:40 LMT\" #>  [7] \"2027-01-04 04:03:55 PST\" NA                        #>  [9] \"2179-02-25 08:23:19 PST\" \"1097-02-25 00:18:12 LMT\""},{"path":"/index.html","id":"lists","dir":"","previous_headings":"Quickcheck generators","what":"Lists","title":"Property Based Testing","text":"","code":"list_(a = constant(NULL), b = any_undefined()) |> show_example() #> $a #> NULL #>  #> $b #> NULL flat_list_of(logical_(), len = 3) |> show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] TRUE"},{"path":"/index.html","id":"tibbles","dir":"","previous_headings":"Quickcheck generators","what":"Tibbles","title":"Property Based Testing","text":"","code":"tibble_(a = date_(), b = hms_(), rows = 5) |> show_example() #> # A tibble: 5 x 2 #>   a          b               #>   <date>     <time>          #> 1 1003-03-13 06:14:47.017376 #> 2 1131-05-11 03:44:24.723084 #> 3 1805-09-24 08:45:19.527709 #> 4 1447-06-06 01:16:16.840266 #> 5 1190-02-05 16:13:21.056747 tibble_of(double_bounded(-10, 10), rows = 3, cols = 3) |> show_example() #> # A tibble: 3 x 3 #>    ...1  ...2   ...3 #>   <dbl> <dbl>  <dbl> #> 1  5.15  1.42 -0.516 #> 2 -8.97 -5.68  3.39  #> 3 -8.69 -1.72 -6.98 any_tibble(rows = 3, cols = 3) |> show_example() #> # A tibble: 3 x 3 #>   ...1      ...2             ...3 #>   <list>    <time>          <int> #> 1 <dbl [4]> 08:54:25.488938  6896 #> 2 <lgl [8]> 18:24:32.969608  3578 #> 3 <lgl [6]> 05:33:29.001039  4933"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used wrapping from_hedgehog. hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error: quickcheck generator can also converted hedgehog generator can used hedgehog functions.","code":"library(hedgehog)  is_even <-    \\(a) a %% 2 == 0  gen_powers_of_two <-    gen.element(1:10) |> gen.with(\\(a) 2 ^ a)  test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) |> expect_true()   ) }) #> Test passed 🥇 test_that(\"powers of two and integers are both numeric values\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     b = integer_(),     property = \\(a, b) c(a, b) |> is.numeric() |> expect_true()   ) }) #> Test passed 🥇 test_that(\"composing hedgehog with quickcheck generators fails\", {   tibble_of(from_hedgehog(gen_powers_of_two)) |> expect_error() }) #> Test passed 🎊 gen_powers_of_two <-    integer_bounded(1L, 10L, len = 1L) |>      as_hedgehog() |>      gen.with(\\(a) 2 ^ a)   test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) |> expect_true()   ) }) #> Test passed 🎉"},{"path":"/index.html","id":"fuzz-tests","dir":"","previous_headings":"","what":"Fuzz tests","title":"Property Based Testing","text":"Fuzz testing special case property based testing property tested code doesn’t fail range inputs. example fuzz testing quickcheck. Let’s say want test purrr::map function won’t fail vector input.","code":"test_that(\"map won't fail with any vector as input\", {   for_all(     a = any_vector(),     property = \\(a) purrr::map(a, identity) |> expect_silent()   ) }) #> Test passed 😸"},{"path":"/index.html","id":"repeat-tests","dir":"","previous_headings":"","what":"Repeat tests","title":"Property Based Testing","text":"Repeat tests can used repeatedly test property holds true many calls function. different regular property based tests don’t require generators. function repeat_test call function many times ensure expectation passes cases. kind test can useful testing functions randomness.","code":"test_that(\"runif generates random numbers between a min and max value\", {   repeat_test(     property = \\() {       random_number <- runif(1, min = 0, max = 10)       expect_true(random_number >= 0 && random_number <= 10)     }   ) }) #> Test passed 😀"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1] \"1509-04-09\" \"2787-02-06\" \"1083-02-11\" \"2952-09-05\" any_atomic(len = 10L, any_na = TRUE) |> show_example() #>  [1] NA                        \"2478-08-14 14:53:10 UTC\" #>  [3] \"2874-03-15 10:51:37 UTC\" \"2795-06-03 17:57:27 UTC\" #>  [5] NA                        \"858-05-11 04:46:30 UTC\"  #>  [7] \"2302-09-01 04:13:45 UTC\" \"2394-12-03 23:20:06 UTC\" #>  [9] NA                        NA"},{"path":"/reference/any_data.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data.table generator — any_data.table","title":"Random data.table generator — any_data.table","text":"Generate random data.tables.","code":""},{"path":"/reference/any_data.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data.table generator — any_data.table","text":"","code":"any_data.table(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data.table generator — any_data.table","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data.table generator — any_data.table","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_data.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data.table generator — any_data.table","text":"","code":"any_data.table() |> show_example() #>          ...1      ...2  ...3 ...4            ...5 #> 1: 2829-11-07 <list[2]> FALSE TRUE 08:18:33.575708 any_data.table(rows = 10L) |> show_example() #>          ...1       ...2               ...3  ...4       ...5  ...6      ...7 #>  1:    Mpj.f+ 1223-04-08               3444     0 Xx.mk+\\\\9| -8473 <list[2]> #>  2:    -ms6f] 1362-10-11               TRUE  4159      Pb|~\" -7441 <list[2]> #>  3: c5d m@BaL 2018-12-15               1508  -670       oSU4 -8811 <list[2]> #>  4:       .<; 1734-11-03           D)/d7~WK -7206    kFGk_Vi -1569 <list[2]> #>  5:     V'mR& 2681-06-07 337-04-13 01:35:34 -5707          _  3940 <list[2]> #>  6:       'qF 2400-04-17 747-11-24 06:31:14  3021    ]MRJ5[U  -160 <list[2]> #>  7:       )hS 1792-01-23    08:52:06.263885  6417          q   945 <list[2]> #>  8:   HOC<[0S 2832-09-02    14:01:39.045926  2968         gz -7587 <list[2]> #>  9: vUJo>0E$P 2482-04-07              -7491 -8219         U9     0 <list[2]> #> 10:     E/N-Q 1608-07-11          ,#xMM5lo,  7078         xx -9304 <list[2]> #>         ...8  ...9 ...10 #>  1:   Ja ?}d FALSE  4328 #>  2:       .W  TRUE  4586 #>  3:        m  TRUE  2523 #>  4:    K)(KP FALSE  2808 #>  5:        / FALSE -5019 #>  6:       w/  TRUE  -704 #>  7:  XB-\\\\Z& FALSE     0 #>  8: ~G|@d7+m FALSE -3808 #>  9: !Pk\\\\$?E  TRUE     0 #> 10:  &?p2Lo( FALSE -5405 any_data.table(cols = 5L, any_na = TRUE) |> show_example() #>          ...1      ...2            ...3  ...4      ...5 #> 1: 1297-01-30 <list[2]> 08:38:19.855402     0 <list[2]> #> 2: 1908-09-08 <list[2]> 21:28:51.887439    NA <list[2]> #> 3: 1790-02-03 <list[2]> 16:56:50.399437  7726 <list[2]> #> 4: 2958-08-03 <list[2]> 12:30:51.198699    NA <list[2]> #> 5: 1022-01-07 <list[2]> 07:38:21.604899  2245 <list[2]> #> 6: 1001-01-02 <list[2]> 05:42:17.160217  4180 <list[2]> #> 7:       <NA> <list[2]> 23:22:50.736630 -8116 <list[2]> #> 8: 1458-01-04 <list[2]>              NA  7599 <list[2]>"},{"path":"/reference/any_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data frame generator — any_data_frame","title":"Random data frame generator — any_data_frame","text":"Generate random data frames.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data frame generator — any_data_frame","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data frame generator — any_data_frame","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data frame generator — any_data_frame","text":"","code":"any_data_frame() |> show_example() #>                  ...1            ...2                ...3       ...4  ...5 #> 1 1866-09-20 07:01:03 02:27:01.246754 1979-03-12 03:48:30 2732-04-12 -9936 #> 2  383-12-09 00:07:50 17:54:46.973816  384-08-13 23:45:27 2095-11-29  1523 #> 3 2823-12-18 23:23:29 06:19:19.266983 2661-01-08 21:55:43 2335-11-22 -3477 #> 4 1779-05-02 02:32:24 19:59:18.383366  641-06-04 07:15:46 1507-06-25  1474 #>         ...6  ...7                ...8 #> 1 2196-04-27  ~`v} 2570-06-15 07:08:29 #> 2 2223-03-12   Qv' 1731-03-10 02:38:31 #> 3 2195-04-26   _vy 1281-10-25 00:27:12 #> 4 1733-01-21 MCguV  795-07-11 19:14:59 any_data_frame(rows = 10L) |> show_example() #>          ...1                ...2            ...3       ...4       ...5 #> 1   785784288  931-12-11 03:45:18 05:39:47.343773 -163499505  470458474 #> 2  -122858027 1343-01-22 16:50:14 08:02:07.024262  805108983 -535690533 #> 3   111147834 1522-01-28 04:09:42 03:47:28.892273  123628598   23675284 #> 4   160530772  246-06-30 15:08:34 22:26:07.661505  163805657 -427892938 #> 5   362633883 2672-07-21 05:19:50 23:11:17.471488 -735424105  433403514 #> 6  -906943741 1942-01-23 04:36:24 02:54:01.834516 -464804641  749418189 #> 7  -382971806  521-02-08 16:39:44 21:49:03.672212  893105294  545428692 #> 8           0 1094-10-24 17:58:22 18:01:36.045840  863712176  -42788826 #> 9    11141971  464-08-06 05:03:38 14:31:43.392483 -120676725  -81998154 #> 10 -846281414 1160-12-21 07:49:24 15:48:41.637698 -117642990  584724120 #>         ...6       ...7   ...8 #> 1       ac*9 2490-08-08    !W7 #> 2          6 2009-03-10   Cz]y #> 3          + 1789-11-20 o)sFN9 #> 4    @Au<]^+ 2040-01-14      / #> 5       Y|-R 2519-12-18   c#0  #> 6     '/WMgK 2100-01-07     e# #> 7      f*wD& 1427-06-15  .)lF; #> 8         0s 2172-08-14      g #> 9    ue]+;P% 2979-07-24    ogy #> 10 [zW@p.3<g 1176-06-30  t)-[7 any_data_frame(cols = 5L, any_na = TRUE) |> show_example() #>              ...1       ...2  ...3                ...4     ...5 #> 1 11:45:53.187772 -791655505 FALSE 2656-01-13 08:28:29 rcTDwWJS #> 2 14:34:29.313420 -354491960 FALSE                <NA>      O+5 #> 3 02:51:17.348336         NA FALSE 2299-08-01 20:38:54      /X0"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat homogeneous list generator — any_flat_homogeneous_list","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic vector length 1 class.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() |> show_example() #> [[1]] #> [1] \"2480-04-03\" #>  #> [[2]] #> [1] \"1099-12-30\" #>  #> [[3]] #> [1] \"2887-05-05\" #>  #> [[4]] #> [1] \"2639-04-01\" #>  #> [[5]] #> [1] \"1924-09-02\" #>  any_flat_homogeneous_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] -424292247 #>  #> [[2]] #> [1] NA #>  #> [[3]] #> [1] -48258386 #>  #> [[4]] #> [1] 804765054 #>  #> [[5]] #> [1] -436100740 #>  #> [[6]] #> [1] 855176182 #>  #> [[7]] #> [1] 578947344 #>  #> [[8]] #> [1] 0 #>  #> [[9]] #> [1] 645641766 #>  #> [[10]] #> [1] 0 #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> 04:03:16.674693 #>  #> [[2]] #> [1] \"2573-01-23 19:08:36 UTC\" #>  #> [[3]] #> 08:29:13.446183 #>  #> [[4]] #> [1] bvx(7 #> Levels: bvx(7 #>  #> [[5]] #> [1] a)L>b&3@ #> Levels: a)L>b&3@ #>  #> [[6]] #> [1] -2644 #>  #> [[7]] #> 18:29:00.408776 #>  #> [[8]] #> [1] J; #> Levels: J; #>  #> [[9]] #> [1] \"}nY#}/S\" #>  #> [[10]] #> [1] 5063 #>  any_flat_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] \"Lyc\" #>  #> [[3]] #> [1] \"1755-04-24\" #>  #> [[4]] #> 02:51:20.374738 #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] \"1551-03-31\" #>  #> [[8]] #> [1] \"5&Ak4ny8H\" #>  #> [[9]] #> [1] NA #>  #> [[10]] #> [1] \"1AUs|1h\" #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] \"1845-09-09\" #>  any_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] \"1483-06-21 06:08:16 UTC\" #>  #> [[2]] #> [1] \"1403-01-20 00:28:06 UTC\" #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] \"5-12-24 14:07:53 UTC\" #>  #> [[6]] #> [1] \"1267-12-15 08:44:45 UTC\" #>  #> [[7]] #> [1] \"2537-10-11 02:36:32 UTC\" #>  #> [[8]] #> [1] \"1327-09-02 21:27:46 UTC\" #>  #> [[9]] #> [1] \"323-07-18 06:34:17 UTC\" #>  #> [[10]] #> [1] \"1313-08-01 14:49:30 UTC\" #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 1 × 4 #>    ...1 ...2       ...3 ...4      #>   <int> <list>    <int> <list>    #> 1     0 <fct [1]> -4809 <lgl [1]> any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 5 #>    ...1       ...2       ...3  ...4            ...5       #>    <list>     <date>     <lgl> <time>          <list>     #>  1 <chr [1]>  1089-11-15 FALSE 03:56:58.736801 <date [1]> #>  2 <time [1]> 2651-10-30 FALSE 07:51:37.426133 <date [1]> #>  3 <date [1]> 1088-11-01 FALSE 17:11:05.218984 <date [1]> #>  4 <date [1]> 1459-09-11 TRUE  21:13:47.696914 <date [1]> #>  5 <fct [1]>  2192-03-15 FALSE 21:40:45.220496 <date [1]> #>  6 <lgl [1]>  1193-05-31 FALSE 23:04:24.210136 <date [1]> #>  7 <fct [1]>  2339-01-20 TRUE  09:17:13.362850 <date [1]> #>  8 <date [1]> 2612-10-15 FALSE 08:26:50.765104 <date [1]> #>  9 <dbl [1]>  2930-03-27 FALSE 04:22:19.033529 <date [1]> #> 10 <dbl [1]>  2324-02-01 TRUE  20:52:52.804566 <date [1]> any_tibble(cols = 5L, any_na = TRUE) |> show_example() #> # A tibble: 8 × 5 #>   ...1        ...2       ...3       ...4              ...5 #>   <list>      <date>     <list>     <list>           <int> #> 1 <time [5]>  1895-10-19 <fct [1]>  <named list [2]>     1 #> 2 <dbl [4]>   1086-08-11 <chr [9]>  <named list [2]>     1 #> 3 <time [9]>  2158-04-22 <time [9]> <named list [2]>     1 #> 4 <date [10]> NA         <lgl [2]>  <named list [2]>     1 #> 5 <dbl [1]>   2993-12-02 <dttm [3]> <named list [2]>     1 #> 6 <chr [8]>   2540-10-06 <date [5]> <named list [2]>     1 #> 7 <chr [3]>   2564-01-27 <chr [10]> <named list [2]>    NA #> 8 <chr [7]>   NA         <lgl [2]>  <named list [2]>     1"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Undefined value generator — any_undefined","title":"Undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Undefined value generator — any_undefined","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined() |> show_example() #> [1] NA"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] \"1056-06-11 00:16:23 UTC\" #>  any_vector(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] -6244   -49 -3545    NA #>  #> [[2]] #> [1] \"2366-04-06\" \"2512-12-09\" NA           \"1895-08-28\" \"1311-03-19\" #> [6] \"2605-04-05\" NA           #>  #> [[3]] #> [1]    NA FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE #>  #> [[4]] #> [1] NA                        NA                        #> [3] NA                        NA                        #> [5] \"105-03-13 08:21:48 UTC\"  NA                        #> [7] \"1504-05-18 22:57:55 UTC\" \"499-07-21 17:38:08 UTC\"  #> [9] \"296-11-02 10:33:53 UTC\"  #>  #> [[5]] #> [1]   NA TRUE   NA #>  #> [[6]] #> [1] \"2930-10-26\" #>  #> [[7]] #> [1] \"1669-04-06\" \"1608-01-25\" NA           NA           \"2066-09-03\" #> [6] \"2918-10-21\" \"1400-07-21\" #>  #> [[8]] #> [1]   #> Levels:   #>  #> [[9]] #> [1] \"1527-03-18\" \"1728-08-05\" \"1327-08-12\" \"2699-08-24\" NA           #>  #> [[10]] #> [1] NA  1  1 NA #>"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, data.frames, tibbles, data.tables, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything(any_empty = TRUE, any_undefined = TRUE)"},{"path":"/reference/anything.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any R object generator — anything","text":"any_empty Whether empty vectors data frames allowed. any_undefined Whether undefined values allowed.","code":""},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator generator","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() |> show_example() #> [1] NA anything(any_empty = FALSE, any_undefined = FALSE) |> show_example() #>         ...1 #> 1  190228169 #> 2 -108076033 #> 3 -578625436 #> 4  -95824241 #> 5 -378455240 #> 6  -12031873"},{"path":"/reference/as_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"Convert quickcheck generator hedgehog generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"as_hedgehog(generator)"},{"path":"/reference/as_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"generator quickcheck_generator generator","code":""},{"path":"/reference/as_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) |>     as_hedgehog() |>     hedgehog::gen.with(\\(a) 2 ^ a) for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_letters(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_numbers(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_alphanumeric(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_empty Whether empty character values allowed.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"Y (\"        \"`>8,ktgq\"   \"/'P\"        \"\\\"9\\\"`=c\"   \"*bp,.Z\"     #> [6] \"qf\\\\52L}r\"  \"nY\"         \"f*1L\"       \"KJV6&Nv\\\".\" character_(len = 10L, any_na = TRUE) |> show_example() #>  [1] NA           NA           \"\\\\['\"       \"Rpcy+,Y\"    NA           #>  [6] \"82{\\\"'*\\\"&\" \"5W\"         NA           NA           NA           character_(len = 10L, any_empty = TRUE) |> show_example() #>  [1] \"6&\"       \"UJ#\"      \"ZL\"       \"-JYH\"     \"DF<EFt\"   \"]9x{(ES@\" #>  [7] \">k~\"      \" F\"       \"W@m3'=/^\" \"'XW&Z,l>\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/data.table_.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generators — data.table_","title":"data.table generators — data.table_","text":"Construct data.table generators similar way data.table::data.table.","code":""},{"path":"/reference/data.table_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generators — data.table_","text":"","code":"data.table_(..., rows = c(1L, 10L))"},{"path":"/reference/data.table_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generators — data.table_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data.table_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generators — data.table_","text":"quickcheck_generator generator","code":""},{"path":"/reference/data.table_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generators — data.table_","text":"","code":"data.table_(a = integer_()) |> show_example() #>        a #> 1: -4361 #> 2:     0 #> 3:   -87 #> 4:  7235 #> 5: -4295 data.table_(a = integer_(), b = character_(), rows = 5L) |> show_example() #>        a        b #> 1: -7180       &o #> 2:  4261      a%J #> 3: -2426  jHYv6jB #> 4: -5422 1=JUP*QM #> 5:  5812   +[<p8="},{"path":"/reference/data.table_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data.table generator — data.table_of","title":"Random data.table generator — data.table_of","text":"Random data.table generator","code":""},{"path":"/reference/data.table_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data.table generator — data.table_of","text":"","code":"data.table_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data.table_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data.table generator — data.table_of","text":"... set unnamed generators. generated data.tables built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data.table_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data.table generator — data.table_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/data.table_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data.table generator — data.table_of","text":"","code":"data.table_of(logical_(), date_()) |> show_example() #>          ...1  ...2  ...3  ...4       ...5       ...6       ...7  ...8 #> 1: 1795-02-06 FALSE FALSE FALSE 2973-06-12 1829-01-12 2024-08-26 FALSE #> 2: 2578-02-16  TRUE FALSE FALSE 2729-08-20 2731-05-11 2177-05-13  TRUE #> 3: 1257-07-21 FALSE  TRUE  TRUE 2571-10-27 1356-11-06 1946-07-18 FALSE #> 4: 2754-07-17  TRUE  TRUE  TRUE 2094-08-29 1241-04-17 2446-12-12  TRUE #> 5: 2505-07-02 FALSE FALSE  TRUE 1434-06-08 1196-10-12 2033-08-13 FALSE data.table_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #>           ...1       ...2            ...3        ...4     ...5 #>  1:  838392669  154816362 06:02:50.388479   sCPju7pGt     ^XZ* #>  2:  171602143  210999305 13:12:24.869608   r@v]^>^?7     `L6s #>  3: -787806841          0 06:44:48.191125         gWA       TF #>  4:  298614024  509839638 20:04:12.452658          px        N #>  5: -578225744  684178508 07:28:55.127040 \\\\yI7<z7h\\\\        g #>  6:  628662276 -739865838 00:36:55.181336     w0I$)`@   4Kbr#< #>  7: -736006482  833345924 07:05:14.995739          _6     Zb&R #>  8:  520038748 -939855636 17:38:12.982987    %^d]'3RV   OMFDLO #>  9: -268328062  -58923660 04:48:48.973371         v3w ZE\\\\=nnO #> 10:  163747353  315925428 20:38:27.988508      VstL1k     y(|S"},{"path":"/reference/data_frame_.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generators — data_frame_","title":"Data frame generators — data_frame_","text":"Construct data frame generators similar way data_frame.","code":""},{"path":"/reference/data_frame_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(..., rows = c(1L, 10L))"},{"path":"/reference/data_frame_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generators — data_frame_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data_frame_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generators — data_frame_","text":"quickcheck_generator generator","code":""},{"path":"/reference/data_frame_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(a = integer_()) |> show_example() #>       a #> 1  2427 #> 2 -9631 #> 3 -9072 #> 4 -1398 #> 5  8013 #> 6 -1847 #> 7  3401 #> 8 -2907 data_frame_(a = integer_(), b = character_(), rows = 5L) |> show_example() #>       a        b #> 1  1403     T+v( #> 2  6748    h fS5 #> 3  7885 ]e$[\\\\8Z #> 4   252   HneY)> #> 5 -5732      `CG"},{"path":"/reference/data_frame_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data frame generator — data_frame_of","title":"Random data frame generator — data_frame_of","text":"Random data frame generator","code":""},{"path":"/reference/data_frame_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data frame generator — data_frame_of","text":"","code":"data_frame_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data_frame_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data frame generator — data_frame_of","text":"... set unnamed generators. generated data frames built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data_frame_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data frame generator — data_frame_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/data_frame_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data frame generator — data_frame_of","text":"","code":"data_frame_of(logical_(), date_()) |> show_example() #>         ...1  ...2  ...3 ...4       ...5 #> 1 1545-01-19  TRUE  TRUE TRUE 1567-08-17 #> 2 2017-09-06 FALSE  TRUE TRUE 1768-09-17 #> 3 1883-11-17 FALSE FALSE TRUE 2154-02-05 data_frame_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #>          ...1       ...2      ...3       ...4  ...5 #> 1  1753-05-11  375533702        $A 2206-11-24 -9040 #> 2  2063-09-09 -437207856     6E0e* 1561-01-07 -1124 #> 3  2288-09-12  935049995 (;\\\\V9)qo 2013-01-21  3474 #> 4  2548-10-27  657167660       W4h 1985-08-10 -3314 #> 5  1997-01-14  865863556       B)B 1794-05-06     0 #> 6  2342-02-01 -287708065    |\"M@#7 1388-12-02  2428 #> 7  1907-03-27   87532003   #WL*%0e 2803-07-02 -4916 #> 8  2293-05-07  438285269 za3D@V}+c 2848-09-08     0 #> 9  2153-03-14  815356442     .h|\"0 2793-10-06     0 #> 10 1701-10-26  894521831         G 2173-01-28  1555"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), any_na = FALSE)  date_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  date_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  date_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"2777-05-15\" \"1640-10-28\" \"1469-11-30\" \"2291-11-22\" \"1991-07-20\" #> [6] \"2104-07-21\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-01\" \"2020-01-01\" \"2020-01-02\" \"2020-01-04\" \"2020-01-07\" #> [6] \"2020-01-10\" \"2020-01-03\" \"2020-01-02\" date_(len = 10L, any_na = TRUE) |> show_example() #>  [1] \"1043-08-14\" \"2271-07-01\" \"1051-06-27\" \"2561-06-05\" \"1420-07-01\" #>  [6] \"2632-02-25\" \"1937-11-20\" NA           \"2903-12-31\" \"2205-11-22\""},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE )  double_left_bounded(   left,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_nan Whether NaN values allowed. any_inf Whether Inf/-Inf values allowed. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1] -492970238 -325988856 -207298622 -608827305          0 double_(big_dbl = TRUE) |> show_example() #> [1]  1.849754e+307 -6.981825e+307 double_bounded(left = -5, right = 5) |> show_example() #> [1] -2.5873208 -0.6870648 -0.4577541  0.0000000 -4.3910986 double_(len = 10L, any_na = TRUE) |> show_example() #>  [1]          0 -402019064  657368520  147560138         NA  103297395 #>  [7] -365047515  802230156 -178284771  187741153 double_(len = 10L, any_nan = TRUE, any_inf = TRUE) |> show_example() #>  [1]        Inf        Inf  142374272  171024891 -146391107        NaN #>  [7] -756232820       -Inf   95286869        NaN"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal length vector generator — equal_length","title":"Equal length vector generator — equal_length","text":"Generates equal length vectors contained list.","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(..., len = c(1L, 10L))"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal length vector generator — equal_length","text":"... set vector generators. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal length vector generator — equal_length","text":"quickcheck_generator generator","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(integer_(), double_()) |> show_example() #> [[1]] #> [1] -8022  2372     0  3837  -600  -952 -9098 #>  #> [[2]] #> [1] -307206765 -607317546 -670114407          0 -333963998  730543363 -260610812 #>  equal_length(a = logical_(), b = character_(), len = 5L) |> show_example() #> $a #> [1]  TRUE FALSE FALSE  TRUE FALSE #>  #> $b #> [1] \"|=V5({Rk\" \"l\"        \"8# QQ=4+\" \"S8;9*4@\"  \"F\"        #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] }:\"jy)J   )uuw!G,q& pPpq      7~Jt)@~   jao>=%    18?mkdw&q v&eQ:M    #> [8] `;        #> Levels: }:\"jy)J )uuw!G,q& pPpq 7~Jt)@~ jao>=% 18?mkdw&q v&eQ:M `; factor_(len = 10L, any_na = TRUE) |> show_example() #>  [1]  1  1  1 NA  1  1 NA  1 NA  1"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"generate flat lists values coming single input generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] 9289 #>  #> [[2]] #> [1] -6403 #>  #> [[3]] #> [1] 0 #>  #> [[4]] #> [1] -8708 #>  #> [[5]] #> [1] 5730 #>  #> [[6]] #> [1] -1687 #>  #> [[7]] #> [1] 8487 #>  #> [[8]] #> [1] -2454 #>  #> [[9]] #> [1] 167 #>  #> [[10]] #> [1] 6539 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen generator","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) |> hedgehog::gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), any_na = FALSE)  hms_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  hms_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  hms_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 03:36:48.218411 #> 20:29:24.833368 #> 10:47:15.552092 #> 14:12:56.320251 #> 06:53:32.715562 #> 14:36:09.300435 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 04:45:54.684794 #> 11:36:59.798303 #> 03:30:02.303793 hms_(len = 10L, any_na = TRUE) |> show_example() #>              NA #> 17:46:09.277848 #> 06:47:35.077706 #> 17:50:07.430287 #> 18:02:19.330600 #> 05:45:24.394330 #> 09:19:01.441721 #> 07:55:52.982984 #> 06:48:57.374678 #> 20:53:11.769040"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  integer_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_positive(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_negative(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1] -8242  5280 -5926  -728 -9585 -3364 integer_(big_int = TRUE) |> show_example() #> [1]  1221196907  -258984015  1398883270   499462857  1749049027           0 #> [7] -2120925713 -1447481996   173752475 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1] -1 -1  0  5  0 -3 integer_(len = 10L, any_na = TRUE) |> show_example() #>  [1]  8381     0   694 -7072 -2474    NA -3535     0    NA  6440"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1] -9417 -4808     0     0 #>  #> [[2]] #> [1]  TRUE  TRUE FALSE FALSE  TRUE FALSE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> [1] %5T       z6k+/g    \"         2-8i      *nUH      RHD:;=    mWkGj<8@D #> [8] R\"Pv      #> Levels: %5T z6k+/g \" 2-8i *nUH RHD:;= mWkGj<8@D R\"Pv #>  #> $b #> $b[[1]] #> [1] \"2513-02-13\" #>  #> $b[[2]] #> [1] 839075360 #>  #> $b[[3]] #> [1] \"1287-07-09\" #>  #> $b[[4]] #> 18:03:44.814784 #>  #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] -9144 -6260 #>  #> [[2]] #> [1]     0 -7671     0  8689  6208 -6778  1924 #>  #> [[3]] #> [1] 5180    0    0    0 #>  #> [[4]] #> [1]  7825  1201  1904  8345 -5515  1319 #>  #> [[5]] #> [1] -6830  1723 -9663   -33  1165  6265  9262 -4103 #>  #> [[6]] #>  [1]  5627  6847  2255  6353  1351     0  3778 -8510 -6577 -1213 #>  #> [[7]] #> [1]     0 -8439 -6805     0  9412 -1646 #>  #> [[8]] #> [1]  2161 -1441  2266 -9731 -9946 -5236 -9107 #>  #> [[9]] #> [1]   161 -9892  8540  4871  3968  6428  7211 #>  #> [[10]] #> [1] -6843 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1] FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE logical_(len = 10L, any_na = TRUE) |> show_example() #>  [1]  TRUE  TRUE FALSE    NA  TRUE    NA    NA FALSE FALSE FALSE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  numeric_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_positive(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_negative(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1] 9501 2099 numeric_(big_num = TRUE) |> show_example() #> [1]  1286384056 -1925677283  -907425255  1778780047   827943058  -846128947 #> [7]  1692346046 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1] 0.7042856 numeric_(len = 10L, any_na = TRUE) |> show_example() #>  [1]        NA         0         0        NA  16682142        NA        NA #>  [8]         0 334704408        NA"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1] \"k`U?x&S\"   \"<?5C|\"     \"~G\"        \"MFH;Z{s\"   \"s1\"        \"t'P>?r[TZ\" one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> [1]  TRUE FALSE FALSE  TRUE  TRUE FALSE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), any_na = FALSE)  posixct_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  posixct_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  posixct_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"2008-02-08 22:41:23 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-07-27 17:23:51 UTC\" posixct_(len = 10L, any_na = TRUE) |> show_example() #>  [1] \"1894-10-23 21:59:24 UTC\" NA                        #>  [3] \"1261-07-02 16:25:44 UTC\" \"891-05-30 16:30:03 UTC\"  #>  [5] \"2967-12-28 16:04:27 UTC\" \"42-12-31 04:46:08 UTC\"   #>  [7] \"1847-12-09 20:52:59 UTC\" \"2537-12-29 16:09:24 UTC\" #>  [9] \"781-07-11 03:50:24 UTC\"  \"2359-01-09 21:06:23 UTC\""},{"path":"/reference/repeat_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly test properties of a function — repeat_test","title":"Repeatedly test properties of a function — repeat_test","text":"Repeatedly test properties function","code":""},{"path":"/reference/repeat_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(property, tests = getOption(\"quickcheck.tests\", 100L))"},{"path":"/reference/repeat_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly test properties of a function — repeat_test","text":"property anonymous function arguments includes expectation. tests number tests run.","code":""},{"path":"/reference/repeat_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly test properties of a function — repeat_test","text":"testthat expectation object.","code":""},{"path":"/reference/repeat_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(   property = \\() {     num <- stats::runif(1, min = 0, max = 10)     testthat::expect_true(num >= 0 && num <= 10)   } )"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1]  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 3 × 1 #>       a #>   <int> #> 1 -6007 #> 2  3632 #> 3  8893 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b          #>   <int> <chr>      #> 1  6167 \"sD/''GzO\" #> 2 -5837 \"oR7D\"     #> 3  6263 \"NZEJ'_\"   #> 4  6691 \"P1,bp$\"   #> 5  5099 \"9zTJo\\\\I\""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 9 × 1 #>   ...1       #>   <date>     #> 1 2539-04-06 #> 2 2365-02-15 #> 3 2855-05-30 #> 4 1325-11-26 #> 5 2803-09-10 #> 6 2236-05-03 #> 7 2033-02-10 #> 8 2493-03-21 #> 9 1071-10-24 tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>           ...1 ...2       ...3            ...4            ...5  #>          <dbl> <date>     <time>          <time>          <lgl> #>  1  239874369. 1649-09-08 13:48:28.474291 23:18:27.841802 TRUE  #>  2  630694874. 2640-08-17 18:22:28.377017 09:06:07.013665 FALSE #>  3  984971650. 1500-09-07 12:18:12.752006 21:25:14.641444 TRUE  #>  4 -384132444. 2129-10-21 19:47:15.686638 09:43:38.480967 FALSE #>  5 -843413780. 1385-08-16 17:38:14.360010 23:11:34.715109 TRUE  #>  6 -365322415. 1803-05-11 13:09:05.590960 18:27:14.064134 FALSE #>  7  -64795796. 2501-03-23 10:08:38.717927 07:40:04.358795 TRUE  #>  8 -156607223. 2874-03-08 16:34:06.774256 01:45:19.558883 TRUE  #>  9   56591524. 2443-04-12 22:46:56.515613 18:42:18.335808 TRUE  #> 10          0  2823-06-05 12:12:53.986574 18:12:37.872490 FALSE"},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
