[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Examples.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing +","title":"Examples","text":"","code":"test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1L),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     c = numeric_(len = 1L),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           })"},{"path":"/articles/Examples.html","id":"testing-baserev","dir":"Articles","previous_headings":"","what":"Testing base::rev","title":"Examples","text":"","code":"test_that(\"reverse of reverse is identity\", {   for_all(     a = any_vector(len = c(1L, 10L)),     property = \\(a) a |> rev() |> rev() |> expect_equal(a)   ) })  test_that(\"reverse of concatenation is flipped concatenation of reversed\", {   for_all(     a = integer_(len = c(1L, 10L)),     b = integer_(len = c(1L, 10L)),     property = \\(a, b) rev(c(a, b)) |> expect_equal(c(rev(b), rev(a)))   ) })"},{"path":"/articles/Examples.html","id":"testing-stringrstr_c","dir":"Articles","previous_headings":"","what":"Testing stringr::str_c","title":"Examples","text":"","code":"test_that(\"str_c does nothing with a single input string\", {   for_all(     a = character_(len = 1L),     property = \\(a) str_c(a) |> expect_equal(a)   ) })  test_that(\"str_c returns a single string with multiple input strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     c = character_(len = 1L),     property = \\(a, b, c) str_c(a, b, c) |> length() |> expect_equal(1L)   ) })  test_that(\"concatenation of strings always contains the original strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     property = \\(a, b) {       str_c(a, b) |> str_detect(fixed(a)) |> expect_true()       str_c(a, b) |> str_detect(fixed(b)) |> expect_true()     }   ) })"},{"path":"/articles/Examples.html","id":"testing-dplyrdistinct","dir":"Articles","previous_headings":"","what":"Testing dplyr::distinct","title":"Examples","text":"","code":"test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = \\(a) expect_equal(a, a + 0)   )           }) #> Test passed 😸  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = \\(a, b) expect_equal(a + b, b + a)   )           }) #> Test passed 😸  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) #> Test passed 🌈 library(dplyr, warn.conflicts = FALSE)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) }) #> Test passed 🥳  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) }) #> Test passed 🎉  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) }) #> Test passed 🎊"},{"path":"/index.html","id":"quickcheck-generators","dir":"","previous_headings":"","what":"Quickcheck generators","title":"Property Based Testing","text":"Many generators provided quickcheck. examples.","code":""},{"path":"/index.html","id":"atomic-vectors","dir":"","previous_headings":"Quickcheck generators","what":"Atomic vectors","title":"Property Based Testing","text":"","code":"integer_(len = 10) |> show_example() #>  [1] -6439 -7255 -8538 -4753 -7722     0     0 -9116  -981  7219 character_alphanumeric(len = 10) |> show_example() #>  [1] \"4nRd0\"     \"xHZ\"       \"Cr\"        \"h\"         \"IYQ\"       \"EN9mLq530\" #>  [7] \"8gCYVI\"    \"8\"         \"3fq\"       \"buD\" posixct_(len = 10, any_na = TRUE) |> show_example()  #>  [1] \"0540-10-28 15:39:47 LMT\" \"1710-08-04 22:32:48 LMT\" #>  [3] NA                        NA                        #>  [5] NA                        \"2560-01-25 11:40:22 PST\" #>  [7] \"2775-08-25 15:59:04 PDT\" \"1328-06-08 23:42:18 LMT\" #>  [9] \"1514-12-20 01:15:39 LMT\" \"2201-08-15 14:26:48 PDT\""},{"path":"/index.html","id":"lists","dir":"","previous_headings":"Quickcheck generators","what":"Lists","title":"Property Based Testing","text":"","code":"list_(a = constant(NULL), b = any_undefined()) |> show_example() #> $a #> NULL #>  #> $b #> [1] NA flat_list_of(logical_(), len = 3) |> show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] FALSE"},{"path":"/index.html","id":"tibbles","dir":"","previous_headings":"Quickcheck generators","what":"Tibbles","title":"Property Based Testing","text":"","code":"tibble_(a = date_(), b = hms_(), rows = 5) |> show_example() #> # A tibble: 5 x 2 #>   a          b               #>   <date>     <time>          #> 1 2556-03-01 06:54:03.370342 #> 2 1674-02-21 00:24:27.965290 #> 3 1067-01-06 02:55:22.667964 #> 4 2163-07-01 06:41:40.328154 #> 5 2175-03-31 09:35:31.354103 tibble_of(double_bounded(-10, 10), rows = 3, cols = 3) |> show_example() #> # A tibble: 3 x 3 #>    ...1  ...2   ...3 #>   <dbl> <dbl>  <dbl> #> 1  1.20  7.22  1.60  #> 2  3.01 -8.17 -0.583 #> 3  0    -9.76  4.06 any_tibble(rows = 3, cols = 3) |> show_example() #> # A tibble: 3 x 3 #>   ...1     ...2      ...3      #>   <fct>    <fct>     <list>    #> 1 *7|27<r@ '6VlypbL  <dbl [1]> #> 2 vg       oMP_      <dbl [1]> #> 3 (+JmT{|1 0AaJhuatl <dbl [1]>"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used wrapping from_hedgehog. hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error: quickcheck generator can also converted hedgehog generator can used hedgehog functions.","code":"library(hedgehog)  is_even <-    \\(a) a %% 2 == 0  gen_powers_of_two <-    gen.element(1:10) |> gen.with(\\(a) 2 ^ a)  test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) |> expect_true()   ) }) #> Test passed 😀 test_that(\"powers of two and integers are both numeric values\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     b = integer_(),     property = \\(a, b) c(a, b) |> is.numeric() |> expect_true()   ) }) #> Test passed 🥳 test_that(\"composing hedgehog with quickcheck generators fails\", {   tibble_of(from_hedgehog(gen_powers_of_two)) |> expect_error() }) #> Test passed 🎉 gen_powers_of_two <-    integer_bounded(1L, 10L, len = 1L) |>      as_hedgehog() |>      gen.with(\\(a) 2 ^ a)   test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = \\(a) is_even(a) |> expect_true()   ) }) #> Test passed 😀"},{"path":"/index.html","id":"fuzz-tests","dir":"","previous_headings":"","what":"Fuzz tests","title":"Property Based Testing","text":"Fuzz testing special case property based testing property tested code doesn’t fail range inputs. example fuzz testing quickcheck. Let’s say want test purrr::map function won’t fail vector input.","code":"test_that(\"map won't fail with any vector as input\", {   for_all(     a = any_vector(),     property = \\(a) purrr::map(a, identity) |> expect_silent()   ) }) #> Test passed 🥇"},{"path":"/index.html","id":"repeat-tests","dir":"","previous_headings":"","what":"Repeat tests","title":"Property Based Testing","text":"Repeat tests can used repeatedly test property holds true many calls function. different regular property based tests don’t require generators. function repeat_test call function many times ensure expectation passes cases. kind test can useful testing functions randomness.","code":"test_that(\"runif generates random numbers between a min and max value\", {   repeat_test(     property = \\() {       random_number <- runif(1, min = 0, max = 10)       expect_true(random_number >= 0 && random_number <= 10)     }   ) }) #> Test passed 🌈"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1]  TRUE  TRUE FALSE any_atomic(len = 10L, any_na = TRUE) |> show_example() #>  [1]  228358824   -9724014         NA  235336243         NA          0 #>  [7]         NA  746338789 -528884283 -636825673"},{"path":"/reference/any_data.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data.table generator — any_data.table","title":"Random data.table generator — any_data.table","text":"Generate random data.tables.","code":""},{"path":"/reference/any_data.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data.table generator — any_data.table","text":"","code":"any_data.table(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data.table generator — any_data.table","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data.table generator — any_data.table","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_data.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data.table generator — any_data.table","text":"","code":"any_data.table() |> show_example() #>          ...1      ...2      ...3       ...4  ...5      ...6               ...7 #> 1: 2560-04-25 <list[2]>        NY  482896030     0      Z'W9         2718-08-31 #> 2: 1500-12-25 <list[2]> 3C(xpsp[8 -238337170  5826       f''                 R% #> 3: 1698-11-27 <list[2]>         I  892651975  4572         b 989-06-09 09:54:12 #> 4: 1773-04-05 <list[2]>  w^^PXZ[h  453564791 -4053 yc07|(4@L              FALSE #> 5: 1768-12-08 <list[2]>     0epc*  460571848 -4292  j]djK)wa              -8045 #>                   ...8 #> 1:  654-12-18 17:08:16 #> 2: 1710-08-04 00:12:44 #> 3: 2871-05-28 02:27:53 #> 4:  466-05-28 18:42:20 #> 5: 2235-09-06 05:55:24 any_data.table(rows = 10L) |> show_example() #>                ...1            ...2                ...3            ...4 #>  1: 09:35:25.361628 08:11:08.568587               FALSE 04:17:28.878473 #>  2: 04:52:04.303625 10:10:16.307397     19:11:06.074051 08:06:19.140012 #>  3: 03:04:05.758066 14:12:17.285087                TRUE 02:57:58.159125 #>  4: 16:49:50.180187 14:13:59.192910                %P8R 10:06:19.782088 #>  5: 11:47:35.078798 10:50:58.026041             Qt+OC.I 12:28:48.418248 #>  6: 17:10:21.623990 16:21:09.544760             |HekO-F 23:55:31.598189 #>  7: 21:46:54.854627 19:29:47.637022 1917-02-28 02:39:17 13:57:11.737696 #>  8: 08:14:49.712585 03:49:41.384388 1574-08-02 10:58:59 13:20:19.917216 #>  9: 01:17:02.431907 04:49:23.968833               -9608 09:19:36.037170 #> 10: 21:28:57.698726 20:49:53.520549                TRUE 10:30:14.365266 #>                                                                                                    ...5 #>  1:                               -978780262,  41487678, 350743391,         0,-203630330,-995697550,... #>  2:                                                              TRUE,FALSE, TRUE, TRUE,FALSE,FALSE,... #>  3: 07:02:36.138169,16:14:43.069535,04:25:39.055033,08:01:54.902963,17:13:47.768303,12:44:43.227364,... #>  4:                                                                                               FALSE #>  5:                                                                                         0, 969,5840 #>  6:                                                              TRUE, TRUE, TRUE,FALSE,FALSE,FALSE,... #>  7:                                                                                                   k #>  8:                                -77751604, -11492531,-710909377,-198912622, 871476698,-185618194,... #>  9:                                                           r&pTz,n,p32o,u,Lq?%,!H4[.=k7=,f2`D0N,,... #> 10:                                                               YWe<,495A,MB#P.W,Oa]OimF,K9MAU,t ,... any_data.table(cols = 5L, any_na = TRUE) |> show_example() #>               ...1            ...2            ...3            ...4      ...5 #> 1:      1105-09-22      -971009246 20:23:31.799336 03:18:24.260170 <list[2]> #> 2: 23:33:13.524776      1157-05-04 11:30:10.372778 18:20:01.197221 <list[2]> #> 3:           -2276           -9578 12:21:13.577236 23:58:13.718084 <list[2]> #> 4:      -585406379       m-6;A(M^) 01:29:19.671075 10:01:06.624928 <list[2]> #> 5:      1143-09-28           FALSE 20:41:09.850693              NA <list[2]> #> 6:              $# 18:45:58.318952              NA 09:35:05.969200 <list[2]>"},{"path":"/reference/any_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data frame generator — any_data_frame","title":"Random data frame generator — any_data_frame","text":"Generate random data frames.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data frame generator — any_data_frame","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data frame generator — any_data_frame","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data frame generator — any_data_frame","text":"","code":"any_data_frame() |> show_example() #>         ...1            ...2       ...3 ...4       ...5     ...6    ...7 #> 1 1760-02-05 16:07:04.258324 -812630672 5006 -680356258       s6 GdT0WuX #> 2 1999-07-21 07:25:38.820601  167036919 4722 -848937520 (,.GDb7#  a-l\"mM #>        ...8    ...9 #> 1 *Zp[9j*{, k&v)[-q #> 2         %      st any_data_frame(rows = 10L) |> show_example() #>       ...1      ...2       ...3  ...4                ...5            ...6 #> 1    potw,      >ZPN 1310-06-05  TRUE  603-02-26 10:09:02 15:53:32.621466 #> 2   9[BP13     GLe+r 1236-05-04 FALSE 2841-10-08 08:40:28 13:36:08.174020 #> 3  r&4Cm%x       ()t 2540-01-08  TRUE 1279-04-24 18:36:23 23:47:05.305407 #> 4     hb w {BWjHlA=Y 1445-07-21 FALSE 2593-03-26 16:17:24 08:31:23.394869 #> 5    D?3=T  'TM^Rf>L 1332-01-30 FALSE 1022-10-31 03:10:38 22:18:25.655397 #> 6     6yL&      VSYX 2709-01-07 FALSE  159-09-04 19:00:41 07:04:36.146148 #> 7        D       C!v 2564-09-18  TRUE   45-08-06 22:46:36 11:36:34.668981 #> 8  |xto1ME     xr${` 1533-02-27 FALSE   72-04-28 21:04:10 05:34:16.918712 #> 9        z         K 2168-12-06 FALSE 2992-02-12 06:00:02 03:37:45.480504 #> 10       k t5r{O|\\\\[ 1704-01-11  TRUE 1643-08-11 10:20:49 08:49:04.508274 #>       ...7       ...8 #> 1    P=?5B 1181-05-09 #> 2  x;7P>.F 2131-10-04 #> 3        R 2301-01-15 #> 4       V& 2106-04-21 #> 5      E V 2635-06-05 #> 6   l1B`7} 1605-05-02 #> 7     @TV! 1817-06-17 #> 8      E V 2681-06-06 #> 9     \"\"?Q 1572-04-12 #> 10     k%y 2743-08-29 any_data_frame(cols = 5L, any_na = TRUE) |> show_example() #>              ...1            ...2     ...3 ...4  ...5 #> 1 20:38:42.751786 03:26:19.257749     Rz~_ TRUE -2625 #> 2              NA 15:16:45.351362 uXL|St6\"   NA     0"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat homogeneous list generator — any_flat_homogeneous_list","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic vector length 1 class.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() |> show_example() #> [[1]] #> [1] \"2913-05-28\" #>  #> [[2]] #> [1] \"2251-10-21\" #>  #> [[3]] #> [1] \"2442-11-03\" #>  #> [[4]] #> [1] \"1639-04-21\" #>  #> [[5]] #> [1] \"1972-06-18\" #>  #> [[6]] #> [1] \"2104-12-24\" #>  #> [[7]] #> [1] \"2355-06-09\" #>  #> [[8]] #> [1] \"1061-12-06\" #>  #> [[9]] #> [1] \"2090-12-30\" #>  any_flat_homogeneous_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] \"268-12-18 17:36:07 UTC\" #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] \"1091-03-24 01:31:04 UTC\" #>  #> [[6]] #> [1] \"676-06-26 20:54:15 UTC\" #>  #> [[7]] #> [1] \"2961-03-20 07:04:07 UTC\" #>  #> [[8]] #> [1] \"391-12-06 16:56:19 UTC\" #>  #> [[9]] #> [1] NA #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] \"jZ#&_Yb3`\" #>  #> [[2]] #> [1] \"^c8Pu!$Q%\" #>  #> [[3]] #> 14:53:18.732384 #>  #> [[4]] #> [1] j6WbkU&\"2 #> Levels: j6WbkU&\"2 #>  #> [[5]] #> [1] \"*,XMpR\" #>  #> [[6]] #> [1] -297945908 #>  any_flat_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] 0 #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] K8\\\\` #> Levels: K8\\\\` #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] \"1^s4. U\" #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] 574471081 #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [[1]]$a #> [1] \"Kxm5I/6$|\" #>  #> [[1]]$b #> 00:11:13.485011 #> 16:30:22.531880 #>  #>  #> [[2]] #> [[2]]$a #>  [1] -973452537 -732626508 -776317258 -561020009 -449432665  407730310 #>  [7]  303159812 -418316975 -262554333   27910966 #>  #> [[2]]$b #> [1] aWr#gx%P! sJIZ<O    r4DoFt,R  (fJ\\\\_1ob #T        #> Levels: aWr#gx%P! sJIZ<O  r4DoFt,R (fJ\\\\_1ob #T #>  #>  #> [[3]] #> [[3]]$a #> [1] \"1137-09-27 15:04:54 UTC\" \"622-07-08 18:50:17 UTC\"  #> [3] \"1201-10-23 20:22:00 UTC\" \"780-10-06 02:37:47 UTC\"  #> [5] \"492-10-24 17:28:04 UTC\"  \"946-09-18 00:29:17 UTC\"  #> [7] \"2553-09-19 06:30:57 UTC\" \"2831-07-08 17:59:57 UTC\" #> [9] \"2777-12-07 09:39:00 UTC\" #>  #> [[3]]$b #> [1] \"740-10-18 04:16:26 UTC\" \"837-09-08 08:00:32 UTC\" \"499-02-22 19:09:37 UTC\" #>  #>  #> [[4]] #> [[4]]$a #> [1]  4654  7321  5267  7425  1348  6969  -280  9573 -5741 #>  #> [[4]]$b #> 10:31:56.331145 #> 19:48:50.221101 #> 00:50:17.571579 #> 07:02:34.399877 #> 22:14:03.243121 #> 00:09:50.501167 #> 10:40:19.450273 #>  #>  #> [[5]] #> [[5]]$a #> [1] z}Vc7jlV #> Levels: z}Vc7jlV #>  #> [[5]]$b #> [1] QORW      5 *Ohs    <.WBP5fc  {0#u$     ?,K^p0zsG l0k       #> Levels: QORW 5 *Ohs <.WBP5fc {0#u$ ?,K^p0zsG l0k #>  #>  #> [[6]] #> [[6]]$a #> [1] \"'\"         \"R\"         \"4H3ds#s]w\" \" _MKGoZ\"   #>  #> [[6]]$b #> [1] -484314871 -558888803 -365625353          0  619235686 -760433067   81462707 #>  #>  #> [[7]] #> [[7]]$a #> 04:16:25.561324 #> 18:36:54.178473 #>  #> [[7]]$b #> [1] \"n^KFFOa.\" \"5dT\"      \"59\"       \"fCCw 2,Q\" #>  #>  #> [[8]] #> [[8]]$a #>  [1]  379471943 -728301639  902285529          0  -47264911          0 #>  [7]   13891583  112926130 -179193070          0 #>  #> [[8]]$b #> [1] -273607356 -537365389  997512377 -867025330          0 #>  #>  any_list(len = 10L, any_na = TRUE) |> show_example() #> [[1]] #> [[1]]$a #> 03:51:30.899686 #>              NA #>  #> [[1]]$b #> [1]  TRUE    NA FALSE FALSE  TRUE    NA    NA #>  #>  #> [[2]] #> [[2]]$a #> [1] NA  1 #>  #> [[2]]$b #> [1] NA          \"J\"         \"(mVBX&a''\" \"D\"         NA          \"s\\\"P@kdL\"  #>  #>  #> [[3]] #> [[3]]$a #> [1] FALSE FALSE    NA  TRUE  TRUE    NA  TRUE #>  #> [[3]]$b #> 09:51:48.666137 #> 12:56:49.279175 #> 21:39:48.227137 #> 05:21:29.265436 #> 19:25:42.139787 #> 22:15:30.988521 #> 00:25:25.007914 #>  #>  #> [[4]] #> [[4]]$a #> [1] NA                       \"586-09-05 06:09:07 UTC\" #>  #> [[4]]$b #> [1]  -357    NA  8008  3595  8373 -8765     0    NA #>  #>  #> [[5]] #> [[5]]$a #> [1] \"d[Y+I?AR8\"  \"E+X%\\\"\"     \"1vMw!(f#\"   \"H[}L50:\\\"\"  \"Td>A7N8\\\\P\" #> [6] \"?Vt-]\"      \"CW\\\"\"       \"H^r\"        #>  #> [[5]]$b #> [1] TRUE #>  #>  #> [[6]] #> [[6]]$a #> [1] NA #>  #> [[6]]$b #> [1] NA                        \"2512-06-17 19:04:57 UTC\" #> [3] NA                        NA                        #> [5] \"2923-03-02 10:49:31 UTC\" NA                        #>  #>  #> [[7]] #> [[7]]$a #> [1] \"1892-12-28\" \"1573-05-22\" \"2479-12-04\" NA           \"2112-05-16\" #> [6] \"1763-08-02\" #>  #> [[7]]$b #> [1]  1  1  1  1  1 NA  1 NA #>  #>  #> [[8]] #> [[8]]$a #> [1] -440543247 #>  #> [[8]]$b #> 01:58:05.432768 #> 02:02:48.023116 #>  #>  #> [[9]] #> [[9]]$a #>  [1] \"1516-07-29\" \"1055-11-01\" \"2291-08-28\" \"1372-06-17\" NA           #>  [6] \"2985-11-21\" NA           \"2675-08-05\" \"1957-07-24\" \"1903-03-28\" #>  #> [[9]]$b #> 22:52:45.393610 #> 04:13:40.166589 #>              NA #> 20:01:29.235598 #> 22:28:07.536916 #> 12:24:05.510142 #>  #>  #> [[10]] #> [[10]]$a #> [1]  147307296 -711838904 -734144032 #>  #> [[10]]$b #> [1]  368994744         NA  597843959         NA   20763966 -412378578         NA #> [8]  248486062 #>  #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 6 × 2 #>          ...1 ...2       #>         <dbl> <list>     #> 1  386269209. <dttm [6]> #> 2  358710395. <dbl [8]>  #> 3  920249716. <int [5]>  #> 4  -46219954. <time [7]> #> 5   69139764. <dttm [1]> #> 6 -246172474. <date [8]> any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 9 #>    ...1       ...2     ...3  ...4  ...5   ...6   ...7  ...8         ...9         #>    <date>     <fct>    <lgl> <lis> <list> <list> <chr> <list>       <list>       #>  1 2465-10-28 \"sU'\\\"'… TRUE  <fct> <time> <chr>  ]2/y… <named list> <named list> #>  2 2836-04-20 \"^Ww\"    FALSE <fct> <date> <dttm> -fi:… <named list> <named list> #>  3 2450-10-31 \"rFO.^P… TRUE  <fct> <time> <int>  nB<w… <named list> <named list> #>  4 2626-07-08 \"-dOec\"  TRUE  <fct> <date> <chr>  K     <named list> <named list> #>  5 1416-04-13 \"[Vm2@E… FALSE <fct> <int>  <date> -T_A… <named list> <named list> #>  6 2414-06-30 \"G,!\"    TRUE  <fct> <chr>  <chr>  vVa:… <named list> <named list> #>  7 1359-06-30 \"%7\"     TRUE  <fct> <dbl>  <lgl>  kv2{… <named list> <named list> #>  8 1857-05-18 \")*\\\">2… FALSE <fct> <lgl>  <lgl>  (D{|  <named list> <named list> #>  9 2054-09-04 \"M$4:eP… TRUE  <fct> <date> <date> tZb$… <named list> <named list> #> 10 1954-04-05 \"ti/uE`… FALSE <fct> <chr>  <int>  ,3    <named list> <named list> any_tibble(cols = 5L, any_na = TRUE) |> show_example() #> # A tibble: 2 × 5 #>    ...1       ...2       ...3 ...4                ...5             #>   <int>      <dbl>      <dbl> <dttm>              <list>           #> 1 -3108 791954611. 890092539. 2631-10-10 20:23:10 <named list [2]> #> 2    NA 753550440.        NA  NA                  <named list [2]>"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Undefined value generator — any_undefined","title":"Undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Undefined value generator — any_undefined","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined() |> show_example() #> [1] NA"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [1] FALSE  TRUE FALSE any_vector(len = 10L, any_na = TRUE) |> show_example() #>  [1]  TRUE  TRUE  TRUE FALSE  TRUE    NA  TRUE FALSE  TRUE  TRUE"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, data.frames, tibbles, data.tables, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything(any_empty = TRUE, any_undefined = TRUE)"},{"path":"/reference/anything.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any R object generator — anything","text":"any_empty Whether empty vectors data frames allowed. any_undefined Whether undefined values allowed.","code":""},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator generator","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() |> show_example() #> Null data.table (0 rows and 0 cols) anything(any_empty = FALSE, any_undefined = FALSE) |> show_example() #> [[1]] #> [[1]]$a #> [1] -998171051  826199053 #>  #> [[1]]$b #> [1]  6837 -3170 -7624  6992  -681 #>  #>  #> [[2]] #> [[2]]$a #> [1]          0          0   78722693   59337906          0 -906212683          0 #>  #> [[2]]$b #> [1] \"117-07-28 14:22:27 UTC\"  \"2179-10-04 06:00:58 UTC\" #> [3] \"310-05-06 11:33:11 UTC\"  \"161-03-19 21:26:08 UTC\"  #> [5] \"714-09-09 12:36:46 UTC\"  \"2080-08-02 12:15:29 UTC\" #>  #>"},{"path":"/reference/as_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"Convert quickcheck generator hedgehog generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"as_hedgehog(generator)"},{"path":"/reference/as_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"generator quickcheck_generator generator","code":""},{"path":"/reference/as_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) |>     as_hedgehog() |>     hedgehog::gen.with(\\(a) 2 ^ a) for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_letters(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_numbers(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_alphanumeric(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_empty Whether empty character values allowed.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"tpBx`\"    \",Ml7z\"    \"P8KTG\"    \",2^4yB3,\" \"3*QT8\"    character_(len = 10L, any_na = TRUE) |> show_example() #>  [1] \"xRy)71CI\" \"-\"        \"9\"        NA         \"K_MbG|fk\" \"N\"        #>  [7] NA         \"%I\"       \"M83\"      NA         character_(len = 10L, any_empty = TRUE) |> show_example() #>  [1] \"1l{Sb\"     \"A<$;>>E)E\" \"\"          \"\"          \"\"          \"HMn<+wDq8\" #>  [7] \"}6\"        \"a{xb\"      \"\"          \"Q8\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/data.table_.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generators — data.table_","title":"data.table generators — data.table_","text":"Construct data.table generators similar way data.table::data.table.","code":""},{"path":"/reference/data.table_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generators — data.table_","text":"","code":"data.table_(..., rows = c(1L, 10L))"},{"path":"/reference/data.table_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generators — data.table_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data.table_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generators — data.table_","text":"quickcheck_generator generator","code":""},{"path":"/reference/data.table_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generators — data.table_","text":"","code":"data.table_(a = integer_()) |> show_example() #>        a #> 1: -4481 #> 2:  1602 data.table_(a = integer_(), b = character_(), rows = 5L) |> show_example() #>        a      b #> 1: -2848      h #> 2: -7949 \"!N+m$ #> 3:  8973     *n #> 4:    49  B:X\"v #> 5: -9249  {mN-["},{"path":"/reference/data.table_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data.table generator — data.table_of","title":"Random data.table generator — data.table_of","text":"Random data.table generator","code":""},{"path":"/reference/data.table_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data.table generator — data.table_of","text":"","code":"data.table_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data.table_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data.table generator — data.table_of","text":"... set unnamed generators. generated data.tables built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data.table_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data.table generator — data.table_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/data.table_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data.table generator — data.table_of","text":"","code":"data.table_of(logical_(), date_()) |> show_example() #>     ...1  ...2       ...3       ...4  ...5  ...6 #> 1: FALSE FALSE 2594-12-27 2864-01-07  TRUE  TRUE #> 2: FALSE  TRUE 1283-02-17 2418-02-17  TRUE FALSE #> 3:  TRUE FALSE 1102-09-18 2375-09-16 FALSE FALSE data.table_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #>                    ...1       ...2     ...3       ...4       ...5 #>  1: 2380-06-01 18:20:17 1782-05-08 *,jw~IKm -873028201   19065626 #>  2: 2443-10-09 12:45:29 2387-03-18      x+Q -439491223 -562755985 #>  3:  860-10-18 17:01:36 1272-07-18 i$kO~q\"P  -55438169  639138054 #>  4: 2347-02-16 20:13:30 2924-12-10  RU#f$9K  537946860 -686221601 #>  5:  620-07-23 03:18:17 2361-08-10       %S  872829799  835788447 #>  6:  443-04-23 01:19:12 1833-06-20   bG:VW]  159544012  959548898 #>  7: 1697-11-13 11:36:11 2452-06-23    NQo,K -147893243   13120284 #>  8: 2295-02-27 00:40:44 1390-09-30     Z)tF          0 -803081909 #>  9: 1853-02-09 00:42:26 1470-01-01 h'<Agy8'  534437982  652891662 #> 10:  392-07-25 13:59:07 2995-04-19    ;F+hE  713147601  250907784"},{"path":"/reference/data_frame_.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generators — data_frame_","title":"Data frame generators — data_frame_","text":"Construct data frame generators similar way data_frame.","code":""},{"path":"/reference/data_frame_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(..., rows = c(1L, 10L))"},{"path":"/reference/data_frame_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generators — data_frame_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data_frame_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generators — data_frame_","text":"quickcheck_generator generator","code":""},{"path":"/reference/data_frame_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(a = integer_()) |> show_example() #>       a #> 1 -4485 #> 2  8322 #> 3 -8478 #> 4  4251 #> 5  8418 data_frame_(a = integer_(), b = character_(), rows = 5L) |> show_example() #>       a        b #> 1 -2871 :kb;'.6a #> 2  -800     ]/Zj #> 3 -2042  P7Lz?hE #> 4 -9639 dj.+p?wK #> 5     0  f,RuU%a"},{"path":"/reference/data_frame_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data frame generator — data_frame_of","title":"Random data frame generator — data_frame_of","text":"Random data frame generator","code":""},{"path":"/reference/data_frame_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data frame generator — data_frame_of","text":"","code":"data_frame_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data_frame_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data frame generator — data_frame_of","text":"... set unnamed generators. generated data frames built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data_frame_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data frame generator — data_frame_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/data_frame_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data frame generator — data_frame_of","text":"","code":"data_frame_of(logical_(), date_()) |> show_example() #>         ...1 #> 1 1384-04-15 #> 2 1557-03-19 #> 3 2025-12-11 data_frame_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #>               ...1  ...2      ...3      ...4            ...5 #> 1  18:27:58.708517  7266    (4aU\"r        =2 02:53:08.618905 #> 2  16:35:53.527501  8398        ko     Ng=I0 14:59:31.764003 #> 3  10:39:29.970708 -9513        O,      %=<7 14:48:28.637516 #> 4  08:29:12.130937 -4316 gPHaj@%7o     t}uoE 07:40:39.316619 #> 5  10:46:05.479978 -2502     2LK5! A[B*@FIT# 11:29:46.275260 #> 6  13:11:15.653806     0     mw<NJ     <Nn\"@ 12:55:31.611274 #> 7  23:57:19.634493 -9299     j?>+[  k+Wv]Wq1 12:02:41.099788 #> 8  08:19:10.631063  7353 VK9Y](M0T        H` 21:47:39.083809 #> 9  05:59:26.346223 -1098  &zz4IxaQ         ^ 01:26:55.092483 #> 10 11:35:52.023036 -5360     %0~{8      ?#h' 21:18:08.626396"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), any_na = FALSE)  date_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  date_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  date_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"2269-12-24\" \"2716-01-15\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-06\" date_(len = 10L, any_na = TRUE) |> show_example() #>  [1] \"2704-06-09\" \"2091-01-10\" NA           \"2300-06-14\" \"2393-04-10\" #>  [6] \"2522-08-06\" \"1373-06-09\" \"2304-06-11\" \"2231-11-06\" NA"},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE )  double_left_bounded(   left,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_nan Whether NaN values allowed. any_inf Whether Inf/-Inf values allowed. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1] 431454480 -44999182         0 double_(big_dbl = TRUE) |> show_example() #> [1] -6.401696e+307  3.572872e+307  8.754821e+307 double_bounded(left = -5, right = 5) |> show_example() #> [1] -0.2243461 -4.0171943 double_(len = 10L, any_na = TRUE) |> show_example() #>  [1]   22115560         NA -521646644 -269096264 -545003665         NA #>  [7]         NA -759942038         NA  760953764 double_(len = 10L, any_nan = TRUE, any_inf = TRUE) |> show_example() #>  [1]       NaN       Inf      -Inf      -Inf 494400814       NaN 213839725 #>  [8]      -Inf       NaN 972182834"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal length vector generator — equal_length","title":"Equal length vector generator — equal_length","text":"Generates equal length vectors contained list.","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(..., len = c(1L, 10L))"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal length vector generator — equal_length","text":"... set vector generators. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal length vector generator — equal_length","text":"quickcheck_generator generator","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(integer_(), double_()) |> show_example() #> [[1]] #>  [1]  8941  3981  9712  1563  6669 -7421 -3193 -1409  2828  9190 #>  #> [[2]] #>  [1]  429267108          0  342551745 -337910026  948364213 -907693340 #>  [7] -906043221  299731813 -500359782   58228550 #>  equal_length(a = logical_(), b = character_(), len = 5L) |> show_example() #> $a #> [1] FALSE FALSE FALSE  TRUE FALSE #>  #> $b #> [1] \"Y8fT#;\"     \"@R\"         \",NG gec\"    \" z)q?\"      \"\\\\e7S-$PZ=\" #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] MilOg#B  +\"i*Gjj# Co       2XW-     cmSiWu   q4ass    l&%y     #> Levels: MilOg#B +\"i*Gjj# Co 2XW- cmSiWu q4ass l&%y factor_(len = 10L, any_na = TRUE) |> show_example() #>  [1]  1  1  1  1  1 NA  1  1  1 NA"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"generate flat lists values coming single input generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] 7940 #>  #> [[2]] #> [1] -2762 #>  #> [[3]] #> [1] -5928 #>  #> [[4]] #> [1] 5304 #>  #> [[5]] #> [1] -836 #>  #> [[6]] #> [1] -8088 #>  #> [[7]] #> [1] -6461 #>  #> [[8]] #> [1] -2505 #>  #> [[9]] #> [1] -9342 #>  #> [[10]] #> [1] -1950 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen generator","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) |> hedgehog::gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), any_na = FALSE)  hms_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  hms_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  hms_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 18:24:32.626142 #> 19:23:18.890603 #> 03:08:38.932361 #> 11:08:54.234462 #> 10:19:58.817230 #> 07:02:12.935265 #> 22:49:16.058765 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 07:35:08.044105 #> 04:41:47.873750 #> 08:34:31.680468 #> 05:34:53.253043 #> 09:24:01.771761 #> 07:35:35.247799 #> 04:04:51.951581 hms_(len = 10L, any_na = TRUE) |> show_example() #> 22:12:46.388986 #> 21:34:24.805296 #> 11:45:51.582066 #> 11:42:00.562999 #> 04:01:36.862469 #>              NA #> 09:50:24.700274 #> 05:39:00.909640 #>              NA #>              NA"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  integer_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_positive(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_negative(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1]  2788 -7292 -7210  -311  7054 integer_(big_int = TRUE) |> show_example() #> [1]   738132910  2097977728  1726756159   340868812 -1154660582           0 #> [7]  1873860784 integer_bounded(left = -5L, right = 5L) |> show_example() #>  [1] -1 -1 -4  0  0  5  0  4  3  0 integer_(len = 10L, any_na = TRUE) |> show_example() #>  [1]    NA -1952  5116 -9673    NA  9823 -3762    NA -1422    NA"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1]  8352  6583  6841   682  1450 -8109  8752 -3900 #>  #> [[2]] #>  [1]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> [1] \"2818-05-11\" \"1716-03-17\" \"2348-04-25\" \"1552-10-21\" \"1809-12-05\" #> [6] \"2072-04-03\" \"2526-10-10\" \"1645-10-13\" #>  #> $b #> [1] \"1509-09-05 07:52:46 UTC\" \"102-02-22 11:59:50 UTC\"  #> [3] \"19-10-05 01:58:35 UTC\"   \"2447-05-31 18:00:35 UTC\" #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] -2028  3643     0  8834 -8612     0     0 #>  #> [[2]] #> [1] -7664 #>  #> [[3]] #> [1]  5793  6031 -2551  4177     0  9867  2195  1871 -4771 #>  #> [[4]] #> [1] -5553  4682 -6859  1197 #>  #> [[5]] #> [1]  3749     0 -6259 #>  #> [[6]] #> [1]  4721 -9625  8300 -3342 #>  #> [[7]] #>  [1] -1256     0     0  2496  8210  6387 -2067 -4443 -4184  8107 #>  #> [[8]] #> [1]     0 -3492  8549 -2048  6388 -9347  2518 #>  #> [[9]] #> [1]   474 -9696  5590 -7086     0 -7280 -3284  3521  3519 #>  #> [[10]] #> [1] 6437 8049 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE logical_(len = 10L, any_na = TRUE) |> show_example() #>  [1]  TRUE  TRUE FALSE  TRUE FALSE  TRUE    NA  TRUE FALSE FALSE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  numeric_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_positive(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_negative(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1] -185741375 numeric_(big_num = TRUE) |> show_example() #> [1]  3.423516e+307 -1.812532e+307 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1] -2 -4  4  0  0  2 numeric_(len = 10L, any_na = TRUE) |> show_example() #>  [1]    NA -9676 -1695    NA    NA  6047 -5189     0  3737 -4178"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1] \"ZjMb>ydz\" one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> [1] FALSE FALSE FALSE  TRUE FALSE  TRUE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), any_na = FALSE)  posixct_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  posixct_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  posixct_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"2393-05-31 18:33:31 UTC\" \"1589-02-28 14:27:15 UTC\" #> [3] \"670-03-12 19:38:17 UTC\"  \"1374-12-13 01:03:57 UTC\" #> [5] \"894-04-20 15:29:50 UTC\"  \"2287-05-04 02:44:17 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-03-05 06:22:44 UTC\" \"2020-01-11 18:13:21 UTC\" #> [3] \"2020-01-01 01:29:08 UTC\" \"2020-04-11 12:03:41 UTC\" #> [5] \"2020-10-19 01:20:06 UTC\" posixct_(len = 10L, any_na = TRUE) |> show_example() #>  [1] \"44-12-17 16:28:20 UTC\"   \"2671-05-13 18:40:05 UTC\" #>  [3] NA                        NA                        #>  [5] \"1552-06-20 07:38:04 UTC\" \"826-06-20 11:25:45 UTC\"  #>  [7] \"2111-09-05 11:34:12 UTC\" \"818-11-01 22:24:52 UTC\"  #>  [9] NA                        \"2723-09-10 06:49:04 UTC\""},{"path":"/reference/repeat_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly test properties of a function — repeat_test","title":"Repeatedly test properties of a function — repeat_test","text":"Repeatedly test properties function","code":""},{"path":"/reference/repeat_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(property, tests = getOption(\"quickcheck.tests\", 100L))"},{"path":"/reference/repeat_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly test properties of a function — repeat_test","text":"property anonymous function arguments includes expectation. tests number tests run.","code":""},{"path":"/reference/repeat_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly test properties of a function — repeat_test","text":"testthat expectation object.","code":""},{"path":"/reference/repeat_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(   property = \\() {     num <- stats::runif(1, min = 0, max = 10)     testthat::expect_true(num >= 0 && num <= 10)   } )"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1] FALSE FALSE FALSE FALSE FALSE FALSE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 9 × 1 #>       a #>   <int> #> 1   290 #> 2  4557 #> 3 -2256 #> 4     0 #> 5  2125 #> 6     0 #> 7  9105 #> 8  4375 #> 9  8595 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b              #>   <int> <chr>          #> 1     0 \"ea$\"          #> 2  7860 \"=\"            #> 3  -754 \"9cSzX\"        #> 4  1900 \"%c\"           #> 5 -9513 \"==:_\\\\[\\\\%\\\\\""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 5 × 8 #>   ...1       ...2  ...3  ...4  ...5  ...6  ...7       ...8  #>   <date>     <lgl> <lgl> <lgl> <lgl> <lgl> <date>     <lgl> #> 1 2661-09-22 FALSE FALSE TRUE  FALSE FALSE 2342-05-09 TRUE  #> 2 2545-11-09 FALSE FALSE FALSE TRUE  TRUE  1203-01-11 FALSE #> 3 1075-07-03 FALSE FALSE FALSE FALSE FALSE 1163-08-27 FALSE #> 4 1405-06-01 TRUE  FALSE FALSE FALSE FALSE 1346-10-14 TRUE  #> 5 1652-07-14 FALSE FALSE TRUE  FALSE FALSE 2467-03-23 FALSE tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>    ...1        ...2                 ...3 ...4          ...5 #>    <fct>       <dttm>              <int> <fct>        <int> #>  1 \"u\"         685-04-10 16:20:16  -9889 \"~28\\\\U,^u\"      0 #>  2 \"pa*\"       586-02-11 10:35:30   5159 \"LZ=:Fs\"      9674 #>  3 \"jn\"        941-10-06 12:29:49   5504 \"L`;\"        -8080 #>  4 \"JZ\"        420-06-23 11:10:15    697 \"73Br. & m\"   7556 #>  5 \" :7\"       2565-06-07 00:07:18  2168 \"gL[zZ\"        423 #>  6 \"vub[,\"     1030-10-15 23:23:14 -5015 \"b<\"         -1994 #>  7 \"S&m0j)\"    615-08-05 08:46:16   7337 \"?N4$3:g_7\"   3841 #>  8 \"l|\"        1830-07-23 01:34:48  5811 \"O~<U[&o.\\\\\"     0 #>  9 \"erL=lQ\"    718-05-22 04:28:59  -6090 \"5dxBA6\"     -7715 #> 10 \"u|a-r,q2N\" 918-12-31 12:11:52  -7733 \"*!KA.)]]\"    8237"},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
