[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = function(a) expect_equal(a, a + 0)   ) }) #> Test passed 🎉  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = function(a, b) expect_equal(a + b, b + a)   ) }) #> Test passed 😸  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = function(a, b, c) expect_equal(a + (b + c), (a + b) + c)   ) }) #> Test passed 😀 library(dplyr, warn.conflicts = FALSE)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = function(a) {       distinct(a) %>% expect_equal(a)     }   ) }) #> Test passed 🎊  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = function(a) {       bind_rows(a, a) %>%         distinct() %>%         expect_equal(a)     }   ) }) #> Test passed 🎊  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = function(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) %>% expect_equal(unique_rows)     }   ) }) #> Test passed 😀"},{"path":"/index.html","id":"quickcheck-generators","dir":"","previous_headings":"","what":"Quickcheck generators","title":"Property Based Testing","text":"Many generators provided quickcheck. examples.","code":""},{"path":"/index.html","id":"atomic-vectors","dir":"","previous_headings":"Quickcheck generators","what":"Atomic vectors","title":"Property Based Testing","text":"","code":"integer_(len = 10) %>% show_example() #>  [1]  -833  5111 -8831 -3495 -1899  1051  9964  2473  9557 -2465 character_alphanumeric(len = 10) %>% show_example() #>  [1] \"y5Ph\"      \"8\"         \"B8\"        \"3vOcYf\"    \"qr\"        \"o\"         #>  [7] \"5rW2nHdrA\" \"88\"        \"umU\"       \"vJpqr\" posixct_(len = 10, any_na = TRUE) %>% show_example() #>  [1] \"1652-02-25 11:34:40 LMT\" \"1683-08-15 05:26:47 LMT\" #>  [3] \"2339-08-19 19:19:07 PDT\" \"0244-05-09 12:26:30 LMT\" #>  [5] \"0756-11-24 03:23:10 LMT\" \"0660-04-16 21:21:08 LMT\" #>  [7] \"2993-05-14 04:45:47 PDT\" NA                        #>  [9] \"1301-04-09 00:40:00 LMT\" NA"},{"path":"/index.html","id":"lists","dir":"","previous_headings":"Quickcheck generators","what":"Lists","title":"Property Based Testing","text":"","code":"list_(a = constant(NULL), b = any_undefined()) %>% show_example() #> $a #> NULL #>  #> $b #> [1] -Inf flat_list_of(logical_(), len = 3) %>% show_example() #> [[1]] #> [1] TRUE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] TRUE"},{"path":"/index.html","id":"tibbles","dir":"","previous_headings":"Quickcheck generators","what":"Tibbles","title":"Property Based Testing","text":"","code":"tibble_(a = date_(), b = hms_(), rows = 5) %>% show_example() #> # A tibble: 5 x 2 #>   a          b               #>   <date>     <time>          #> 1 1271-08-16 22:32:16.108893 #> 2 2788-05-31 20:37:31.119791 #> 3 1246-05-10 09:14:29.411623 #> 4 2434-06-08 16:01:39.498445 #> 5 1074-10-19 04:07:18.552658 tibble_of(double_bounded(-10, 10), rows = 3, cols = 3) %>% show_example() #> # A tibble: 3 x 3 #>    ...1  ...2  ...3 #>   <dbl> <dbl> <dbl> #> 1  0     2.55  5.81 #> 2  4.42  8.87 -5.43 #> 3  9.45  7.02 -3.97 any_tibble(rows = 3, cols = 3) %>% show_example() #> # A tibble: 3 x 3 #>   ...1             ...2       ...3       #>   <list>           <list>     <date>     #> 1 <named list [2]> <time [2]> 1628-11-24 #> 2 <named list [2]> <time [7]> 2989-06-25 #> 3 <named list [2]> <fct [4]>  2175-02-14"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used wrapping from_hedgehog. hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error: quickcheck generator can also converted hedgehog generator can used hedgehog functions.","code":"library(hedgehog)  is_even <-   function(a) a %% 2 == 0  gen_powers_of_two <-   gen.element(1:10) %>% gen.with(function(a) 2^a)  test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = function(a) is_even(a) %>% expect_true()   ) }) #> Test passed 😀 test_that(\"powers of two and integers are both numeric values\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     b = integer_(),     property = function(a, b) {       c(a, b) %>%         is.numeric() %>%         expect_true()     }   ) }) #> Test passed 🎉 test_that(\"composing hedgehog with quickcheck generators fails\", {   tibble_of(from_hedgehog(gen_powers_of_two)) %>% expect_error() }) #> Test passed 🥇 gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) %>%   as_hedgehog() %>%   gen.with(function(a) 2^a)   test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = function(a) is_even(a) %>% expect_true()   ) }) #> Test passed 😀"},{"path":"/index.html","id":"fuzz-tests","dir":"","previous_headings":"","what":"Fuzz tests","title":"Property Based Testing","text":"Fuzz testing special case property based testing property tested code doesn’t fail range inputs. example fuzz testing quickcheck. Let’s say want test purrr::map function won’t fail vector input.","code":"test_that(\"map won't fail with any vector as input\", {   for_all(     a = any_vector(),     property = function(a) purrr::map(a, identity) %>% expect_silent()   ) }) #> Test passed 🎉"},{"path":"/index.html","id":"repeat-tests","dir":"","previous_headings":"","what":"Repeat tests","title":"Property Based Testing","text":"Repeat tests can used repeatedly test property holds true many calls function. different regular property based tests don’t require generators. function repeat_test call function many times ensure expectation passes cases. kind test can useful testing functions randomness.","code":"test_that(\"runif generates random numbers between a min and max value\", {   repeat_test(     property = function() {       random_number <- runif(1, min = 0, max = 10)       expect_true(random_number >= 0 && random_number <= 10)     }   ) }) #> Test passed 🎉"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Any atomic vector generator — any_atomic","title":"Any atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any atomic vector generator — any_atomic","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any atomic vector generator — any_atomic","text":"","code":"any_atomic() %>% show_example() #> 11:08:38.535393 #> 17:16:26.073860 #> 11:01:02.898861 #> 11:48:55.982250 #> 01:58:51.145027 #> 14:29:00.496338 #> 12:32:25.740464 #> 20:46:15.274611 #> 15:52:38.727070 #> 09:47:49.997009 any_atomic(len = 10L, any_na = TRUE) %>% show_example() #>  [1] NA          \" t]3qS2\"   \"77v7eA_\"   \"XCOCxW\"    \",Q?D4(w\"   NA          #>  [7] \"L%`=g<\\\"\"  \"A{[/tBvZ\"  \"LLo4G'I$%\" \"e\""},{"path":"/reference/any_data.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data.table generator — any_data.table","title":"Any data.table generator — any_data.table","text":"Generate data.tables.","code":""},{"path":"/reference/any_data.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data.table generator — any_data.table","text":"","code":"any_data.table(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data.table generator — any_data.table","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data.table generator — any_data.table","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_data.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data.table generator — any_data.table","text":"","code":"any_data.table(rows = 3L, cols = 3L) %>% show_example() #>         ...1       ...2      ...3 #> 1: <list[2]> 2843-06-27       XKv #> 2: <list[2]> 2745-11-11        Yk #> 3: <list[2]> 1067-05-30 IJ6v9`x3T"},{"path":"/reference/any_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data frame generator — any_data_frame","title":"Any data frame generator — any_data_frame","text":"Generate data.frames.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data frame generator — any_data_frame","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data frame generator — any_data_frame","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = 3L, cols = 3L) %>% show_example() #>        ...1                ...2  ...3 #> 1 %{2M;|z\\\\   56-05-01 21:38:41 WxKwj #> 2        Zv 1178-06-18 06:52:29   Pln #> 3         ( 2867-10-21 14:45:38    %@"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any flat homogeneous list generator — any_flat_homogeneous_list","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic scalar class.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() %>% show_example() #> [[1]] #> [1] \"y3[]`}7u\" #>  #> [[2]] #> [1] \"w7L7jKuK\" #>  #> [[3]] #> [1] \"1XCgD_7\" #>  #> [[4]] #> [1] \"pPF{34[Z\" #>  #> [[5]] #> [1] \"(*pua\" #>  #> [[6]] #> [1] \"^W?%W\" #>  #> [[7]] #> [1] \"#\" #>  any_flat_homogeneous_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [1] \" \" #>  #> [[2]] #> [1] \"r&\" #>  #> [[3]] #> [1] \" \" #>  #> [[4]] #> [1] \"0M'\" #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] \"u,W6t3L-R\" #>  #> [[7]] #> [1] \"5zXd,\" #>  #> [[8]] #> [1] \"`\" #>  #> [[9]] #> [1] \"<+\" #>  #> [[10]] #> [1] \"\\\\vaZn.=x\" #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any flat list generator — any_flat_list","title":"Any flat list generator — any_flat_list","text":"Generate lists element atomic scalar.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any flat list generator — any_flat_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any flat list generator — any_flat_list","text":"","code":"any_flat_list() %>% show_example() #> [[1]] #> [1] TRUE #>  #> [[2]] #> [1] -963 #>  #> [[3]] #> [1] \"B: [\" #>  #> [[4]] #> [1] VTcOA #> Levels: VTcOA #>  #> [[5]] #> 02:02:55.451455 #>  #> [[6]] #> [1] \"1602-03-08\" #>  #> [[7]] #> [1] h&[V2f #> Levels: h&[V2f #>  any_flat_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [1] TRUE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] \"585-11-22 09:00:18 UTC\" #>  #> [[4]] #> [1] \"1489-08-23 13:52:27 UTC\" #>  #> [[5]] #> [1] \"1172-04-29 01:50:55 UTC\" #>  #> [[6]] #> 15:02:41.293451 #>  #> [[7]] #> [1] $7\\\\&h #> Levels: $7\\\\&h #>  #> [[8]] #> [1] -9912 #>  #> [[9]] #> NA #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any list generator — any_list","title":"Any list generator — any_list","text":"Generate lists containing lists atomic vectors.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any list generator — any_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any list generator — any_list","text":"","code":"any_list() %>% show_example() #> [[1]] #> [1] nI_ #> Levels: nI_ #>  #> [[2]] #> [1] \"2154-02-23\" #>  #> [[3]] #> [1] FALSE #>  any_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #>  [1]    NA  TRUE    NA    NA  TRUE FALSE  TRUE FALSE  TRUE  TRUE #>  #> [[2]] #> [1]  Z$NJ( #> Levels:  Z$NJ( #>  #> [[3]] #> 12:51:16.861812 #> 14:53:27.855685 #> 21:34:51.260409 #> 18:33:01.873591 #> 18:22:44.542725 #> 10:36:13.012418 #> 13:10:30.462641 #> 07:32:03.901985 #>  #> [[4]] #> [1] \"2091-03-15\" \"2884-02-15\" \"2164-08-18\" \"1524-08-25\" \"2857-03-09\" #>  #> [[5]] #> [1] 8943  218    0 #>  #> [[6]] #> [1]    NA    NA -6472    NA #>  #> [[7]] #> [1] \"Z5\" #>  #> [[8]] #> [1] NA                        \"2617-06-25 21:18:01 UTC\" #> [3] \"901-01-31 11:42:38 UTC\"  \"305-10-10 11:05:08 UTC\"  #> [5] \"1473-09-07 07:37:46 UTC\" \"650-07-24 16:05:18 UTC\"  #> [7] NA                        #>  #> [[9]] #> [1] -9872    NA -1811  5803    NA #>  #> [[10]] #> [1]  828016742  653576108 -156215848 #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Any tibble generator — any_tibble","title":"Any tibble generator — any_tibble","text":"Generate tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any tibble generator — any_tibble","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble(rows = 3L, cols = 3L) %>% show_example() #> # A tibble: 3 × 3 #>   ...1      ...2       ...3  #>   <list>    <list>     <lgl> #> 1 <int [1]> <chr [1]>  TRUE  #> 2 <int [1]> <chr [1]>  FALSE #> 3 <int [1]> <time [1]> TRUE"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Any undefined value generator — any_undefined","title":"Any undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any undefined value generator — any_undefined","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any undefined value generator — any_undefined","text":"","code":"any_undefined() %>% show_example() #> [1] NA"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Any vector generator — any_vector","title":"Any vector generator — any_vector","text":"Generate atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any vector generator — any_vector","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any vector generator — any_vector","text":"","code":"any_vector() %>% show_example() #> [1] \"1688-07-29 12:29:20 UTC\" \"1403-04-09 12:28:23 UTC\" #> [3] \"141-11-22 04:16:03 UTC\"  \"2664-02-29 18:45:00 UTC\" #> [5] \"1276-05-17 18:10:34 UTC\" \"547-02-27 10:48:00 UTC\"  #> [7] \"1405-04-30 05:06:40 UTC\" any_vector(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [1]  1 NA  1  1  1 NA #>  #> [[2]] #> [1] FALSE  TRUE  TRUE  TRUE FALSE FALSE #>  #> [[3]] #> [1]  2574    NA -2129  6759  1440  7905     0 -8588 #>  #> [[4]] #> [1] NA  1 NA  1  1 #>  #> [[5]] #> [1] NA  1  1  1  1  1  1  1  1 #>  #> [[6]] #> [1] NA  1  1  1  1 #>  #> [[7]] #> [1]  508883874          0 -265026030         NA         NA -851427306  612148398 #>  #> [[8]] #> [1] 963879540 #>  #> [[9]] #> [1] -1755 -3364 #>  #> [[10]] #> [1] \"2909-06-11\" \"1684-08-09\" #>"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, data.frames, tibbles, data.tables, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything(any_empty = TRUE, any_undefined = TRUE)"},{"path":"/reference/anything.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any R object generator — anything","text":"any_empty Whether empty vectors data frames allowed. any_undefined Whether undefined values allowed.","code":""},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator object.","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() %>% show_example() #> [1]  1  1 NA  1  1  1  1"},{"path":"/reference/as_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"Convert quickcheck generator hedgehog generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"as_hedgehog(generator)"},{"path":"/reference/as_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"generator quickcheck_generator object.","code":""},{"path":"/reference/as_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"quickcheck_generator object.","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"is_even <-   function(a) a %% 2L == 0L gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) %>%     as_hedgehog() %>%     hedgehog::gen.with(function(a) 2 ^ a) for_all(   a = from_hedgehog(gen_powers_of_two),   property = function(a) is_even(a) %>% testthat::expect_true() )"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_letters(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_numbers(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_alphanumeric(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_empty Whether empty character values allowed.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator object.","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() %>% show_example() #> [1] \"l!X,{5\"   \"6MG'Di[;\" \"_5\"       \"D&i(\"     \"A{b\"      character_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] \">\"          \"U}2pA#\"     \";a\"         \"zy0<\\\\]o*o\" \"~7sa\"       #>  [6] NA           \"qn\"         \"z2R,cBS\"    NA           \"6B:S=\"      character_(len = 10L, any_empty = TRUE) %>% show_example() #>  [1] \"\"         \"^`Kf*\\\\g\" \"?]a9F!u\"  \"\"         \"[9i\"      \"qy{tr,yC\" #>  [7] \"3$~`u\"    \"Sk^uebw\"  \"W$o?\"     \"XjJ;B=\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator object.","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) %>% show_example() #> NULL"},{"path":"/reference/data.table_.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generators — data.table_","title":"data.table generators — data.table_","text":"Construct data.table generators similar way data.table::data.table.","code":""},{"path":"/reference/data.table_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generators — data.table_","text":"","code":"data.table_(..., rows = c(1L, 10L))"},{"path":"/reference/data.table_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generators — data.table_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data.table_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generators — data.table_","text":"quickcheck_generator object.","code":""},{"path":"/reference/data.table_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generators — data.table_","text":"","code":"data.table_(a = integer_()) %>% show_example() #>        a #> 1: -4380 #> 2: -1997 #> 3:   458 #> 4: -5220 #> 5: -7040 data.table_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #>       a         b #> 1: 7093 j|9B3?XBY #> 2: 4687      +Zzb #> 3:  -65    %ewX\"T #> 4: 7351      8><` #> 5: 4887  :00'k+as"},{"path":"/reference/data.table_of.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generator with randomized columns — data.table_of","title":"data.table generator with randomized columns — data.table_of","text":"data.table generator randomized columns","code":""},{"path":"/reference/data.table_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generator with randomized columns — data.table_of","text":"","code":"data.table_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data.table_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generator with randomized columns — data.table_of","text":"... set unnamed generators. generated data.tables built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data.table_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generator with randomized columns — data.table_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/data.table_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generator with randomized columns — data.table_of","text":"","code":"data.table_of(logical_(), date_()) %>% show_example() #>    ...1 #> 1: TRUE #> 2: TRUE #> 3: TRUE #> 4: TRUE data.table_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #>      ...1                ...2  ...3      ...4  ...5 #>  1: FALSE 2643-09-19 07:06:07  9433        ') -4314 #>  2:  TRUE 1626-07-21 19:46:39 -3520     k^7W) -7233 #>  3:  TRUE  967-06-09 18:24:53     0    4sC=AR -9496 #>  4:  TRUE 2197-08-25 20:22:38 -9513        z:  5011 #>  5:  TRUE 1368-11-02 23:16:13  -837      fO]q  4049 #>  6: FALSE 1338-07-06 18:15:44   965         { -8112 #>  7:  TRUE  491-08-30 05:26:31 -9854      K&3Q  2891 #>  8:  TRUE 1578-03-20 20:44:49   -97        9(   962 #>  9:  TRUE  592-01-06 08:48:01     0       (w`   807 #> 10: FALSE 1065-04-12 04:20:33 -2924 jd9~[Rw5&  8249"},{"path":"/reference/data_frame_.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generators — data_frame_","title":"Data frame generators — data_frame_","text":"Construct data frame generators similar way base::data.frame.","code":""},{"path":"/reference/data_frame_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(..., rows = c(1L, 10L))"},{"path":"/reference/data_frame_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generators — data_frame_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data_frame_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generators — data_frame_","text":"quickcheck_generator object.","code":""},{"path":"/reference/data_frame_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(a = integer_()) %>% show_example() #>       a #> 1 -1174 #> 2  -366 data_frame_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #>       a          b #> 1 -1053    Q7O.*]g #> 2 -8349  k:_X1lJ<{ #> 3 -3766       dV3i #> 4  -237      KQQNs #> 5  2936 M7yTW\\\\9pq"},{"path":"/reference/data_frame_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generator with randomized columns — data_frame_of","title":"Data frame generator with randomized columns — data_frame_of","text":"Data frame generator randomized columns","code":""},{"path":"/reference/data_frame_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generator with randomized columns — data_frame_of","text":"","code":"data_frame_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data_frame_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generator with randomized columns — data_frame_of","text":"... set unnamed generators. generated data frames built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data_frame_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generator with randomized columns — data_frame_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/data_frame_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generator with randomized columns — data_frame_of","text":"","code":"data_frame_of(logical_(), date_()) %>% show_example() #>    ...1  ...2       ...3 #> 1  TRUE  TRUE 2789-12-02 #> 2 FALSE  TRUE 2211-03-09 #> 3  TRUE  TRUE 2919-03-29 #> 4  TRUE FALSE 2869-12-14 #> 5  TRUE  TRUE 1801-05-01 #> 6 FALSE  TRUE 1047-12-07 #> 7  TRUE FALSE 2450-01-06 #> 8  TRUE FALSE 2263-06-20 data_frame_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #>          ...1       ...2  ...3      ...4       ...5 #> 1   652995644 1324-08-26 FALSE 'aKD3DMQP 2603-05-20 #> 2  -500454441 1873-05-12 FALSE    |3fBso 1713-01-04 #> 3   -97389247 1342-08-01 FALSE   osF.eTE 2788-05-15 #> 4  -920301089 1360-02-05 FALSE       42D 2999-07-13 #> 5   743936292 2067-04-20 FALSE    E@eZv' 2152-02-05 #> 6    72257050 1568-05-05 FALSE P:wvZUqpR 2764-12-09 #> 7  -255893198 1537-08-01 FALSE  )~kfDu]( 1008-01-16 #> 8           0 2084-06-30 FALSE   bJK!YlG 1648-11-07 #> 9  -335131000 1946-04-27  TRUE   Z_38.!? 2035-11-25 #> 10 -479216726 2416-07-02 FALSE        8k 1260-03-10"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), any_na = FALSE)  date_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  date_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  date_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator object.","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() %>% show_example() #> [1] \"2445-01-06\" \"1597-04-01\" \"2474-10-01\" \"1875-03-03\" \"1692-04-28\" #> [6] \"1465-05-06\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) %>% show_example() #> [1] \"2020-01-01\" \"2020-01-02\" \"2020-01-03\" \"2020-01-10\" \"2020-01-05\" #> [6] \"2020-01-10\" \"2020-01-05\" \"2020-01-05\" \"2020-01-03\" date_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] \"1066-06-26\" \"1709-12-23\" \"2907-07-14\" \"2281-07-18\" \"2922-09-15\" #>  [6] NA           \"1936-07-03\" NA           \"2344-01-20\" \"2105-11-08\""},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE )  double_left_bounded(   left,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_nan Whether NaN values allowed. any_inf Whether Inf/-Inf values allowed. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator object.","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() %>% show_example() #> [1]  344809677  541068919  807176610  929502054  323545576    7541279 -448633967 #> [8]  320742242 -634387981 double_(big_dbl = TRUE) %>% show_example() #> [1] 1.335914e+307 double_bounded(left = -5, right = 5) %>% show_example() #> [1] -1.620484 -4.589441 double_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] -153228252 -852940103  819872641  586828830         NA -661480387 #>  [7]  822622186 -378750128  686882143  301572295 double_(len = 10L, any_nan = TRUE, any_inf = TRUE) %>% show_example() #>  [1] -955872255  831297842       -Inf        Inf        NaN        NaN #>  [7]       -Inf       -Inf       -Inf        Inf"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal length vector generator — equal_length","title":"Equal length vector generator — equal_length","text":"Generates equal length vectors contained list.","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(..., len = c(1L, 10L))"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal length vector generator — equal_length","text":"... set named unnamed vector generators. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal length vector generator — equal_length","text":"quickcheck_generator object.","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(integer_(), double_()) %>% show_example() #> [[1]] #> [1] 2300    0 9528 8410 #>  #> [[2]] #> [1]  443370591 -466945147 -222197067  990882541 #>  equal_length(a = logical_(), b = character_(), len = 5L) %>% show_example() #> $a #> [1] FALSE FALSE FALSE  TRUE FALSE #>  #> $b #> [1] \"SW#o+(j7\"  \"nd(-N\"     \"YgmR+$'+\"  \"KP+Y}\"     \"Dj=C\\\\@q9\" #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator object.","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() %>% show_example() #> [1] zt        ^3l       m)uU]     tjU\\\\qt6% T ;C$hbzy &6        a|8Yejl,  #> [8] S5wYN4{   #> Levels: zt ^3l m)uU] tjU\\\\qt6% T ;C$hbzy &6 a|8Yejl, S5wYN4{ factor_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  1  1 NA  1 NA  1  1  1  1  1"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"Generate flat lists values coming single generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator quickcheck_generator object. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) %>% show_example() #> [[1]] #> [1] -6902 #>  #> [[2]] #> [1] 4620 #>  #> [[3]] #> [1] 7054 #>  #> [[4]] #> [1] 3263 #>  #> [[5]] #> [1] 9608 #>  #> [[6]] #> [1] 2048 #>  #> [[7]] #> [1] 3801 #>  #> [[8]] #> [1] -42 #>  #> [[9]] #> [1] 4416 #>  #> [[10]] #> [1] -6388 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes values generator calls expectation . function must parameters matching generator names. tests number tests run. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(len = 1L),   b = numeric_(len = 1L),   property = function(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen object.","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator object.","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"is_even <-   function(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) %>% hedgehog::gen.with(function(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = function(a) is_even(a) %>% testthat::expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), any_na = FALSE)  hms_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  hms_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  hms_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator object.","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() %>% show_example() #> 22:26:43.297330 #> 19:12:21.117777 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) %>% show_example() #> 01:04:38.350066 #> 09:17:32.349150 #> 07:13:22.610862 hms_(len = 10L, any_na = TRUE) %>% show_example() #> 05:05:19.368947 #> 23:52:17.087956 #> 16:11:49.486125 #> 00:28:24.732117 #> 20:36:40.692545 #> 04:53:37.294501 #> 10:19:08.752199 #> 08:38:06.190275 #> 11:06:55.100840 #> 05:32:31.313808"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  integer_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_positive(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_negative(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator object.","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() %>% show_example() #>  [1] -5033    44  8670 -8347 -7757   -91 -7841 -3146  5494 -3175 integer_(big_int = TRUE) %>% show_example() #> [1]  1048647651 -1684301798  1359810492 -2081464244 -1527408463  -296255350 integer_bounded(left = -5L, right = 5L) %>% show_example() #>  [1]  1  3  4 -3  2 -4  0  2  3  2 integer_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]   NA 3603 4119 4689  758 -956   NA 7967   NA  862"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"Generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... set named unnamed generators.","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator object.","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) %>% show_example() #> [[1]] #> [1]  1700 -6020 -4294 -7207     0 -2738 #>  #> [[2]] #>  [1] FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE #>  list_(a = any_vector(), b = any_vector()) %>% show_example() #> $a #> $a[[1]] #> 19:38:16.883305 #> 14:57:20.761019 #> 07:29:31.225682 #> 22:30:57.877392 #>  #> $a[[2]] #> [1] -2830  3803  -367     0 #>  #> $a[[3]] #> [1] FALSE  TRUE  TRUE  TRUE #>  #> $a[[4]] #> [1] n         *X#&      k         )zp       I$5%sErbd &dGT      #> Levels: n *X#& k )zp I$5%sErbd &dGT #>  #> $a[[5]] #> [1] \"cvsXeD[\" \"X}c.cJ\"  \"u\"       \"!5A3\"    #>  #> $a[[6]] #> [1] \"1302-01-17\" \"1776-11-01\" \"1301-09-06\" \"1018-09-02\" \"1998-12-08\" #> [6] \"1576-05-15\" #>  #> $a[[7]] #> [1] -853979343 -645891172 -637638069  983415039 -973081125  652468265  520131740 #> [8] -255944927 #>  #> $a[[8]] #> [1] \"1025-11-05\" \"2613-06-07\" \"1724-09-08\" \"1740-12-28\" #>  #> $a[[9]] #> [1] \"1558-08-31\" \"1475-02-21\" \"1399-08-06\" \"2926-01-12\" \"2439-12-21\" #>  #> $a[[10]] #> [1] \"2118-02-09\" \"1637-11-30\" \"1601-01-29\" \"1432-10-11\" \"2923-12-28\" #> [6] \"2478-01-25\" \"1548-02-03\" \"2325-10-07\" \"2882-03-31\" #>  #>  #> $b #> $b[[1]] #> $b[[1]]$a #> [1] 6845 1613 2749    0    0 8528 6032 #>  #> $b[[1]]$b #> [1]  TRUE  TRUE FALSE FALSE  TRUE #>  #>  #> $b[[2]] #> $b[[2]]$a #> [1] \"316-01-21 14:46:11 UTC\"  \"486-12-19 05:13:54 UTC\"  #> [3] \"705-01-21 19:42:39 UTC\"  \"323-02-10 16:07:38 UTC\"  #> [5] \"1384-11-24 01:10:14 UTC\" \"2022-02-20 15:26:06 UTC\" #> [7] \"440-06-10 14:05:16 UTC\"  \"2725-07-16 13:13:30 UTC\" #> [9] \"587-05-16 15:27:34 UTC\"  #>  #> $b[[2]]$b #> [1] -9568  2693     0 -3094 #>  #>  #> $b[[3]] #> $b[[3]]$a #> 10:49:02.575941 #>  #> $b[[3]]$b #> [1] GAkPPTN#x wZ        [_|       ,         f-/N(_5Km #> Levels: GAkPPTN#x wZ [_| , f-/N(_5Km #>  #>  #> $b[[4]] #> $b[[4]]$a #> [1] \"87-07-25 22:02:16 UTC\"   \"1071-11-16 22:26:04 UTC\" #> [3] \"2504-10-04 12:16:17 UTC\" \"2955-06-10 00:45:07 UTC\" #> [5] \"2726-03-21 22:11:17 UTC\" \"1285-11-19 06:23:00 UTC\" #> [7] \"2407-12-17 11:09:01 UTC\" \"1256-07-17 19:40:16 UTC\" #>  #> $b[[4]]$b #> [1]  TRUE  TRUE FALSE #>  #>  #> $b[[5]] #> $b[[5]]$a #> [1] _>0;2N    e         /Q,;rYbJA N         #> Levels: _>0;2N e /Q,;rYbJA N #>  #> $b[[5]]$b #> [1] \"1985-07-31\" \"2750-01-14\" \"2539-12-11\" #>  #>  #> $b[[6]] #> $b[[6]]$a #> [1] FALSE FALSE #>  #> $b[[6]]$b #> [1]     0  7860   934  2085 -7020 -5632  3124  -848 -6063 #>  #>  #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"Generate lists values coming single generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator quickcheck_generator object. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) %>% show_example() #> [[1]] #>  [1]  6891 -2939     0  1191     0 -2178 -9463 -9564   833  2021 #>  #> [[2]] #> [1]  8600 -3218   157 #>  #> [[3]] #> [1] -1781 -2814  6195 -1529     0 -6142 -7828     0  -977 #>  #> [[4]] #> [1]     0  6775  3941 -2108  6137 -8275  -996 #>  #> [[5]] #> [1] -8282 -6535 -4630 #>  #> [[6]] #> [1] 6264 #>  #> [[7]] #>  [1]  8669 -3453  6759     0 -9527 -5539   -22 -3901 -1265     0 #>  #> [[8]] #> [1] -8986 -6659 -5345 -2331 -6557 -1223  8305 -4662  2127 #>  #> [[9]] #> [1]  6582   119 -1809  5108 #>  #> [[10]] #>  [1]     0  3067  -820  6664     0  6223 -6314  9383  5652 -8838 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator object.","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() %>% show_example() #>  [1] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE logical_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] FALSE FALSE FALSE    NA FALSE FALSE FALSE    NA  TRUE  TRUE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  numeric_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_positive(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_negative(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator object.","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() %>% show_example() #> [1]  4497 -4104  4685 -6364  5759 -4222  8637   970  3471 numeric_(big_num = TRUE) %>% show_example() #>  [1] -7.908156e+306 -1.109027e+307   0.000000e+00  7.589894e+307  5.258901e+307 #>  [6]  6.039891e+307  8.783560e+306 -3.649688e+307  7.902993e+306 -1.150668e+307 numeric_bounded(left = -5L, right = 5L) %>% show_example() #> [1] -0.4782697  0.7788744  3.1006043 numeric_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] -6809  7168 -4164    99 -1114    NA  9291    NA -9053  7523"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... set unnamed generators. prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) %>% show_example() #> [1]  4581  -246 -2484     0  -849     0  5820 one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) %>% show_example() #> [1] FALSE FALSE"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), any_na = FALSE)  posixct_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  posixct_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  posixct_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator object.","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() %>% show_example() #> [1] \"490-05-07 10:06:17 UTC\"  \"2826-09-07 23:46:13 UTC\" #> [3] \"2486-01-23 01:14:14 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) %>% show_example() #> [1] \"2020-11-06 08:29:48 UTC\" \"2020-02-19 03:27:53 UTC\" #> [3] \"2020-01-09 01:52:40 UTC\" \"2020-02-28 15:16:11 UTC\" #> [5] \"2020-03-15 09:24:50 UTC\" \"2020-01-30 18:20:55 UTC\" #> [7] \"2020-04-09 03:36:00 UTC\" posixct_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] NA                        NA                        #>  [3] \"1166-07-08 21:14:06 UTC\" NA                        #>  [5] \"1578-11-07 07:28:36 UTC\" \"565-10-12 16:42:15 UTC\"  #>  [7] \"236-06-08 11:54:46 UTC\"  \"209-02-23 14:17:02 UTC\"  #>  [9] \"877-03-28 02:52:12 UTC\"  NA"},{"path":"/reference/repeat_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly test properties of a function — repeat_test","title":"Repeatedly test properties of a function — repeat_test","text":"Repeatedly test properties function","code":""},{"path":"/reference/repeat_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(property, tests = getOption(\"quickcheck.tests\", 100L))"},{"path":"/reference/repeat_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly test properties of a function — repeat_test","text":"property function parameters includes expectation. tests number tests run.","code":""},{"path":"/reference/repeat_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly test properties of a function — repeat_test","text":"testthat expectation object.","code":""},{"path":"/reference/repeat_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(   property = function() {     num <- stats::runif(1, min = 0, max = 10)     testthat::expect_true(num >= 0 && num <= 10)   } )"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator quickcheck_generator object.","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() %>% show_example() #> [1] FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way tibble::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator object.","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) %>% show_example() #> # A tibble: 7 × 1 #>       a #>   <int> #> 1 -9718 #> 2  7713 #> 3  1138 #> 4 -6973 #> 5 -8072 #> 6  1339 #> 7     0 tibble_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #> # A tibble: 5 × 2 #>       a b           #>   <int> <chr>       #> 1 -8168 \"Z0+D7b3Rq\" #> 2 -5652 \"&idEd7Z\"   #> 3     0 \"r05h\"      #> 4 -2486 \"Q2^i\"      #> 5 -1450 \"8\\\"ny~?X\""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) %>% show_example() #> # A tibble: 9 × 7 #>   ...1       ...2       ...3       ...4  ...5       ...6  ...7  #>   <date>     <date>     <date>     <lgl> <date>     <lgl> <lgl> #> 1 2839-09-27 2413-09-14 1200-11-18 TRUE  2719-10-16 TRUE  FALSE #> 2 1046-10-07 2810-03-26 2556-01-27 TRUE  1689-11-04 TRUE  TRUE  #> 3 1551-07-10 2335-06-25 1812-09-28 FALSE 1258-11-15 FALSE FALSE #> 4 2720-06-19 2063-06-01 1884-07-07 FALSE 2246-02-20 FALSE FALSE #> 5 1773-06-11 1806-02-25 2586-05-02 TRUE  1587-10-23 TRUE  FALSE #> 6 1262-06-21 1820-06-05 2230-01-03 TRUE  1235-01-07 TRUE  FALSE #> 7 1763-10-30 2387-01-15 2252-10-30 TRUE  1517-08-29 FALSE TRUE  #> 8 1000-10-20 1508-05-15 1092-10-07 FALSE 1043-07-08 FALSE TRUE  #> 9 2834-03-23 2565-01-17 2212-11-07 TRUE  1868-04-30 TRUE  FALSE tibble_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #> # A tibble: 10 × 5 #>    ...1            ...2         ...3  ...4 ...5       #>    <time>          <lgl>       <dbl> <int> <date>     #>  1 10:57:59.114920 TRUE   931207399.  7928 1564-01-07 #>  2 19:50:57.523825 TRUE  -154801267.  3807 2119-11-27 #>  3 08:42:49.479204 TRUE   276299677. -2194 2879-05-30 #>  4 21:45:30.447733 FALSE  479886596.   658 1265-04-26 #>  5 23:02:58.607829 TRUE   520723031. -8251 1287-08-30 #>  6 06:39:21.169224 TRUE  -804049009.  1692 1745-02-12 #>  7 16:11:26.962589 FALSE  203941629. -2399 2477-09-11 #>  8 14:44:36.140362 FALSE  614050136.  3025 2284-10-06 #>  9 11:05:45.671745 TRUE   -31758024. -1375 2511-03-08 #> 10 10:20:30.016156 FALSE -190322214.   500 1074-01-22"},{"path":"/news/index.html","id":"quickcheck-011","dir":"Changelog","previous_headings":"","what":"quickcheck 0.1.1","title":"quickcheck 0.1.1","text":"CRAN release: 2022-03-11","code":""},{"path":"/news/index.html","id":"internal-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"quickcheck 0.1.1","text":"Now doesn’t require R >= 4.1","code":""},{"path":"/news/index.html","id":"quickcheck-010","dir":"Changelog","previous_headings":"","what":"quickcheck 0.1.0","title":"quickcheck 0.1.0","text":"CRAN release: 2022-02-10","code":""},{"path":"/news/index.html","id":"major-breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Major breaking changes","title":"quickcheck 0.1.0","text":"default length vector generators changed 1 range 1 10. parameters form frac_ replaced any_, take logical value instead double value.","code":""},{"path":"/news/index.html","id":"features-0-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"quickcheck 0.1.0","text":"New character_letters generates character vectors letters. New character_numbers generates character vectors numbers. New character_alphanumeric generates character vectors letters numbers. New flat_list_of generates lists atomic scalars. New data_frame_ generate data.frames. New data_frame_of generate data.frames. New data.table_ generate data.tables. New data.table_of generate data.tables. New anything generates R object. New any_flat_homogeneous_list generates flat lists homogeneous elements. New any_data_frame generates data.frames. New any_data.table generates data.tables. New any_undefined generates undefined values. New equal_length generates equal length vectors. New from_hedgehog converts hedgehog quickcheck generator. New as_hedgehog converts quickcheck hedgehog generator. New repeat_test tests property repeatedly.","code":""},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
