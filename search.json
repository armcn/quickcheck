[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install development version quickcheck GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(),     b = numeric_(),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(),     b = numeric_(),     c = numeric_(),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) library(dplyr)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = 1L, frac_na = 0)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1] gff|p`1l2 #> Levels: gff|p`1l2 any_atomic(len = 10L, frac_na = 0.5) |> show_example() #>  [1]           NA -14116774566           NA           NA           NA #>  [6]           NA           NA           NA -26038609274           NA"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = 1L, frac_na = 0)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] \"2502-05-13\" #>  any_flat_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> NA #>  #> [[3]] #> [1] 354178515 #>  #> [[4]] #> [1] b9X8J2Zw #> Levels: b9X8J2Zw #>  #> [[5]] #> 13:20:39.279389 #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] -296535621 #>  #> [[9]] #> [1] NA #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = 1L, frac_na = 0)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [1]   26501684  743453726 -991625704 -774313521 #>  any_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [[1]]$a #>              NA #> 03:26:49.451241 #>              NA #> 22:33:02.110807 #> 10:08:06.076760 #>  #> [[1]]$b #> [1] \"1133-10-17\" #>  #>  #> [[2]] #> [[2]]$a #> 23:47:11.031079 #> 11:16:14.696196 #> 04:23:45.192938 #> 20:17:43.656250 #> 20:44:40.581471 #>              NA #>              NA #>              NA #>  #> [[2]]$b #> [1] 3416 2483   NA   NA #>  #>  #> [[3]] #> [[3]]$a #> [1] \"nt]U`mm|c\" #>  #> [[3]]$b #> [1]  1 NA  1 NA  1 NA #>  #>  #> [[4]] #> [[4]]$a #> [1] NA         \"-;o.6'Ex\" NA         \"O\"        #>  #> [[4]]$b #> [1] NA NA NA  1  1  1 NA #>  #>  #> [[5]] #> [[5]]$a #> [1]    NA    NA 34173 #>  #> [[5]]$b #> [1]      NA      NA      NA -278120      NA  367022  -77111  250703  -60831 #>  #>  #> [[6]] #> [[6]]$a #> [1] -192895514         NA  363784361         NA  260961900  254918158  874575060 #> [8]         NA  -82599934 #>  #> [[6]]$b #> [1] \"641-02-22 21:57:57 UTC\"  \"2414-02-07 01:46:48 UTC\" #> [3] \"1368-07-13 07:36:45 UTC\" \"442-12-02 10:16:15 UTC\"  #> [5] NA                        \"2490-05-05 15:19:04 UTC\" #> [7] NA                        \"2870-01-03 15:26:57 UTC\" #> [9] \"778-03-09 14:20:50 UTC\"  #>  #>  #> [[7]] #> [[7]]$a #>  [1] \"267-01-07 13:46:55 UTC\"  \"379-11-10 07:15:59 UTC\"  #>  [3] NA                        \"1433-09-22 01:13:59 UTC\" #>  [5] \"1187-04-05 16:03:54 UTC\" NA                        #>  [7] NA                        NA                        #>  [9] \"364-09-19 05:43:30 UTC\"  NA                        #>  #> [[7]]$b #> [1] -6521  8763    NA    NA    NA  7578    NA    NA  3303 #>  #>  #> [[8]] #> [[8]]$a #> [1] \"2160-01-20\" \"2448-10-21\" NA           NA           \"2115-11-17\" #>  #> [[8]]$b #>  [1]         NA  360103028         NA  133754514         NA         NA #>  [7]         NA -329894536   39173638  636849371 #>  #>  #> [[9]] #> [[9]]$a #> [1] \"561-11-03 15:15:07 UTC\" NA                       NA                       #> [4] NA                       NA                       \"599-10-09 22:33:44 UTC\" #> [7] NA                       #>  #> [[9]]$b #> [1]     NA     NA 225224     NA     NA #>  #>  #> [[10]] #> [[10]]$a #>  [1]      NA      NA      NA      NA      NA -213229      NA      NA      NA #> [10]      NA #>  #> [[10]]$b #> 21:39:15.17097 #>  #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 8 × 5 #>   ...1             ...2             ...3        ...4             ...5       #>   <list>           <list>           <list>      <list>           <list>     #> 1 <named list [2]> <named list [2]> <chr [2]>   <named list [2]> <dbl [1]>  #> 2 <named list [2]> <named list [2]> <chr [4]>   <named list [2]> <chr [1]>  #> 3 <named list [2]> <named list [2]> <dbl [3]>   <named list [2]> <dttm [1]> #> 4 <named list [2]> <named list [2]> <fct [2]>   <named list [2]> <int [1]>  #> 5 <named list [2]> <named list [2]> <date [4]>  <named list [2]> <lgl [1]>  #> 6 <named list [2]> <named list [2]> <fct [4]>   <named list [2]> <dbl [1]>  #> 7 <named list [2]> <named list [2]> <dttm [10]> <named list [2]> <time [1]> #> 8 <named list [2]> <named list [2]> <date [7]>  <named list [2]> <dbl [1]>  any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 2 #>    ...1  ...2            #>    <lgl> <time>          #>  1 FALSE 17:16:12.320302 #>  2 TRUE  05:09:13.248436 #>  3 FALSE 05:11:08.010356 #>  4 FALSE 19:49:41.322586 #>  5 FALSE 09:01:57.653611 #>  6 TRUE  08:36:42.747618 #>  7 FALSE 06:50:21.974608 #>  8 FALSE 17:53:57.944957 #>  9 FALSE 12:09:31.357389 #> 10 FALSE 22:23:48.187352 any_tibble(cols = 5L, frac_na = 0.5) |> show_example() #> # A tibble: 4 × 5 #>   ...1      ...2               ...3 ...4       ...5  #>   <list>    <chr>             <dbl> <list>     <lgl> #> 1 <dbl [1]> \"\\\\{v\"              NA  <time [1]> NA    #> 2 <dbl [1]> \"O3t9*5\"  -58690229951. <int [1]>  NA    #> 3 <int [1]>  NA                 NA  <fct [1]>  NA    #> 4 <dbl [1]> \"5`4l&Vr\"   -729050136. <int [1]>  FALSE"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = 1L, frac_na = 0)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [[1]] #> [[1]]$a #> [1] v%!JGQ[ #> Levels: v%!JGQ[ #>  #> [[1]]$b #> [1] -6407  -803  6509 #>  #>  any_vector(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  1  1 NA  1  1 NA  1  1  1 NA"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = 1L, frac_na = 0, frac_empty = 0)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_empty approximate fraction empty character values included vector. fraction 0, default, include empty values. fraction 0.5 include around 50% empty values.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"T1\" character_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"-yH%8+\"    NA          NA          \"Z\"         NA          \"pq\"        #>  [7] \"f\\\\Ibvge\"  NA          NA          \"~0C\\\"}^ I\" character_(len = 10L, frac_empty = 0.5) |> show_example() #>  [1] \"\"       \"\"       \"\"       \"\"       \"\"       \"\"       \"\"       \"\"       #>  [9] \"\"       \"BUJm\\\"\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = 1L, frac_na = 0)  date_bounded(left, right, len = 1L, frac_na = 0)  date_left_bounded(left, len = 1L, frac_na = 0)  date_right_bounded(right, len = 1L, frac_na = 0)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"2200-12-07\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-01\" date_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"1649-03-31\" NA           NA           \"2234-04-27\" \"2352-08-24\" #>  [6] \"1626-08-28\" \"2318-12-26\" NA           NA           \"1416-03-31\""},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(len = 1L, frac_na = 0, frac_nan = 0, frac_inf = 0, big_dbl = FALSE)  double_bounded(left, right, len = 1L, frac_na = 0, frac_nan = 0, frac_inf = 0)  double_left_bounded(   left,   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_right_bounded(   right,   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_positive(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_negative(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_fractional(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_whole(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_nan approximate fraction NaN values included vector. fraction 0, default, include NaN values. fraction 0.5 include around 50% NaN values. frac_inf approximate fraction Inf -Inf values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1] 0 double_(big_dbl = TRUE) |> show_example() #> [1] 0 double_bounded(left = -5, right = 5) |> show_example() #> [1] 3.022811 double_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]         NA  890293793 -122680018 -611335892  211782923          0 #>  [7] -346611358         NA -612352795         NA double_(len = 10L, frac_nan = 0.2, frac_inf = 0.2) |> show_example() #>  [1]       -Inf -511388373  251007339  736070471          0  697677783 #>  [7]  906882995        NaN -261784132 -922976559"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = 1L, frac_na = 0)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] xEjuxqMY #> Levels: xEjuxqMY factor_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA NA  1 NA  1  1 NA  1 NA NA"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   size = getOption(\"quickcheck.size\", 50L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. size maximum length generators. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = 1L, frac_na = 0)  hms_bounded(left, right, len = 1L, frac_na = 0)  hms_left_bounded(left, len = 1L, frac_na = 0)  hms_right_bounded(right, len = 1L, frac_na = 0)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 22:40:39.858467 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 09:58:27.584998 hms_(len = 10L, frac_na = 0.5) |> show_example() #> 03:48:05.772153 #> 10:53:40.163458 #> 22:30:50.751623 #> 01:34:57.514296 #> 18:35:59.365163 #>              NA #>              NA #>              NA #>              NA #>              NA"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = 1L, frac_na = 0, big_int = FALSE)  integer_bounded(left, right, len = 1L, frac_na = 0)  integer_left_bounded(left, len = 1L, frac_na = 0, big_int = FALSE)  integer_right_bounded(right, len = 1L, frac_na = 0, big_int = FALSE)  integer_positive(len = 1L, frac_na = 0, big_int = FALSE)  integer_negative(len = 1L, frac_na = 0, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1] 3054 integer_(big_int = TRUE) |> show_example() #> [1] 2027999220 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1] -4 integer_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] -9878  2490    NA    NA -9451 -6712   756    NA    NA -9932"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1] -136 #>  #> [[2]] #> [1] FALSE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> $a[[1]] #> [1] \"2866-08-23 15:27:57 UTC\" #>  #>  #> $b #> $b[[1]] #> [1] \"1200-11-20\" #>  #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = 1L)"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10.","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] 6373 #>  #> [[2]] #> [1] 0 #>  #> [[3]] #> [1] 8781 #>  #> [[4]] #> [1] 835 #>  #> [[5]] #> [1] -8379 #>  #> [[6]] #> [1] -8851 #>  #> [[7]] #> [1] -4787 #>  #> [[8]] #> [1] 0 #>  #> [[9]] #> [1] 6977 #>  #> [[10]] #> [1] -7242 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = 1L, frac_na = 0)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1] TRUE logical_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]    NA    NA    NA FALSE    NA  TRUE FALSE FALSE  TRUE  TRUE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = 1L, frac_na = 0, big_num = FALSE)  numeric_bounded(left, right, len = 1L, frac_na = 0)  numeric_left_bounded(left, len = 1L, frac_na = 0, big_num = FALSE)  numeric_right_bounded(right, len = 1L, frac_na = 0, big_num = FALSE)  numeric_positive(len = 1L, frac_na = 0, big_num = FALSE)  numeric_negative(len = 1L, frac_na = 0, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1] -4016 numeric_(big_num = TRUE) |> show_example() #> [1] -4.296457e+306 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1] 4.759094 numeric_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  705269125          0  135689149 -962386223  309003094  164980312 #>  [7]  344729114  953403383         NA         NA"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1] \"U3o1+\" one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> NULL"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = 1L, frac_na = 0)  posixct_bounded(left, right, len = 1L, frac_na = 0)  posixct_left_bounded(left, len = 1L, frac_na = 0)  posixct_right_bounded(right, len = 1L, frac_na = 0)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"1187-02-05 06:40:56 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-10-17 12:06:58 UTC\" posixct_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]           NA           NA   2430011049           NA -32245771656 #>  [6] -35278499416           NA           NA -59459550139           NA"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1] FALSE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10.","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 3 × 1 #>       a #>   <int> #> 1  2744 #> 2  6429 #> 3    77 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b            #>   <int> <chr>        #> 1  2141 \"3V`\"        #> 2 -6575 \"fK%M^r\"     #> 3     0 \"z\"          #> 4 -8074 \"O:,kiBf`\"   #> 5  8321 \"391\\\\,bL8R\""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10.","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 4 × 9 #>   ...1       ...2  ...3       ...4  ...5  ...6       ...7       ...8  ...9       #>   <date>     <lgl> <date>     <lgl> <lgl> <date>     <date>     <lgl> <date>     #> 1 1079-02-07 TRUE  2029-05-29 FALSE FALSE 2253-04-02 2967-01-08 TRUE  2796-06-25 #> 2 1306-03-23 TRUE  1909-08-03 TRUE  TRUE  2419-11-03 1949-11-06 FALSE 2513-02-26 #> 3 1770-08-19 FALSE 1164-07-04 TRUE  TRUE  2920-03-22 2146-09-26 TRUE  2766-02-20 #> 4 1032-09-06 TRUE  2304-07-22 FALSE TRUE  2589-10-26 2161-09-20 TRUE  1570-05-21 tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>    ...1            ...2      ...3  ...4                ...5            #>    <time>          <chr>     <lgl> <dttm>              <time>          #>  1 04:18:39.679462 p:H|DTdT  FALSE 444-05-16 19:22:06  08:08:57.982293 #>  2 17:26:40.026751 X9d.a     TRUE  2169-04-25 10:43:25 15:05:20.145226 #>  3 04:39:20.221662 pd<At     FALSE 2925-03-17 23:07:35 23:00:35.666284 #>  4 04:21:41.030976 %8        TRUE  1268-12-02 00:38:49 03:05:32.414107 #>  5 13:21:21.499432 5         FALSE 874-10-26 15:51:44  10:59:29.952523 #>  6 02:18:48.803968 ,gEwi     FALSE 2155-04-25 02:39:14 00:27:09.781087 #>  7 16:27:51.454424 4WNj      FALSE 964-12-26 17:01:30  04:41:30.807353 #>  8 07:51:52.568221 o1C_>?h[H TRUE  2304-06-06 03:53:41 12:51:37.403869 #>  9 05:29:44.640299 I$;5,     FALSE 1558-11-10 07:05:49 10:03:07.283589 #> 10 10:14:36.462742 nw        FALSE 1562-04-29 12:13:18 21:28:18.144198"},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"Initial version","code":""}]
