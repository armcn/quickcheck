[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Examples.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing +","title":"Examples","text":"","code":"test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1L),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     c = numeric_(len = 1L),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           })"},{"path":"/articles/Examples.html","id":"testing-baserev","dir":"Articles","previous_headings":"","what":"Testing base::rev","title":"Examples","text":"","code":"test_that(\"reverse of reverse is identity\", {   for_all(     a = any_vector(len = c(1L, 10L)),     property = \\(a) a |> rev() |> rev() |> expect_equal(a)   ) })  test_that(\"reverse of concatenation is flipped concatenation of reversed\", {   for_all(     a = integer_(len = c(1L, 10L)),     b = integer_(len = c(1L, 10L)),     property = \\(a, b) rev(c(a, b)) |> expect_equal(c(rev(b), rev(a)))   ) })"},{"path":"/articles/Examples.html","id":"testing-stringrstr_c","dir":"Articles","previous_headings":"","what":"Testing stringr::str_c","title":"Examples","text":"","code":"test_that(\"str_c does nothing with a single input string\", {   for_all(     a = character_(len = 1L),     property = \\(a) str_c(a) |> expect_equal(a)   ) })  test_that(\"str_c returns a single string with multiple input strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     c = character_(len = 1L),     property = \\(a, b, c) str_c(a, b, c) |> length() |> expect_equal(1L)   ) })  test_that(\"concatenation of strings always contains the original strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     property = \\(a, b) {       str_c(a, b) |> str_detect(fixed(a)) |> expect_true()       str_c(a, b) |> str_detect(fixed(b)) |> expect_true()     }   ) })"},{"path":"/articles/Examples.html","id":"testing-dplyrdistinct","dir":"Articles","previous_headings":"","what":"Testing dplyr::distinct","title":"Examples","text":"","code":"test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = \\(a) expect_equal(a, a + 0)   )           }) #> Test passed 🌈  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = \\(a, b) expect_equal(a + b, b + a)   )           }) #> Test passed 🎊  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) #> Test passed 🌈 library(dplyr) |> suppressMessages()  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) }) #> Test passed 🥳  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) }) #> Test passed 😀  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) }) #> Test passed 🥇"},{"path":"/index.html","id":"quickcheck-generators","dir":"","previous_headings":"","what":"Quickcheck generators","title":"Property Based Testing","text":"Many generators provided quickcheck. examples.","code":""},{"path":"/index.html","id":"atomic-vectors","dir":"","previous_headings":"Quickcheck generators","what":"Atomic vectors","title":"Property Based Testing","text":"","code":"integer_(len = 10) |> show_example() #>  [1]  -814     0 -3226  4292 -9604 -4857 -6333     0   143  1791 character_alphanumeric(len = 10, frac_na = 0.5) |> show_example() #>  [1] \"0O3JDnxgK\" NA          \"GB\"        \"ilHPKEIez\" \"N88\"       NA          #>  [7] \"IU\"        NA          NA          \"vgmzoe9Z\""},{"path":"/index.html","id":"lists","dir":"","previous_headings":"Quickcheck generators","what":"Lists","title":"Property Based Testing","text":"","code":"list_(a = constant(NULL), b = logical_(len = 1)) |> show_example() #> $a #> NULL #>  #> $b #> [1] FALSE flat_list_of(hms_(), len = 3) |> show_example() #> [[1]] #> 08:23:44.87806 #>  #> [[2]] #> 20:43:37.839286 #>  #> [[3]] #> 20:54:18.834063"},{"path":"/index.html","id":"tibbles","dir":"","previous_headings":"Quickcheck generators","what":"Tibbles","title":"Property Based Testing","text":"","code":"tibble_(a = date_(), b = posixct_(), rows = 5) |> show_example() #> # A tibble: 5 x 2 #>   a          b                   #>   <date>     <dttm>              #> 1 1092-06-04 1786-08-16 19:37:01 #> 2 2780-10-06 2731-07-01 13:51:04 #> 3 1586-07-16 0377-07-03 09:38:30 #> 4 2212-03-17 0404-12-21 08:54:40 #> 5 2515-04-24 2979-02-04 05:40:53 tibble_of(any_vector(), cols = 3, rows = 3) |> show_example() #> # A tibble: 3 x 3 #>   ...1       ...2             ...3  #>   <list>     <list>           <lgl> #> 1 <chr [1]>  <named list [2]> FALSE #> 2 <fct [1]>  <named list [2]> FALSE #> 3 <time [1]> <named list [2]> FALSE"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used simply wrapping from_hedgehog. hood function wrap hedgehog generator anonymous function add quickcheck_generator class . hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error:","code":"library(hedgehog)  is_even <-    \\(a) a %% 2 == 0  gen_powers_of_two <-    gen.element(1:10) |> gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> expect_true() ) for_all(   a = from_hedgehog(gen_powers_of_two),   b = integer_(),   property = \\(a, b) c(a, b) |> is.numeric() |> expect_true() ) for_all(   a = tibble_of(from_hedgehog(gen_powers_of_two)),   property = \\(a) is_tibble(a) |> expect_true() ) #> Error"},{"path":"/index.html","id":"fuzz-testing","dir":"","previous_headings":"","what":"Fuzz testing","title":"Property Based Testing","text":"Fuzz testing special case property based testing property testing code doesn’t fail range inputs. example fuzz testing quickcheck. Let’s say want test purrr::map function won’t fail vector input.","code":"for_all(   a = any_vector(),   property = \\(a) purrr::map(a, identity) |> expect_silent() )"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1] FALSE FALSE FALSE  TRUE any_atomic(len = 10L, frac_na = 0.5) |> show_example() #>  [1]         NA         NA         NA          0 -788293378  -69328670 #>  [7] -937408923   85926709         NA -457381691"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat homogeneous list generator — any_flat_homogeneous_list","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic scalar type.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() |> show_example() #> [[1]] #> [1] \"pP%\" #>  any_flat_homogeneous_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] 1bWMWovK #> Levels: 1bWMWovK #>  #> [[3]] #> [1] tK'WQ;Y #> Levels: tK'WQ;Y #>  #> [[4]] #> [1] PwG #> Levels: PwG #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] ~c[)aM$b #> Levels: ~c[)aM$b #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] iM\"*x]C #> Levels: iM\"*x]C #>  #> [[10]] #> [1] U #> Levels: U #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] \"|\" #>  #> [[2]] #> [1] \"2736-12-22\" #>  #> [[3]] #> 02:08:31.456768 #>  any_flat_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] -8404 #>  #> [[2]] #> [1] NA #>  #> [[3]] #> [1] \"1JCAK>No?\" #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] Lc<ku2 #> Levels: Lc<ku2 #>  #> [[6]] #> [1] 948624674 #>  #> [[7]] #> [1] TRUE #>  #> [[8]] #> [1] _=u #> Levels: _=u #>  #> [[9]] #> [1] NA #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [1] \"2207-06-05\" #>  #> [[2]] #> [1] TDe #> Levels: TDe #>  #> [[3]] #> [1]  TRUE FALSE  TRUE FALSE FALSE FALSE #>  any_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> NA #>  #> [[2]] #> [1] \"x1jzy(L@\" #>  #> [[3]] #> [1] -825474420 #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] \"2561-04-03 14:15:13 UTC\" #>  #> [[6]] #> [1] \"g}m@#|&$\" #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] 6778 #>  #> [[9]] #> [1] -605658934 #>  #> [[10]] #> NA #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 7 × 7 #>   ...1                ...2         ...3   ...4                 ...5 ...6         #>   <dttm>              <list>       <list> <time>              <dbl> <list>       #> 1 1567-05-17 22:47:47 <named list> <fct>  16:21:41.126822   -7.45e7 <named list> #> 2 286-12-22 14:49:58  <named list> <chr>  21:46:18.673830    1.68e8 <named list> #> 3 1135-02-09 23:36:34 <named list> <fct>  04:18:37.823389    9.09e8 <named list> #> 4 2886-02-03 09:50:47 <named list> <chr>  19:27:26.834145   -4.67e8 <named list> #> 5 1409-06-12 04:34:24 <named list> <chr>  06:57:47.734160    1.33e8 <named list> #> 6 1139-07-30 01:00:28 <named list> <fct>  06:00:14.928861    0      <named list> #> 7 2333-02-21 12:47:43 <named list> <dbl>  10:53:30.599750    5.99e8 <named list> #> # … with 1 more variable: ...7 <int> any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 8 #>    ...1          ...2 ...3         ...4   ...5   ...6   ...7   ...8            #>    <chr>        <int> <list>       <list> <list> <list> <list> <time>          #>  1 \"$7nV\\\\UtuD\"  8725 <named list> <fct>  <dbl>  <fct>  <fct>  11:38:32.805336 #>  2 \"pGqu0o\"     -1774 <named list> <fct>  <chr>  <dttm> <fct>  07:09:17.486588 #>  3 \"`-\"          -570 <named list> <int>  <chr>  <int>  <time> 09:02:46.628176 #>  4 \"+zGR_\"       6118 <named list> <chr>  <int>  <fct>  <dbl>  09:15:32.893002 #>  5 \"86)msn\"       762 <named list> <chr>  <chr>  <dbl>  <dttm> 01:09:24.134045 #>  6 \"$v/w7 ,Q\"   -2058 <named list> <lgl>  <time> <time> <time> 18:27:24.410870 #>  7 \"l$0|\"           0 <named list> <dbl>  <dttm> <date> <time> 20:29:16.842174 #>  8 \"Dt\"         -5147 <named list> <dttm> <dttm> <dbl>  <fct>  01:42:46.296209 #>  9 \"lbC_~:3d'\"   2970 <named list> <date> <chr>  <time> <time> 16:18:10.826957 #> 10 \"]e/\"         3096 <named list> <date> <dbl>  <lgl>  <dttm> 10:05:52.223272 any_tibble(cols = 5L, frac_na = 0.5) |> show_example() #> # A tibble: 9 × 5 #>   ...1       ...2        ...3 ...4            ...5      #>   <list>     <list>     <int> <time>          <list>    #> 1 <dbl [4]>  <time [1]>    NA 17:20:17.144525 <fct [1]> #> 2 <date [7]> <time [1]>    NA 07:18:44.170337 <fct [1]> #> 3 <dttm [2]> <time [1]>  -388 17:58:06.261657 <int [1]> #> 4 <dbl [3]>  <time [1]>  9614 23:10:53.293242 <int [1]> #> 5 <dbl [5]>  <time [1]>  6200 05:09:30.438246 <int [1]> #> 6 <dttm [6]> <time [1]>   943       NA        <int [1]> #> 7 <dbl [4]>  <time [1]>  6820 20:29:23.196280 <int [1]> #> 8 <chr [9]>  <time [1]>     0 21:52:50.037022 <int [1]> #> 9 <int [7]>  <time [1]> -7070 16:21:06.616405 <fct [1]>"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Undefined value generator — any_undefined","title":"Undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Undefined value generator — any_undefined","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined() |> show_example() #> [1] -Inf"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [1] FALSE FALSE  TRUE  TRUE  TRUE any_vector(len = 10L, frac_na = 0.5) |> show_example() #>  [1]    NA -8502  5572 -4038  4712 -2079   707 -1454    NA    NA"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, tibbles, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything()"},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator generator","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() |> show_example() #> # A tibble: 7 × 3 #>   ...1             ...2         ...3     #>   <list>           <chr>        <chr>    #> 1 <named list [2]> \"7m6\"        \"c1fN\"   #> 2 <named list [2]> \"HvB[HU)\\\"8\" \"R/4c!E\" #> 3 <named list [2]> \"gi\"         \"U)*\"    #> 4 <named list [2]> \"Em\"         \"D)\"     #> 5 <named list [2]> \"BC\"         \"\\\"O}Y\"  #> 6 <named list [2]> \"zB)'Crq\"    \"c\"      #> 7 <named list [2]> \"N.#\"        \"yY\""},{"path":"/reference/as_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"Convert quickcheck generator hedgehog generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"as_hedgehog(generator)"},{"path":"/reference/as_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"generator quickcheck_generator generator","code":""},{"path":"/reference/as_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) |>     as_hedgehog() |>     hedgehog::gen.with(\\(a) 2 ^ a) for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), frac_na = 0, frac_empty = 0)  character_letter(len = c(1L, 10L), frac_na = 0, frac_empty = 0)  character_word(len = c(1L, 10L), frac_na = 0, frac_empty = 0)  character_alphanumeric(len = c(1L, 10L), frac_na = 0, frac_empty = 0)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_empty approximate fraction empty character values included vector. fraction 0, default, include empty values. fraction 0.5 include around 50% empty values.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"` \"        \"Q.E@\"      \"#:4:4|J\"   \"ve)Ub^d\"   \"%FNo\"      \"1&3ni0pG'\" #> [7] \"zM{2>=\"    \"'$6 #+MZ%\" \"!\"         character_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"A|\\\\M08G<\" NA          NA          NA          NA          \"}P\"        #>  [7] NA          NA          NA          \"t7\"        character_(len = 10L, frac_empty = 0.5) |> show_example() #>  [1] \"\"          \"4\"         \"\"          \"mm\"        \"\"          \"L28a(e\"    #>  [7] \"\"          \"Ie},-p=;q\" \"?\"         \"8_\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), frac_na = 0)  date_bounded(left, right, len = c(1L, 10L), frac_na = 0)  date_left_bounded(left, len = c(1L, 10L), frac_na = 0)  date_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #>  [1] \"1466-08-09\" \"2793-07-10\" \"1666-08-25\" \"2599-11-21\" \"1579-09-08\" #>  [6] \"1901-02-19\" \"1207-04-18\" \"1516-02-01\" \"2826-06-09\" \"1744-12-22\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-02\" date_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]      NA -336503      NA      NA      NA -338021  313313      NA  336511 #> [10]      NA"},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0 )  double_left_bounded(   left,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_nan approximate fraction NaN values included vector. fraction 0, default, include NaN values. fraction 0.5 include around 50% NaN values. frac_inf approximate fraction Inf -Inf values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1]  535425601 -542506510 double_(big_dbl = TRUE) |> show_example() #> [1]   0.000000e+00 -1.505140e+307  7.354429e+307   0.000000e+00 -9.391742e+306 #> [6]  1.085383e+307  6.923814e+307  7.305794e+307  1.997220e+307 double_bounded(left = -5, right = 5) |> show_example() #> [1] -4.624630 -1.331337 -3.116635 -2.747339  4.000259 -3.339244  3.330352 double_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] -664886491   16701821 -260288705         NA         NA  603755427 #>  [7]  600384241  747507017   -5227323  588006276 double_(len = 10L, frac_nan = 0.2, frac_inf = 0.2) |> show_example() #>  [1] -207852983  961649220  894537929 -618685540          0  756592863 #>  [7]        NaN -388832296       -Inf  858523496"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal length vector generator — equal_length","title":"Equal length vector generator — equal_length","text":"Generates equal length vectors contained list.","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(..., len = c(1L, 10L))"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal length vector generator — equal_length","text":"... set vector generators. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal length vector generator — equal_length","text":"quickcheck_generator generator","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(integer_(), double_()) |> show_example() #> [[1]] #> [1] -8509  7941 -8435  7340     0  9047  6654 -4232  -419 #>  #> [[2]] #> [1] -559727117 -823144856  411316604 -445030061 -794979910 -843234946  978490920 #> [8]  980477856 -239284202 #>  equal_length(a = logical_(), b = character_(), len = 5L) |> show_example() #> $a #> [1]  TRUE FALSE  TRUE  TRUE  TRUE #>  #> $b #> [1] \"$V%)\"   \"be=bE=\" \"<#k\"    \"7\"      \"{y+ij\"  #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] 8\\\\$Wk#|v? o=c        U_#        EdU        YW.[ZJ     D#*<^Z&_*  xe^6J9`[   #> Levels: 8\\\\$Wk#|v? o=c U_# EdU YW.[ZJ D#*<^Z&_* xe^6J9`[ factor_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  1 NA NA  1  1  1 NA  1 NA  1"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"generate flat lists values coming single input generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] 0 #>  #> [[2]] #> [1] -1301 #>  #> [[3]] #> [1] -2792 #>  #> [[4]] #> [1] 0 #>  #> [[5]] #> [1] 7129 #>  #> [[6]] #> [1] -4444 #>  #> [[7]] #> [1] 8437 #>  #> [[8]] #> [1] -4906 #>  #> [[9]] #> [1] -8623 #>  #> [[10]] #> [1] 177 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   size = getOption(\"quickcheck.size\", 50L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. size maximum length generators. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen generator","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"is_even <-   \\(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) |> hedgehog::gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> testthat::expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), frac_na = 0)  hms_bounded(left, right, len = c(1L, 10L), frac_na = 0)  hms_left_bounded(left, len = c(1L, 10L), frac_na = 0)  hms_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 06:36:04.349114 #> 22:41:37.905962 #> 13:29:13.549002 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 10:29:40.476499 #> 03:32:53.012563 hms_(len = 10L, frac_na = 0.5) |> show_example() #>              NA #>              NA #>              NA #>              NA #>              NA #> 11:07:35.338559 #> 22:58:29.765668 #> 16:09:00.797562 #> 22:59:27.575991 #> 21:47:56.002833"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), frac_na = 0)  integer_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_positive(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_negative(len = c(1L, 10L), frac_na = 0, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1]  2490 -7095     0 integer_(big_int = TRUE) |> show_example() #> [1]   942044149           0  -299224618  1066192869   519692690   649169205 #> [7]  1176225892 -1271850014 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1]  0  0 -5  0  5  2 -3 integer_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]   NA   NA   NA 8761 4359   NA   NA    0   NA 6173"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1] -3821 -1533 -9147 #>  #> [[2]] #> [1] TRUE TRUE TRUE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> [1]          0 -125053327 #>  #> $b #> $b[[1]] #> [1]  832796848 -806188437  745497238  415671763          0 -758121171 -355169394 #>  #> $b[[2]] #> [1] GA(z   RcCR%N _      ?M1Q^) uo_    #> Levels: GA(z RcCR%N _ ?M1Q^) uo_ #>  #> $b[[3]] #> [1] \",}Hvr.\\\"A\" \"?h66{v\"    \"]\"         \"{3^\"       #>  #> $b[[4]] #> [1] \"86-09-30 07:00:46 UTC\"   \"2229-11-12 16:16:09 UTC\" #> [3] \"274-01-22 01:56:34 UTC\"  \"275-07-01 10:21:26 UTC\"  #>  #> $b[[5]] #> [1] \"2228-11-23\" \"2582-09-03\" \"2016-06-10\" \"1524-03-27\" \"1661-11-14\" #> [6] \"1418-08-23\" \"2262-05-26\" #>  #> $b[[6]] #> [1] \"1792-07-05 07:30:05 UTC\" \"342-09-13 23:12:10 UTC\"  #> [3] \"180-05-25 21:49:15 UTC\"  #>  #> $b[[7]] #> [1] \"1418-02-02\" \"1181-06-15\" \"1380-04-19\" \"1436-02-13\" \"2752-04-29\" #> [6] \"1012-06-20\" \"1384-06-20\" \"1663-06-11\" #>  #> $b[[8]] #> [1] \"f-d*N,\" #>  #> $b[[9]] #> [1] \"864-09-28 17:19:30 UTC\"  \"648-01-12 02:00:30 UTC\"  #> [3] \"1871-08-31 16:07:46 UTC\" \"1812-11-11 02:23:25 UTC\" #> [5] \"176-05-12 08:06:12 UTC\"  \"1909-11-12 18:17:39 UTC\" #> [7] \"644-05-28 08:48:36 UTC\"  \"2008-12-21 06:10:10 UTC\" #> [9] \"1938-12-11 01:32:25 UTC\" #>  #> $b[[10]] #> [1] \"b_>Sb@W*\" \"zZ\\\\.\"    \"0I[Oyp\"   #>  #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1]  1522  4095  7158  2499 -4554 #>  #> [[2]] #> [1]     0 -4357 -2756 -7510     0 #>  #> [[3]] #> [1]  2049 -2487  8079 #>  #> [[4]] #> [1] -8667  3137  4444  5324 -5813 -1324  7764   750 #>  #> [[5]] #> [1]     0 -8459  3414 -1229 -9953  6592  3456 -7402 -6982 #>  #> [[6]] #> [1]  3927  7915  5232  4759    90 -1863     0 -2822   543 #>  #> [[7]] #> [1]  9747  3439 -1758 -6266     0     0 -6186  4163  4329 #>  #> [[8]] #> [1] -7065 -3106  -726  8972  8429  6700   112  1240  4581 #>  #> [[9]] #> [1]  9369  8216 -5827 -3310 -1194 -8745  7038  8373  9864 #>  #> [[10]] #> [1] -9324  5441  8734 -6533  1936  -282  6847 -8711 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1]  TRUE FALSE  TRUE  TRUE logical_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] FALSE    NA FALSE    NA    NA    NA FALSE  TRUE FALSE    NA"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), frac_na = 0)  numeric_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_positive(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_negative(len = c(1L, 10L), frac_na = 0, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1] -972781528 -221199419   -9730243 -325963310  351818942  305520940 -615721974 numeric_(big_num = TRUE) |> show_example() #> [1] -3.200013e+307   0.000000e+00  3.221438e+307 -4.550107e+307  5.257850e+307 #> [6] -2.376341e+307 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1] -4.996625  3.029620  0.000000  0.000000 numeric_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] -994084370 -906257049 -840296845         NA  903657894         NA #>  [7]  813940313         NA         NA          0"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1] \"+u;Z:Sc\"   \"TvKr\"      \"#2\\\\\"      \"!)8Pb\"     \"Cfc3\"      \"-&KZgbG5$\" #> [7] \"1=BBIMGb\"  one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> [1] FALSE FALSE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), frac_na = 0)  posixct_bounded(left, right, len = c(1L, 10L), frac_na = 0)  posixct_left_bounded(left, len = c(1L, 10L), frac_na = 0)  posixct_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"1402-01-15 01:00:10 UTC\" \"2362-12-09 09:15:28 UTC\" #> [3] \"2716-08-27 02:20:33 UTC\" \"1190-11-21 20:15:48 UTC\" #> [5] \"457-04-06 14:28:53 UTC\"  \"1314-10-04 23:27:11 UTC\" #> [7] \"520-09-12 05:41:03 UTC\"  \"881-08-09 12:40:22 UTC\"  #> [9] \"983-04-04 23:27:49 UTC\"  posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-12-08 06:57:29 UTC\" \"2020-03-04 01:09:47 UTC\" posixct_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]           NA           NA           NA           NA -29065279197 #>  [6] -60802418092 -30958669167 -35465061603 -40218511612           NA"},{"path":"/reference/repeat_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly test properties of a function — repeat_check","title":"Repeatedly test properties of a function — repeat_check","text":"Repeatedly test properties function","code":""},{"path":"/reference/repeat_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly test properties of a function — repeat_check","text":"","code":"repeat_check(property, tests = getOption(\"quickcheck.tests\", 100L))"},{"path":"/reference/repeat_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly test properties of a function — repeat_check","text":"property anonymous function arguments includes expectation. tests number tests run.","code":""},{"path":"/reference/repeat_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly test properties of a function — repeat_check","text":"testthat expectation object.","code":""},{"path":"/reference/repeat_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly test properties of a function — repeat_check","text":"","code":"repeat_check(   property = \\() {     num <- stats::runif(1, min = 0, max = 10)     testthat::expect_true(num >= 0 && num <= 10)   } )"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1] TRUE TRUE TRUE TRUE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 9 × 1 #>       a #>   <int> #> 1 -9789 #> 2  5701 #> 3  4575 #> 4    92 #> 5  9083 #> 6 -9819 #> 7  8095 #> 8  2663 #> 9 -4845 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b        #>   <int> <chr>    #> 1  5330 #D>ok=FR #> 2  8553 K) 1     #> 3     0 %1D      #> 4 -4570 B~b)     #> 5 -5060 315me"},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 5 × 8 #>   ...1  ...2       ...3  ...4       ...5  ...6       ...7       ...8       #>   <lgl> <date>     <lgl> <date>     <lgl> <date>     <date>     <date>     #> 1 FALSE 2565-03-15 FALSE 2026-07-29 FALSE 1308-04-02 1013-10-15 1717-08-11 #> 2 FALSE 2018-12-22 FALSE 2272-05-21 FALSE 1922-12-22 1622-02-26 1077-05-18 #> 3 TRUE  1903-09-02 TRUE  1616-04-26 TRUE  2822-02-20 1699-07-10 1642-04-04 #> 4 FALSE 1046-04-20 FALSE 1947-12-19 FALSE 2095-04-04 2012-07-29 2714-10-14 #> 5 FALSE 2236-09-21 FALSE 1953-05-17 FALSE 1870-01-16 2750-09-01 2998-03-09 tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>    ...1        ...2       ...3                ...4                ...5  #>    <fct>       <date>     <dttm>              <dttm>              <lgl> #>  1 \" \"         2586-06-09 2909-09-08 16:53:12 90-12-06 16:36:37   FALSE #>  2 \"m\"         1561-06-14 2660-10-11 17:12:45 1459-06-07 08:40:12 TRUE  #>  3 \"tCT98\"     1725-10-22 27-06-12 01:08:12   1979-04-05 13:45:12 FALSE #>  4 \",L;rfd\"    1940-06-07 154-08-13 13:17:31  1264-01-03 09:28:28 FALSE #>  5 \"H\\\"sRo[S\"  2870-06-27 2561-10-25 11:41:30 2527-01-12 05:20:42 FALSE #>  6 \"Ym1<X194P\" 1045-11-24 329-09-11 23:38:19  595-01-02 07:21:07  TRUE  #>  7 \" w\"        1319-01-15 1255-02-02 16:23:47 1410-03-22 15:16:56 FALSE #>  8 \"Zu/2%e]}\"  2968-07-07 2103-03-10 14:54:09 307-09-29 22:22:12  TRUE  #>  9 \"a\"         1435-02-15 1941-09-29 14:06:04 2129-09-25 22:41:47 TRUE  #> 10 \"'7^@^O,\"   2021-04-08 2326-12-31 11:36:35 895-06-11 14:15:15  FALSE"},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
