[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Examples.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing +","title":"Examples","text":"","code":"test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1L),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     c = numeric_(len = 1L),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           })"},{"path":"/articles/Examples.html","id":"testing-baserev","dir":"Articles","previous_headings":"","what":"Testing base::rev","title":"Examples","text":"","code":"test_that(\"reverse of reverse is identity\", {   for_all(     a = any_vector(len = c(1L, 10L)),     property = \\(a) a |> rev() |> rev() |> expect_equal(a)   ) })  test_that(\"reverse of concatenation is flipped concatenation of reversed\", {   for_all(     a = integer_(len = c(1L, 10L)),     b = integer_(len = c(1L, 10L)),     property = \\(a, b) rev(c(a, b)) |> expect_equal(c(rev(b), rev(a)))   ) })"},{"path":"/articles/Examples.html","id":"testing-stringrstr_c","dir":"Articles","previous_headings":"","what":"Testing stringr::str_c","title":"Examples","text":"","code":"test_that(\"str_c does nothing with a single input string\", {   for_all(     a = character_(len = 1L),     property = \\(a) str_c(a) |> expect_equal(a)   ) })  test_that(\"str_c returns a single string with multiple input strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     c = character_(len = 1L),     property = \\(a, b, c) str_c(a, b, c) |> length() |> expect_equal(1L)   ) })  test_that(\"concatenation of strings always contains the original strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     property = \\(a, b) {       str_c(a, b) |> str_detect(fixed(a)) |> expect_true()       str_c(a, b) |> str_detect(fixed(b)) |> expect_true()     }   ) })"},{"path":"/articles/Examples.html","id":"testing-dplyrdistinct","dir":"Articles","previous_headings":"","what":"Testing dplyr::distinct","title":"Examples","text":"","code":"test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) library(dplyr)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used simply wrapping from_hedgehog. hood function wrap hedgehog generator anonymous function add quickcheck_generator class . hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error:","code":"library(hedgehog)  is_even <-    \\(a) a %% 2 == 0  gen_powers_of_two <-    gen.element(1:10) |> gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> expect_true() ) for_all(   a = from_hedgehog(gen_powers_of_two),   b = integer_(),   property = \\(a, b) c(a, b) |> is.numeric() |> expect_true() ) for_all(   a = tibble_of(from_hedgehog(gen_powers_of_two)),   property = \\(a) is_tibble(a) |> expect_true() )"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #>  [1] \"<K5~S\"     \"{XZ\"       \";\\\\{O-UJX\" \"8%LUr(/\"   \"BA0\"       \"V]Pji!N,\"  #>  [7] \"hw\"        \"~ '\"       \"f1BOF1E\"   \"STCAu\"     any_atomic(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA          \",c[BxE*:9\" NA          \"<{8,!\"     \"w'$\"       NA          #>  [7] \"x \"        \"[g\"        NA          NA"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] 7 #> Levels: 7 #>  #> [[3]] #> [1] \"1393-05-19\" #>  #> [[4]] #> [1] \"2130-02-10\" #>  #> [[5]] #> [1] TRUE #>  #> [[6]] #> [1] 88359706 #>  #> [[7]] #> [1] 9614 #>  #> [[8]] #> [1] \"1505-10-10\" #>  any_flat_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] NA #>  #> [[3]] #> [1] TRUE #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] -6260 #>  #> [[8]] #> [1] :} #> Levels: :} #>  #> [[9]] #> [1] NA #>  #> [[10]] #> [1] \"lgCdD7\" #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [1] -823898308 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] \"ER\" #>  #> [[4]] #> [1] ;m #> Levels: ;m #>  #> [[5]] #> [1] TRUE #>  #> [[6]] #> [1] 9484 #>  #> [[7]] #> [1] \"2102-11-08\" #>  any_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] NA NA  1  1  1 #>  #> [[2]] #> [1]           NA           NA           NA   1908701211           NA #> [6]           NA -47080764507           NA #>  #> [[3]] #> [1]  435730422 -289804608   76713701  205889416  429592359         NA -744208293 #> [8]         NA #>  #> [[4]] #> [1] NA NA NA  1 #>  #> [[5]] #> [1]  9866 -7364 -5891    NA    NA  6582 #>  #> [[6]] #> [1] \"740-07-22 15:38:38 UTC\"  \"1730-09-08 23:07:03 UTC\" #> [3] \"1806-05-01 17:48:10 UTC\" \"1177-06-30 11:50:41 UTC\" #> [5] \"51-09-01 08:50:19 UTC\"   \"1210-11-03 17:24:16 UTC\" #>  #> [[7]] #> [1]        NA 869483995 #>  #> [[8]] #>  [1]    NA FALSE FALSE    NA FALSE    NA FALSE FALSE    NA FALSE #>  #> [[9]] #> [1] \"d-\"    NA      NA      NA      \"\\\\JQm\" #>  #> [[10]] #> [1]      NA -223462 -318598      NA      NA      NA      NA #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 5 × 4 #>   ...1             ...2         ...3       ...4      #>   <list>           <fct>        <list>     <list>    #> 1 <named list [2]> \"rD~q-\"      <lgl [4]>  <dbl [1]> #> 2 <named list [2]> \"]Q;\"        <chr [6]>  <int [1]> #> 3 <named list [2]> \"8Ow]-6O\"    <dttm [6]> <dbl [1]> #> 4 <named list [2]> \"^GG'n6/0\\\\\" <int [1]>  <lgl [1]> #> 5 <named list [2]> \"F]E8=E\"     <time [3]> <lgl [1]> any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 5 #>    ...1            ...2      ...3             ...4       ...5        #>    <time>          <fct>     <list>           <list>     <fct>       #>  1 00:07:28.546851 1         <named list [2]> <date [6]> \"wbi\"       #>  2 23:09:36.719348 b1h       <named list [2]> <int [5]>  \"'lg~\\\\n\"   #>  3 12:03:08.988954 C         <named list [2]> <date [7]> \"-\"         #>  4 06:14:42.117540 IQAJ^U;ot <named list [2]> <dbl [5]>  \"VQ$r!giJX\" #>  5 22:15:52.753993 4d7NMX4s  <named list [2]> <time [8]> \"2w$\"       #>  6 00:49:36.951871 a_Pl4Un   <named list [2]> <dbl [7]>  \"}e\"        #>  7 12:12:05.078071 F         <named list [2]> <dttm [2]> \"q\"         #>  8 21:01:32.764748 'qhZ      <named list [2]> <dbl [2]>  \"h}@_5$zV|\" #>  9 13:19:48.491820 &^QD+x    <named list [2]> <fct [2]>  \"}H\"        #> 10 21:45:59.449654 ?7aZ      <named list [2]> <int [5]>  \"#iVn\\\\8\"   any_tibble(cols = 5L, frac_na = 0.5) |> show_example() #> # A tibble: 7 × 5 #>          ...1 ...2                ...3       ...4       ...5 #>         <dbl> <dttm>              <list>     <list>    <int> #> 1  123334603. 2230-09-09 04:34:21 <chr [1]>  <lgl [1]>    NA #> 2 -555673662. 1654-05-15 06:35:25 <time [6]> <dbl [1]>     1 #> 3 -539690572. 2817-01-19 23:39:42 <dbl [1]>  <dbl [1]>    NA #> 4  114188762. NA                  <dbl [6]>  <chr [1]>    NA #> 5 -541389677. NA                  <dttm [1]> <dbl [1]>     1 #> 6  659650809. NA                  <lgl [1]>  <chr [1]>    NA #> 7         NA  NA                  <int [5]>  <dbl [1]>    NA"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Undefined value generator — any_undefined","title":"Undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Undefined value generator — any_undefined","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Undefined value generator — any_undefined","text":"","code":"any_undefined() |> show_example() #> [1] NA"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"quickcheck_generator generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> 14:11:33.136994 #> 00:04:08.862215 #> 07:05:48.266929 #> 01:14:42.928022 #> 13:37:40.526705 #> 08:52:05.387779 #> 02:58:15.646013 #> 03:35:04.673078 any_vector(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  1  1  1 NA  1 NA  1  1 NA  1"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, tibbles, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything()"},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator generator","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() |> show_example() #> # A tibble: 0 × 0"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), frac_na = 0, frac_empty = 0)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_empty approximate fraction empty character values included vector. fraction 0, default, include empty values. fraction 0.5 include around 50% empty values.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"DE5fj?s\" \"0l\"      \"7 41V\"   character_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA      \"{YSZa\" NA      \"M9\"    NA      \"1\"     NA      NA      \" >\"    #> [10] \"s#\"    character_(len = 10L, frac_empty = 0.5) |> show_example() #>  [1] \"zH'K b\"  \"2O\"      \"\"        \"UG\"      \"\"        \"\"        \"n@]_y'L\" #>  [8] \"\"        \"~(j\"     \":]gBa5\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), frac_na = 0)  date_bounded(left, right, len = c(1L, 10L), frac_na = 0)  date_left_bounded(left, len = c(1L, 10L), frac_na = 0)  date_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"2879-01-19\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-08\" \"2020-01-07\" \"2020-01-03\" date_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"1009-10-18\" \"2453-05-20\" NA           \"1567-06-11\" NA           #>  [6] \"2682-10-19\" \"2630-05-03\" NA           NA           \"1382-06-23\""},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0 )  double_left_bounded(   left,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_nan approximate fraction NaN values included vector. fraction 0, default, include NaN values. fraction 0.5 include around 50% NaN values. frac_inf approximate fraction Inf -Inf values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1] 57183935 double_(big_dbl = TRUE) |> show_example() #> [1]  8.333063e+307 -6.954997e+307 double_bounded(left = -5, right = 5) |> show_example() #> [1]  2.292205 -4.442913 -1.028863 -3.831881  4.151608  1.822871 -3.165277 double_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  161051736         NA   72817130         NA  415366550 -580648917 #>  [7]          0 -819678931  -83335954 -756617263 double_(len = 10L, frac_nan = 0.2, frac_inf = 0.2) |> show_example() #>  [1] -886641424        Inf -561559827 -661950398   36473112        Inf #>  [7]  358099665  690366374        Inf -526487460"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] D}(    >tTNs| 1v]    K3m%   .Kl-Po Kbet   [2WVP  9D>>;  ]      #> Levels: D}( >tTNs| 1v] K3m% .Kl-Po Kbet [2WVP 9D>>; ] factor_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA NA NA  1  1  1  1  1  1 NA"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"generate flat lists values coming single input generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10.","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] -7597 #>  #> [[2]] #> [1] -5092 #>  #> [[3]] #> [1] 0 #>  #> [[4]] #> [1] -3906 #>  #> [[5]] #> [1] 6469 #>  #> [[6]] #> [1] 3500 #>  #> [[7]] #> [1] -1006 #>  #> [[8]] #> [1] 7875 #>  #> [[9]] #> [1] 530 #>  #> [[10]] #> [1] 5012 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   size = getOption(\"quickcheck.size\", 50L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. size maximum length generators. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen generator","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"library(quickcheck) library(testthat)  is_even <-   \\(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) |> hedgehog::gen.with(\\(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = \\(a) is_even(a) |> expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), frac_na = 0)  hms_bounded(left, right, len = c(1L, 10L), frac_na = 0)  hms_left_bounded(left, len = c(1L, 10L), frac_na = 0)  hms_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 19:26:14.616222 #> 15:23:37.732142 #> 21:44:47.619031 #> 10:38:07.957014 #> 12:24:37.626755 #> 04:48:14.644181 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 07:01:59.053867 #> 05:48:35.126919 #> 09:33:02.210683 #> 00:44:38.296084 #> 07:52:25.473038 #> 07:38:57.074184 #> 02:06:20.453552 #> 02:33:14.180728 #> 01:46:10.493046 hms_(len = 10L, frac_na = 0.5) |> show_example() #>              NA #>              NA #> 12:38:34.695206 #>              NA #>              NA #>              NA #> 08:07:09.087282 #> 00:02:01.352534 #> 23:15:46.961415 #>              NA"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), frac_na = 0)  integer_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_positive(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_negative(len = c(1L, 10L), frac_na = 0, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1] -9827  8749  2525     0 integer_(big_int = TRUE) |> show_example() #> [1]  -640731512 -1187922666 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1]  2  0 -4 -1  4  3  2 -3 integer_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]    NA  2969    NA    NA    NA  5289    NA    NA -3832    NA"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1]  7660  7949 -1284     0  6959 -1116 #>  #> [[2]] #> [1] FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> [1] FALSE #>  #> $b #> $b[[1]] #> $b[[1]]$a #>  [1] \"2764-03-30\" \"2233-02-06\" \"1740-05-02\" \"1349-05-06\" \"1886-03-22\" #>  [6] \"1802-12-16\" \"2304-12-06\" \"1173-10-06\" \"2952-03-07\" \"1223-06-17\" #>  #> $b[[1]]$b #> 09:44:22.828211 #> 01:58:25.962313 #> 12:11:17.982070 #> 14:33:26.389183 #>  #>  #> $b[[2]] #> $b[[2]]$a #> [1] r@%)Tn'   cnI>d|    5Q1$pNDP  !Mi1      ]e`       ->0D\"     8dtyIR&KY #> [8] PYv       Eb/J3<    #> Levels: r@%)Tn' cnI>d| 5Q1$pNDP !Mi1 ]e` ->0D\" 8dtyIR&KY PYv Eb/J3< #>  #> $b[[2]]$b #> [1] GD$:,FKO/ Bu        y'3       3vc#*{n   j>wLs91{  ()\"       #> Levels: GD$:,FKO/ Bu y'3 3vc#*{n j>wLs91{ ()\" #>  #>  #> $b[[3]] #> $b[[3]]$a #> [1] ~         }fAH1W?R  p         QM}v&1&3) #?c2      ZmQ\"O, X} _bscN]02j #> [8] jU        #> Levels: ~ }fAH1W?R p QM}v&1&3) #?c2 ZmQ\"O, X} _bscN]02j jU #>  #> $b[[3]]$b #> [1] \"J4:\"      \"M\"        \"-ijh,wZR\" #>  #>  #> $b[[4]] #> $b[[4]]$a #> [1] Ptb:      a+K*E<6   ]io-gkS|S G,0i\"     rB&       P gI      #> Levels: Ptb: a+K*E<6 ]io-gkS|S G,0i\" rB& P gI #>  #> $b[[4]]$b #> [1] \"2462-02-07 21:11:34 UTC\" \"2758-07-19 06:56:32 UTC\" #> [3] \"1382-12-27 08:33:06 UTC\" #>  #>  #> $b[[5]] #> $b[[5]]$a #> [1]  9644  -834 -1836 -9803 -9395  8090 -6092   320 #>  #> $b[[5]]$b #> [1]  TRUE FALSE #>  #>  #> $b[[6]] #> $b[[6]]$a #> [1] \"aD*5t\"     \"E\"         \"L<D7T'*3H\" #>  #> $b[[6]]$b #>  [1] \"1714-05-15\" \"1226-10-22\" \"2310-09-18\" \"1173-10-13\" \"1813-10-21\" #>  [6] \"2758-04-28\" \"1727-01-26\" \"2204-08-04\" \"1907-04-05\" \"2554-05-24\" #>  #>  #> $b[[7]] #> $b[[7]]$a #> 07:38:07.229464 #> 12:26:36.225685 #> 18:13:50.148268 #> 02:00:42.298498 #> 23:14:09.784793 #> 13:42:11.407114 #>  #> $b[[7]]$b #> [1] TRUE TRUE TRUE #>  #>  #> $b[[8]] #> $b[[8]]$a #> [1] FALSE #>  #> $b[[8]]$b #> [1] \"1787-09-28\" \"2227-12-24\" \"1092-04-25\" #>  #>  #> $b[[9]] #> $b[[9]]$a #> 22:48:45.240983 #> 22:36:54.573683 #>  #> $b[[9]]$b #> [1] -528553838 -609076039  664963762 -909372536 -304452159 -942173020  277172090 #>  #>  #> $b[[10]] #> $b[[10]]$a #> [1] \"UTfqJ\"   \"!Mt\\\\q5\" \"U3[7B4!\" \"S\\\"~,&}\" \"1%\"      \"qA--O\"   \"JOEC\"    #> [8] \";z\"      \"1lwM)e\"  #>  #> $b[[10]]$b #> [1] \"588-11-12 17:30:55 UTC\"  \"367-03-08 20:28:58 UTC\"  #> [3] \"2440-05-23 03:15:06 UTC\" \"1255-08-20 22:57:37 UTC\" #> [5] \"2833-03-02 07:59:54 UTC\" \"2742-03-04 19:40:04 UTC\" #> [7] \"2465-07-24 12:54:57 UTC\" \"907-04-15 08:09:15 UTC\"  #>  #>  #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10.","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] -4021 -3035 -2420  4999 #>  #> [[2]] #> [1] -5696  6703 -3405  4662 -2496 #>  #> [[3]] #> [1]  6396  2855 -6505 #>  #> [[4]] #> [1] 2413 9832    0 3745 5463    0 #>  #> [[5]] #> [1]  5276     0  8991  -491 -5903 -2864     0 #>  #> [[6]] #> [1] -2490 -1933     0 -3978 -5176 #>  #> [[7]] #> [1]  7434  7310  -408 -9182  5289 -4723 #>  #> [[8]] #> [1]     0  9399 -3076 -4453  9483    -8     0  2019 #>  #> [[9]] #> [1]  5971 -1181  3009 -1650  7365 -8747     0 -9095  2210 #>  #> [[10]] #> [1] 0 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1] TRUE TRUE TRUE TRUE logical_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  TRUE  TRUE    NA FALSE    NA    NA FALSE FALSE FALSE  TRUE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), frac_na = 0)  numeric_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_positive(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_negative(len = c(1L, 10L), frac_na = 0, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1]  5701  6387  5700 -5785  3709  3312  6162  8957 numeric_(big_num = TRUE) |> show_example() #> [1]  1.061823e+307 -4.780447e+307 -3.298649e+307 -3.963240e+307 -8.244967e+307 #> [6] -5.187331e+307  6.296342e+307 -8.523724e+306 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1] -1  0 -4  2 -4  1 -3 -1 numeric_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] -8121 -4919    NA    NA    NA    NA     0    NA    NA    NA"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #>  [1]     0 -3528 -4051  1953  5973 -8636  6654 -7212 -7853  9496 one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> [1] FALSE FALSE  TRUE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), frac_na = 0)  posixct_bounded(left, right, len = c(1L, 10L), frac_na = 0)  posixct_left_bounded(left, len = c(1L, 10L), frac_na = 0)  posixct_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"2751-04-15 22:23:18 UTC\" \"872-03-22 22:13:29 UTC\"  posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-02-16 14:47:07 UTC\" \"2020-12-16 04:50:52 UTC\" posixct_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"1831-03-08 11:37:53 UTC\" NA                        #>  [3] \"49-03-12 10:39:24 UTC\"   NA                        #>  [5] NA                        NA                        #>  [7] \"2918-04-27 02:38:48 UTC\" \"2823-09-19 09:37:27 UTC\" #>  [9] \"2633-07-22 09:08:23 UTC\" NA"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10.","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 7 × 1 #>       a #>   <int> #> 1 -7866 #> 2 -8459 #> 3     2 #> 4 -7384 #> 5  9312 #> 6  -840 #> 7  8086 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b         #>   <int> <chr>     #> 1 -1251 |S_HPV}%` #> 2    26 IZyZ      #> 3     0 ? ]Xqp$   #> 4  6252 YIF       #> 5  3747 3"},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10.","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 5 × 1 #>   ...1  #>   <lgl> #> 1 TRUE  #> 2 TRUE  #> 3 TRUE  #> 4 FALSE #> 5 TRUE  tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>    ...1       ...2         ...3                   ...4  ...5 #>    <date>     <chr>        <time>                <dbl> <int> #>  1 2544-09-28 \";e'0}bh\\\"z\" 18:38:56.155599 -499723888.  2761 #>  2 2030-06-06 \"D3=ll\"      14:24:20.173704 -407108940. -8274 #>  3 2926-06-12 \"o&h\"        09:00:29.776650  643554221. -3286 #>  4 2807-08-03 \"%\\\\8ac\\\"+\"  22:47:35.821282 -373701501.  2502 #>  5 1877-08-07 \"C\"          16:40:52.074227 -242103515.  -455 #>  6 1563-01-25 \"@s+w\"       02:45:06.747776          0  -2801 #>  7 2202-07-19 \"[\"          12:59:52.025998  803607358. -6554 #>  8 2718-11-25 \"-\"          23:59:07.199895 -214727575.     0 #>  9 1107-08-11 \"i\"          18:01:57.690715  577510030.     0 #> 10 1233-03-30 \"UrBp}E=\"    04:18:41.962666  274513050. -8459"},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
