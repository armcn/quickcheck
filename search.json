[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Examples.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing +","title":"Examples","text":"","code":"test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1L),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1L),     b = numeric_(len = 1L),     c = numeric_(len = 1L),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           })"},{"path":"/articles/Examples.html","id":"testing-baserev","dir":"Articles","previous_headings":"","what":"Testing base::rev","title":"Examples","text":"","code":"test_that(\"reverse of reverse is identity\", {   for_all(     a = any_vector(len = c(1L, 10L)),     property = \\(a) a |> rev() |> rev() |> expect_equal(a)   ) })  test_that(\"reverse of concatenation is flipped concatenation of reversed\", {   for_all(     a = integer_(len = c(1L, 10L)),     b = integer_(len = c(1L, 10L)),     property = \\(a, b) rev(c(a, b)) |> expect_equal(c(rev(b), rev(a)))   ) })"},{"path":"/articles/Examples.html","id":"testing-stringrstr_c","dir":"Articles","previous_headings":"","what":"Testing stringr::str_c","title":"Examples","text":"","code":"test_that(\"str_c does nothing with a single input string\", {   for_all(     a = character_(len = 1L),     property = \\(a) str_c(a) |> expect_equal(a)   ) })  test_that(\"str_c returns a single string with multiple input strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     c = character_(len = 1L),     property = \\(a, b, c) str_c(a, b, c) |> length() |> expect_equal(1L)   ) })  test_that(\"concatenation of strings always contains the original strings\", {   for_all(     a = character_(len = 1L),     b = character_(len = 1L),     property = \\(a, b) {       str_c(a, b) |> str_detect(fixed(a)) |> expect_true()       str_c(a, b) |> str_detect(fixed(b)) |> expect_true()     }   ) })"},{"path":"/articles/Examples.html","id":"testing-dplyrdistinct","dir":"Articles","previous_headings":"","what":"Testing dplyr::distinct","title":"Examples","text":"","code":"test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) library(dplyr)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> 08:00:10.689406 #> 06:23:19.368735 #> 00:25:02.999376 #> 02:47:28.637901 #> 17:05:16.956347 #> 09:10:35.148556 any_atomic(len = 10L, frac_na = 0.5) |> show_example() #>              NA #> 05:10:35.072734 #> 02:03:21.414925 #>              NA #>              NA #> 19:57:25.974555 #>              NA #>              NA #> 07:50:35.441509 #> 14:23:52.910136"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists element atomic vector length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] tP #> Levels: tP #>  #> [[2]] #> [1] \"1380-07-22 11:25:42 UTC\" #>  any_flat_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] gK #> Levels: gK #>  #> [[2]] #> [1] -196849608 #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] 774 #>  #> [[5]] #> NA #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] %0_B-pj #> Levels: %0_B-pj #>  #> [[8]] #> [1] NA #>  #> [[9]] #> 22:04:49.849429 #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [[1]]$a #> [1] \"935-11-11 11:23:05 UTC\"  \"1223-07-19 06:32:19 UTC\" #> [3] \"914-12-02 14:33:07 UTC\"  \"2133-03-20 18:26:18 UTC\" #> [5] \"2778-10-14 01:04:48 UTC\" \"2668-11-17 18:39:18 UTC\" #> [7] \"2617-03-23 16:56:14 UTC\" \"1572-01-21 03:17:44 UTC\" #>  #> [[1]]$b #> [1] ^!RGP.Gn b$.      EF\"(mZI. #> Levels: ^!RGP.Gn b$. EF\"(mZI. #>  #>  #> [[2]] #> [[2]]$a #> [1]  TRUE FALSE  TRUE #>  #> [[2]]$b #> [1]  2679  9888  2841 -4340  1522  7045 -6372 #>  #>  #> [[3]] #> [[3]]$a #> [1]  1779 -7189  2160 -8157  9941 -3274     0 #>  #> [[3]]$b #> [1] \"2302-09-13\" #>  #>  #> [[4]] #> [[4]]$a #> [1] URrS-O   ~0@=     ?h0tK'   ,,en0oc} -qQ\\\\    U8v&     YB@       -z'     #> Levels: URrS-O ~0@= ?h0tK' ,,en0oc} -qQ\\\\ U8v& YB@  -z' #>  #> [[4]]$b #> [1] -1319  8686  4394  1857 -6367     0 -6874 #>  #>  #> [[5]] #> [[5]]$a #> [1]  525013277 -977749616   40664243 -253842213  115380964 #>  #> [[5]]$b #> [1] -74611965 126888010 943412577         0 312833773 168576314         0 #> [8]         0 #>  #>  #> [[6]] #> [[6]]$a #> [1] \"1209-11-08 11:49:11 UTC\" \"1144-09-10 15:16:41 UTC\" #> [3] \"2894-06-17 15:25:49 UTC\" #>  #> [[6]]$b #> [1] -335229307  407530667  459130418  569809161  345967485 #>  #>  #> [[7]] #> [[7]]$a #> [1] -659746375  909051037 #>  #> [[7]]$b #> [1] ly>i|?:&' |         uM<5      C\\\\<,n)   *IP}14.L  },=       >nS7nON6h #> [8] 7h4,U~@S  'KGu      #> Levels: ly>i|?:&' | uM<5 C\\\\<,n) *IP}14.L },= >nS7nON6h 7h4,U~@S 'KGu #>  #>  any_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [[1]]$a #> [1]    NA 48208 #>  #> [[1]]$b #>  [1]    NA    NA  TRUE  TRUE FALSE FALSE  TRUE    NA  TRUE  TRUE #>  #>  #> [[2]] #> [[2]]$a #>              NA #>              NA #> 14:48:53.470327 #>              NA #> 12:00:40.603365 #>              NA #>  #> [[2]]$b #> [1]      NA  -97385      NA  347350      NA -344894      NA #>  #>  #> [[3]] #> [[3]]$a #> [1]           NA           NA  17479236739 -56283912185 #>  #> [[3]]$b #>  [1] \" {zB9:O\"   NA          \"'(DGC)59+\" NA          \",\"         \"N<mp:\"     #>  [7] \"\\\\\"        NA          \"|^HR\"      NA          #>  #>  #> [[4]] #> [[4]]$a #> [1] -798076998         NA  623093582 #>  #> [[4]]$b #> [1] \"2335-06-13\" \"2932-12-14\" NA           NA           \"2201-02-27\" #> [6] NA           NA           NA           #>  #>  #> [[5]] #> [[5]]$a #>              NA #> 13:23:30.114345 #>              NA #>              NA #> 00:33:58.152319 #> 22:27:13.512427 #> 14:25:07.282680 #>              NA #>              NA #>  #> [[5]]$b #> [1] \"fyH/s\\\\^T,\" \"4|cSF8\"     \"0dx\"        NA           \"C{/+J2>)\"   #>  #>  #> [[6]] #> [[6]]$a #> [1]  1 NA NA  1 #>  #> [[6]]$b #> [1] FALSE    NA    NA  TRUE #>  #>  #> [[7]] #> [[7]]$a #> [1] \"1421-07-22\" NA           \"2327-07-17\" NA           NA           #> [6] \"2766-03-23\" NA           \"2355-03-12\" \"1575-08-26\" #>  #> [[7]]$b #> [1]  593109351         NA -791912520 #>  #>  #> [[8]] #> [[8]]$a #> [1]         NA 9646047667         NA #>  #> [[8]]$b #> [1] NA #>  #>  #> [[9]] #> [[9]]$a #> 06:20:12.43862 #>  #> [[9]]$b #> [1] \"726-08-31 16:21:26 UTC\" NA                       NA                       #> [4] NA                       NA                       NA                       #> [7] NA                       NA                       NA                       #>  #>  #> [[10]] #> [[10]]$a #>              NA #>              NA #> 14:44:15.321343 #>              NA #>              NA #> 06:31:05.573444 #> 22:42:52.657980 #> 07:15:42.843344 #>              NA #>  #> [[10]]$b #> [1] \"'\"       NA        \"-LtIKqt\" #>  #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — any_tibble","title":"Random tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — any_tibble","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 5 × 1 #>   ...1       #>   <list>     #> 1 <dttm [1]> #> 2 <int [5]>  #> 3 <fct [1]>  #> 4 <int [8]>  #> 5 <int [4]>  any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 × 8 #>    ...1       ...2        ...3  ...4 ...5      ...6    ...7  ...8                #>    <list>     <list>     <int> <int> <list>    <list>  <chr> <dttm>              #>  1 <date [1]> <chr [5]>      0   159 <named l… <lgl [… 7Ww   2852-02-25 14:20:03 #>  2 <int [1]>  <lgl [8]>  -5388 -2146 <named l… <dttm … jJ,   777-04-03 04:34:55  #>  3 <date [1]> <chr [5]>  -9427 -1879 <named l… <int [… omN   309-03-13 23:06:35  #>  4 <lgl [1]>  <dbl [4]>  -6486 -8851 <named l… <int [… z_7   1967-12-03 07:30:16 #>  5 <dbl [1]>  <lgl [5]>  -5752 -9443 <named l… <dbl [… zo6*… 605-10-16 20:26:07  #>  6 <time [1]> <lgl [3]>  -1563  6215 <named l… <lgl [… 0E7s… 225-01-26 21:58:39  #>  7 <lgl [1]>  <dbl [6]>  -7549 -9806 <named l… <lgl [… Yt:~… 2053-06-24 20:49:38 #>  8 <int [1]>  <date [1]>  4288 -4269 <named l… <time … s8W1  1590-05-31 17:00:37 #>  9 <dttm [1]> <lgl [1]>  -8445     0 <named l… <lgl [… IS0+… 1499-10-01 06:09:11 #> 10 <chr [1]>  <fct [8]>  -9348 -1465 <named l… <chr [… 8;    567-10-07 12:02:09  any_tibble(cols = 5L, frac_na = 0.5) |> show_example() #> # A tibble: 9 × 5 #>   ...1             ...2       ...3       ...4        ...5                #>   <list>           <list>     <list>     <list>      <dttm>              #> 1 <named list [2]> <dttm [3]> <dbl [1]>  <int [2]>   684-11-17 12:27:51  #> 2 <named list [2]> <dttm [4]> <dbl [1]>  <chr [2]>   NA                  #> 3 <named list [2]> <dbl [4]>  <dbl [1]>  <lgl [9]>   1460-08-01 00:39:42 #> 4 <named list [2]> <lgl [7]>  <time [1]> <int [3]>   813-12-10 21:52:06  #> 5 <named list [2]> <time [4]> <dbl [1]>  <time [10]> NA                  #> 6 <named list [2]> <int [3]>  <lgl [1]>  <dbl [8]>   NA                  #> 7 <named list [2]> <int [4]>  <fct [1]>  <date [9]>  NA                  #> 8 <named list [2]> <dbl [8]>  <chr [1]>  <dbl [2]>   29-06-19 10:07:50   #> 9 <named list [2]> <fct [1]>  <fct [1]>  <date [8]>  NA"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Random vector generator — any_vector","title":"Random vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random vector generator — any_vector","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random vector generator — any_vector","text":"","code":"any_vector() |> show_example() #>  [1]  212500875          0 -938158940          0  -76235739  739895937 #>  [7]  719652185  -52523637  859341147  -80783165 any_vector(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  9403     0 -6107 -5914    NA    NA    NA -1964    NA  9388"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), frac_na = 0, frac_empty = 0)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_empty approximate fraction empty character values included vector. fraction 0, default, include empty values. fraction 0.5 include around 50% empty values.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"<}I\"      \"Z0Cso<;S\" \"L\"        \"Mt}?mSe\"  \"h-&sXh1h\" \"[&}(\"     character_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] NA          \"UDTGG5OF\"  NA          \"o(rOOdOF%\" NA          NA          #>  [7] NA          NA          NA          NA          character_(len = 10L, frac_empty = 0.5) |> show_example() #>  [1] \"\"          \"\"          \"\"          \"wfc[<qWJ/\" \"edNofS\"    \"m[1+F\"     #>  [7] \";B&c4rw\"   \"|pwOVyH{\"  \"\"          \"\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), frac_na = 0)  date_bounded(left, right, len = c(1L, 10L), frac_na = 0)  date_left_bounded(left, len = c(1L, 10L), frac_na = 0)  date_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"1234-11-07\" \"2834-08-25\" \"1481-09-02\" \"1127-08-21\" \"2560-12-04\" #> [6] \"1876-05-16\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-02\" \"2020-01-09\" \"2020-01-06\" \"2020-01-03\" date_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"2623-03-13\" \"2895-11-18\" \"2223-01-13\" \"2797-04-11\" NA           #>  [6] \"1161-12-23\" \"1202-05-15\" \"2568-09-06\" \"2167-05-20\" NA"},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0 )  double_left_bounded(   left,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_nan approximate fraction NaN values included vector. fraction 0, default, include NaN values. fraction 0.5 include around 50% NaN values. frac_inf approximate fraction Inf -Inf values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1] -131616728 -755856348  773128449  401527884 -312826423   11541280  311272159 #> [8] -333978663  258334415 double_(big_dbl = TRUE) |> show_example() #> [1]  5.539992e+306 -3.069750e+306 -8.170399e+307  5.576326e+307  9.308852e+306 #> [6] -2.203290e+306  4.425438e+307 double_bounded(left = -5, right = 5) |> show_example() #> [1]  0.470466  4.343225 -1.565912  4.625502  3.325057 double_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]         NA -466445716 -677195416 -136870152  452964143         NA #>  [7]   46004335 -743739008         NA -196924158 double_(len = 10L, frac_nan = 0.2, frac_inf = 0.2) |> show_example() #>  [1]        Inf        Inf        NaN -703649951  889426627  773593952 #>  [7]        NaN        NaN  115738722 -602107034"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] Yb       6        SB-ay:,3 )7C      #> Levels: Yb 6 SB-ay:,3 )7C factor_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  1  1  1 NA  1  1  1 NA NA  1"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   size = getOption(\"quickcheck.size\", 50L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes value generator calls expectation . tests number tests run. size maximum length generators. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), frac_na = 0)  hms_bounded(left, right, len = c(1L, 10L), frac_na = 0)  hms_left_bounded(left, len = c(1L, 10L), frac_na = 0)  hms_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 19:58:38.924793 #> 17:53:09.754808 #> 08:49:44.321518 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 03:08:06.494404 #> 00:44:19.305763 #> 03:24:51.024270 #> 09:53:53.477261 #> 10:41:44.912612 #> 03:23:38.602454 hms_(len = 10L, frac_na = 0.5) |> show_example() #>              NA #>              NA #> 13:28:58.977614 #> 06:13:45.181010 #>              NA #>              NA #> 21:54:27.802148 #> 04:17:06.278797 #>              NA #> 04:51:18.720815"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), frac_na = 0)  integer_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_positive(len = c(1L, 10L), frac_na = 0, big_int = FALSE)  integer_negative(len = c(1L, 10L), frac_na = 0, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1] 7158 -584 integer_(big_int = TRUE) |> show_example() #> [1] -2057649646 -1710438296  -133985849  2087327392  -565931414 -1658538004 #> [7] -1991115884  1711282241 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1] 0 2 3 integer_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]    NA  8871    NA  1383 -6622  6074  -280    NA    NA    NA"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Quickcheck generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1]     0  3064  1376 -6647 #>  #> [[2]] #> [1] FALSE FALSE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> [1] -8464 #>  #> $b #> $b[[1]] #> $b[[1]]$a #> [1] \"2325-03-22\" \"1797-02-06\" \"2847-06-03\" \"1731-07-20\" \"2352-12-08\" #> [6] \"1534-10-16\" #>  #> $b[[1]]$b #> [1] \"275-02-23 10:51:23 UTC\"  \"1047-01-24 00:09:31 UTC\" #> [3] \"1749-09-19 13:15:41 UTC\" \"114-04-20 15:55:14 UTC\"  #> [5] \"394-04-14 21:13:47 UTC\"  \"1666-08-04 15:37:18 UTC\" #> [7] \"296-08-02 22:02:41 UTC\"  \"1266-03-02 17:32:02 UTC\" #>  #>  #> $b[[2]] #> $b[[2]]$a #> [1] -2152  9138 -2610 -1155  6019 -8290 #>  #> $b[[2]]$b #> [1]  1284     0  9289  8538 -7846  4728 #>  #>  #> $b[[3]] #> $b[[3]]$a #> [1] \"9        7HEa]     Z         0Xt`qmxK~ sl        #> Levels: \"9 7HEa] Z 0Xt`qmxK~ sl #>  #> $b[[3]]$b #> [1] fM>, v/   [3EuvlE,  DVAP]0 v  s=        ~+{>AGGy) |         ^         #> Levels: fM>, v/ [3EuvlE, DVAP]0 v s= ~+{>AGGy) | ^  #>  #>  #> $b[[4]] #> $b[[4]]$a #> [1] -5936   616 #>  #> $b[[4]]$b #> [1] \"570-03-02 06:30:09 UTC\"  \"1605-09-04 17:20:38 UTC\" #>  #>  #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Quickcheck generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10.","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] -9583 -9493     0  8166  1804  5882     0 #>  #> [[2]] #> [1] -1607 -6787 -3567  6914 -9004 -5976 -2933 -5373 #>  #> [[3]] #> [1] -1040 #>  #> [[4]] #> [1]  2913 -8304 #>  #> [[5]] #> [1] 3999 #>  #> [[6]] #> [1]  9143  4821 -1111     0  9114  2378  -563 -4969 #>  #> [[7]] #> [1] -6019 -8781 -5582 -7369  7630  7853 #>  #> [[8]] #> [1] -6407 -3338  7654  -319  4514  -507 #>  #> [[9]] #> [1]  8925  9556    40 -2759 -5780  4091  8687  4293  2913 #>  #> [[10]] #>  [1] -3999 -3540  6766     0  3235  5521  -637  7216  5474 -6601 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() |> show_example() #> [1] TRUE logical_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  TRUE  TRUE FALSE    NA FALSE    NA    NA    NA    NA FALSE"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), frac_na = 0)  numeric_left_bounded(left, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_positive(len = c(1L, 10L), frac_na = 0, big_num = FALSE)  numeric_negative(len = c(1L, 10L), frac_na = 0, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1]   -48     0 -7592 -5188 -7312 numeric_(big_num = TRUE) |> show_example() #> [1] -8.416135e+307  6.964464e+307   0.000000e+00  3.253637e+307  3.323059e+307 #> [6]  2.200439e+307  2.979820e+307 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1]  2 -4 -1  1  5  5  2  0 numeric_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  4774  8466    NA  7824 -9394    NA    NA    NA -8336  2891"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1]  3562 -1666   -94  5962 one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> [1]  TRUE  TRUE  TRUE FALSE FALSE  TRUE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), frac_na = 0)  posixct_bounded(left, right, len = c(1L, 10L), frac_na = 0)  posixct_left_bounded(left, len = c(1L, 10L), frac_na = 0)  posixct_right_bounded(right, len = c(1L, 10L), frac_na = 0)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"461-05-23 20:10:15 UTC\"  \"2052-01-16 06:37:58 UTC\" #> [3] \"865-11-29 18:51:34 UTC\"  \"1397-08-31 18:34:20 UTC\" #> [5] \"31-04-01 15:30:06 UTC\"   \"1122-12-11 19:25:26 UTC\" #> [7] \"4-01-11 11:05:31 UTC\"    \"2761-10-04 22:40:12 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-06-10 02:11:37 UTC\" \"2020-11-09 23:33:03 UTC\" #> [3] \"2020-09-28 06:36:36 UTC\" posixct_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"1114-12-14 10:31:36 UTC\" \"1308-11-28 22:01:48 UTC\" #>  [3] NA                        NA                        #>  [5] \"2165-06-11 07:05:20 UTC\" \"2858-08-25 17:28:40 UTC\" #>  [7] \"2554-06-25 16:49:35 UTC\" \"2521-02-12 04:47:45 UTC\" #>  [9] \"2006-03-03 18:12:10 UTC\" NA"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator generator","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() |> show_example() #> [1] FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10.","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 2 × 1 #>       a #>   <int> #> 1 -3513 #> 2 -5567 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 × 2 #>       a b         #>   <int> <chr>     #> 1  5208 ;d<+7XvS  #> 2 -6116 d         #> 3 -7423 H+z,f{fhq #> 4  6880 `.6cY     #> 5  4976 2|x<@yBs"},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10.","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 2 × 7 #>   ...1       ...2       ...3  ...4  ...5       ...6  ...7       #>   <date>     <date>     <lgl> <lgl> <date>     <lgl> <date>     #> 1 1234-10-22 1084-03-29 TRUE  FALSE 2582-01-18 FALSE 2779-06-12 #> 2 2263-10-08 2599-12-05 FALSE FALSE 2434-05-29 FALSE 2517-03-10 tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 × 5 #>    ...1         ...2 ...3            ...4         ...5       #>    <lgl>       <dbl> <time>          <fct>        <date>     #>  1 TRUE  -206479419. 10:54:25.118256 \"Y5\"         1183-02-11 #>  2 FALSE  483321879. 21:54:36.019208 \"cnqHE\"      1469-08-20 #>  3 TRUE  -777952925. 10:35:53.521299 \"QPovsYe}\"   2472-05-09 #>  4 TRUE   113860344. 03:12:33.840237 \"6V\"         1664-09-07 #>  5 FALSE -631526019. 04:42:12.717704 \"NabAFH}sD\"  1347-07-23 #>  6 TRUE    24466759. 18:13:30.450454 \"}.\\\"6*rFul\" 1548-12-27 #>  7 TRUE   291971458. 22:48:18.212434 \"2^\"         1716-06-01 #>  8 TRUE   -85728973. 16:38:19.278514 \"BU @n-\"     2992-03-31 #>  9 TRUE   560712413. 07:59:57.805557 \"~yr4A\"      1998-07-19 #> 10 TRUE   852118619. 04:46:09.428849 \"e\\\\9\"       1751-11-11"},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
