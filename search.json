[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). quickcheck: Property Based Testing. https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/quickcheck, https://armcn.github.io/quickcheck/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired QuickCheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install released version quickcheck CRAN : development version GitHub :","code":"install.packages(\"quickcheck\") # install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(len = 1),     property = function(a) expect_equal(a, a + 0)   ) }) #> Test passed 🎉  test_that(\"+ is commutative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     property = function(a, b) expect_equal(a + b, b + a)   ) }) #> Test passed 😸  test_that(\"+ is associative\", {   for_all(     a = numeric_(len = 1),     b = numeric_(len = 1),     c = numeric_(len = 1),     property = function(a, b, c) expect_equal(a + (b + c), (a + b) + c)   ) }) #> Test passed 😀 library(dplyr, warn.conflicts = FALSE)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = function(a) {       distinct(a) %>% expect_equal(a)     }   ) }) #> Test passed 🎊  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = function(a) {       bind_rows(a, a) %>%         distinct() %>%         expect_equal(a)     }   ) }) #> Test passed 🎊  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = function(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) %>% expect_equal(unique_rows)     }   ) }) #> Test passed 😀"},{"path":"/index.html","id":"quickcheck-generators","dir":"","previous_headings":"","what":"Quickcheck generators","title":"Property Based Testing","text":"Many generators provided quickcheck. examples.","code":""},{"path":"/index.html","id":"atomic-vectors","dir":"","previous_headings":"Quickcheck generators","what":"Atomic vectors","title":"Property Based Testing","text":"","code":"integer_(len = 10) %>% show_example() #>  [1]  -833  5111 -8831 -3495 -1899  1051  9964  2473  9557 -2465 character_alphanumeric(len = 10) %>% show_example() #>  [1] \"y5Ph\"      \"8\"         \"B8\"        \"3vOcYf\"    \"qr\"        \"o\"         #>  [7] \"5rW2nHdrA\" \"88\"        \"umU\"       \"vJpqr\" posixct_(len = 10, any_na = TRUE) %>% show_example() #>  [1] \"1652-02-25 11:34:40 LMT\" \"1683-08-15 05:26:47 LMT\" #>  [3] \"2339-08-19 19:19:07 PDT\" \"0244-05-09 12:26:30 LMT\" #>  [5] \"0756-11-24 03:23:10 LMT\" \"0660-04-16 21:21:08 LMT\" #>  [7] \"2993-05-14 04:45:47 PDT\" NA                        #>  [9] \"1301-04-09 00:40:00 LMT\" NA"},{"path":"/index.html","id":"lists","dir":"","previous_headings":"Quickcheck generators","what":"Lists","title":"Property Based Testing","text":"","code":"list_(a = constant(NULL), b = any_undefined()) %>% show_example() #> $a #> NULL #>  #> $b #> [1] -Inf flat_list_of(logical_(), len = 3) %>% show_example() #> [[1]] #> [1] TRUE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] TRUE"},{"path":"/index.html","id":"tibbles","dir":"","previous_headings":"Quickcheck generators","what":"Tibbles","title":"Property Based Testing","text":"","code":"tibble_(a = date_(), b = hms_(), rows = 5) %>% show_example() #> # A tibble: 5 x 2 #>   a          b               #>   <date>     <time>          #> 1 1271-08-16 22:32:16.108893 #> 2 2788-05-31 20:37:31.119791 #> 3 1246-05-10 09:14:29.411623 #> 4 2434-06-08 16:01:39.498445 #> 5 1074-10-19 04:07:18.552658 tibble_of(double_bounded(-10, 10), rows = 3, cols = 3) %>% show_example() #> # A tibble: 3 x 3 #>    ...1  ...2  ...3 #>   <dbl> <dbl> <dbl> #> 1  0     2.55  5.81 #> 2  4.42  8.87 -5.43 #> 3  9.45  7.02 -3.97 any_tibble(rows = 3, cols = 3) %>% show_example() #> # A tibble: 3 x 3 #>   ...1             ...2       ...3       #>   <list>           <list>     <date>     #> 1 <named list [2]> <time [2]> 1628-11-24 #> 2 <named list [2]> <time [7]> 2989-06-25 #> 3 <named list [2]> <fct [4]>  2175-02-14"},{"path":"/index.html","id":"hedgehog-generators","dir":"","previous_headings":"","what":"Hedgehog generators","title":"Property Based Testing","text":"quickcheck meant work hedgehog, replace . hedgehog generators can used wrapping from_hedgehog. hedgehog generator can used quickcheck can’t composed together build another generator. example work: cause error: quickcheck generator can also converted hedgehog generator can used hedgehog functions.","code":"library(hedgehog)  is_even <-   function(a) a %% 2 == 0  gen_powers_of_two <-   gen.element(1:10) %>% gen.with(function(a) 2^a)  test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = function(a) is_even(a) %>% expect_true()   ) }) #> Test passed 😀 test_that(\"powers of two and integers are both numeric values\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     b = integer_(),     property = function(a, b) {       c(a, b) %>%         is.numeric() %>%         expect_true()     }   ) }) #> Test passed 🎉 test_that(\"composing hedgehog with quickcheck generators fails\", {   tibble_of(from_hedgehog(gen_powers_of_two)) %>% expect_error() }) #> Test passed 🥇 gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) %>%   as_hedgehog() %>%   gen.with(function(a) 2^a)   test_that(\"is_even returns TRUE for powers of two\", {   for_all(     a = from_hedgehog(gen_powers_of_two),     property = function(a) is_even(a) %>% expect_true()   ) }) #> Test passed 😀"},{"path":"/index.html","id":"fuzz-tests","dir":"","previous_headings":"","what":"Fuzz tests","title":"Property Based Testing","text":"Fuzz testing special case property based testing property tested code doesn’t fail range inputs. example fuzz testing quickcheck. Let’s say want test purrr::map function won’t fail vector input.","code":"test_that(\"map won't fail with any vector as input\", {   for_all(     a = any_vector(),     property = function(a) purrr::map(a, identity) %>% expect_silent()   ) }) #> Test passed 🎉"},{"path":"/index.html","id":"repeat-tests","dir":"","previous_headings":"","what":"Repeat tests","title":"Property Based Testing","text":"Repeat tests can used repeatedly test property holds true many calls function. different regular property based tests don’t require generators. function repeat_test call function many times ensure expectation passes cases. kind test can useful testing functions randomness.","code":"test_that(\"runif generates random numbers between a min and max value\", {   repeat_test(     property = function() {       random_number <- runif(1, min = 0, max = 10)       expect_true(random_number >= 0 && random_number <= 10)     }   ) }) #> Test passed 🎉"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Any atomic vector generator — any_atomic","title":"Any atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical, date, POSIXct, hms, factors.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any atomic vector generator — any_atomic","text":"","code":"any_atomic(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any atomic vector generator — any_atomic","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any atomic vector generator — any_atomic","text":"","code":"any_atomic() %>% show_example() #> [1] >*kb       T7 sGy     v2Rg5 oi   Eg6bfD*E%  !tar       2g@nwe\\\\H_ C;{        #> [8] sm         #> Levels: >*kb T7 sGy v2Rg5 oi Eg6bfD*E% !tar 2g@nwe\\\\H_ C;{ sm any_atomic(len = 10L, any_na = TRUE) %>% show_example() #> 06:08:19.656449 #> 06:16:26.378331 #> 18:16:04.098898 #> 04:13:56.447242 #>              NA #> 01:25:08.413306 #> 23:28:03.427734 #> 09:39:08.680524 #> 17:00:33.641891 #> 21:58:48.829314"},{"path":"/reference/any_data.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data.table generator — any_data.table","title":"Any data.table generator — any_data.table","text":"Generate data.tables.","code":""},{"path":"/reference/any_data.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data.table generator — any_data.table","text":"","code":"any_data.table(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data.table generator — any_data.table","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data.table generator — any_data.table","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_data.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data.table generator — any_data.table","text":"","code":"any_data.table(rows = 3L, cols = 3L) %>% show_example() #>         ...1                ...2       ...3 #> 1:  XzL)xHC# 1284-10-10 15:53:34 2815-04-11 #> 2:     -6524 2334-11-05 21:19:20 1597-12-25 #> 3: 212798395 1185-11-08 04:38:21 1188-05-21"},{"path":"/reference/any_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data frame generator — any_data_frame","title":"Any data frame generator — any_data_frame","text":"Generate data.frames.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data frame generator — any_data_frame","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data frame generator — any_data_frame","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = 3L, cols = 3L) %>% show_example() #>    ...1  ...2    ...3 #> 1 FALSE FALSE ]Xe}^G] #> 2 FALSE FALSE    N=x+ #> 3  TRUE  TRUE    \"hB_"},{"path":"/reference/any_flat_homogeneous_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any flat homogeneous list generator — any_flat_homogeneous_list","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"Generate lists element atomic scalar class.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_homogeneous_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_flat_homogeneous_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any flat homogeneous list generator — any_flat_homogeneous_list","text":"","code":"any_flat_homogeneous_list() %>% show_example() #> [[1]] #> [1] \"2802-11-01\" #>  #> [[2]] #> [1] \"2514-07-04\" #>  #> [[3]] #> [1] \"2163-03-06\" #>  #> [[4]] #> [1] \"2676-10-26\" #>  #> [[5]] #> [1] \"2504-11-27\" #>  #> [[6]] #> [1] \"2031-08-22\" #>  #> [[7]] #> [1] \"1032-08-14\" #>  #> [[8]] #> [1] \"1513-05-08\" #>  #> [[9]] #> [1] \"2238-07-21\" #>  any_flat_homogeneous_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] -701712298 #>  #> [[3]] #> [1] -952464960 #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] 982744363 #>  #> [[6]] #> [1] 434608547 #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] 787596990 #>  #> [[9]] #> [1] 466107259 #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any flat list generator — any_flat_list","title":"Any flat list generator — any_flat_list","text":"Generate lists element atomic scalar.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any flat list generator — any_flat_list","text":"","code":"any_flat_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any flat list generator — any_flat_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any flat list generator — any_flat_list","text":"","code":"any_flat_list() %>% show_example() #> [[1]] #> [1] OV #> Levels: OV #>  #> [[2]] #> [1] 4482 #>  any_flat_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] \"633-06-15 05:03:30 UTC\" #>  #> [[3]] #> [1] p!n8&wB #> Levels: p!n8&wB #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] 0V] #> Levels: 0V] #>  #> [[6]] #> [1] \\\\6|upnwt/ #> Levels: \\\\6|upnwt/ #>  #> [[7]] #> [1] FALSE #>  #> [[8]] #> [1] !ktY #> Levels: !ktY #>  #> [[9]] #> [1] \"&QSIMZ|P\" #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Any list generator — any_list","title":"Any list generator — any_list","text":"Generate lists containing lists atomic vectors.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any list generator — any_list","text":"","code":"any_list(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any list generator — any_list","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any list generator — any_list","text":"","code":"any_list() %>% show_example() #> [[1]] #> [[1]]$a #> [1]  -63709358 -268528780  841596979   -4848839   14508732  363066162  771416499 #>  #> [[1]]$b #> [1] T%6\\\\H    y<<       bPIYQ?    A         `d        Ak$-      1]*       #> [8] 2#P:u\"n   }Ia> F5Ga #> Levels: T%6\\\\H y<< bPIYQ? A `d Ak$- 1]* 2#P:u\"n }Ia> F5Ga #>  #>  any_list(len = 10L, any_na = TRUE) %>% show_example() #> [[1]] #> [[1]]$a #> [1] \"9.8\"     \"7e/.!k\"  \"P_cG]:\"  \"lu\"      \"$+9Dq<\"  \"A?8pI9\"  \"<bQm~#?\" #> [8] NA        NA        #>  #> [[1]]$b #> [1] \"1187-04-06 18:04:08 UTC\" \"147-04-17 00:10:28 UTC\"  #> [3] \"220-05-18 06:33:34 UTC\"  \"2026-01-20 13:07:11 UTC\" #> [5] \"2067-07-12 21:57:45 UTC\" NA                        #> [7] \"1023-05-15 13:38:56 UTC\" \"2281-12-01 02:37:48 UTC\" #> [9] \"1778-12-04 01:17:06 UTC\" #>  #>  #> [[2]] #> [[2]]$a #> [1] TRUE #>  #> [[2]]$b #> [1]  1823  8781     0 -2527 #>  #>  #> [[3]] #> [[3]]$a #>  [1]  834482673 -510298122 -795409775  499987640 -433306438  362294465 #>  [7]         NA         NA  272871477  402254390 #>  #> [[3]]$b #>              NA #> 03:38:42.935532 #> 15:12:44.181392 #> 07:54:58.378903 #>              NA #> 12:05:34.695529 #>  #>  #> [[4]] #> [[4]]$a #> [1] 6596 #>  #> [[4]]$b #> [1]  728416597 -287244673  888515110  186662271 -378458836 #>  #>  #> [[5]] #> [[5]]$a #> [1]         0 310305374 -27656643 888081671 778221990 #>  #> [[5]]$b #> [1] -109 6973 -575 8559   NA #>  #>  #> [[6]] #> [[6]]$a #> [1] NA #>  #> [[6]]$b #> [1] FALSE  TRUE    NA  TRUE  TRUE #>  #>  #> [[7]] #> [[7]]$a #> [1] FALSE    NA  TRUE    NA  TRUE #>  #> [[7]]$b #> [1]         NA -672355568 #>  #>  #> [[8]] #> [[8]]$a #> [1] NA  1  1  1  1 #>  #> [[8]]$b #> [1] \"1673-03-16\" \"1772-06-15\" \"2259-01-23\" NA           \"2107-01-12\" #> [6] \"2276-03-07\" \"2052-10-01\" #>  #>  #> [[9]] #> [[9]]$a #> [1] \"1433-05-09 00:53:12 UTC\" \"218-06-03 14:09:08 UTC\"  #> [3] \"2614-04-10 04:52:13 UTC\" NA                        #> [5] \"1413-11-28 08:07:32 UTC\" NA                        #> [7] \"1856-12-25 10:20:40 UTC\" \"907-03-20 09:52:33 UTC\"  #> [9] \"2096-12-05 13:18:08 UTC\" #>  #> [[9]]$b #> [1] NA      NA      NA      NA      \"?hAN8\" #>  #>  #> [[10]] #> [[10]]$a #> [1] NA           \"1443-11-28\" \"2699-08-04\" NA           \"1501-09-03\" #> [6] NA           #>  #> [[10]]$b #> [1] \"911-02-21 01:46:29 UTC\"  \"209-12-19 08:36:55 UTC\"  #> [3] NA                        \"1786-03-05 22:28:41 UTC\" #> [5] NA                        \"2570-12-13 19:50:10 UTC\" #>  #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Any tibble generator — any_tibble","title":"Any tibble generator — any_tibble","text":"Generate tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any tibble generator — any_tibble","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble(rows = 3L, cols = 3L) %>% show_example() #> # A tibble: 3 × 3 #>   ...1      ...2     ...3 #>   <chr>     <chr>   <int> #> 1 }         8        2258 #> 2 _k(hi#_~{ h;;9cUf  9049 #> 3 k         8$r$A    8486"},{"path":"/reference/any_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Any undefined value generator — any_undefined","title":"Any undefined value generator — any_undefined","text":"Generate undefined values. case undefined values include NA, NA_integer_, NA_real_, NA_character_, NA_complex_, NULL, -Inf, Inf, NaN. Values generated always scalars.","code":""},{"path":"/reference/any_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any undefined value generator — any_undefined","text":"","code":"any_undefined()"},{"path":"/reference/any_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any undefined value generator — any_undefined","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any undefined value generator — any_undefined","text":"","code":"any_undefined() %>% show_example() #> [1] NA"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Any vector generator — any_vector","title":"Any vector generator — any_vector","text":"Generate atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any vector generator — any_vector","text":"","code":"any_vector(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any vector generator — any_vector","text":"quickcheck_generator object.","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any vector generator — any_vector","text":"","code":"any_vector() %>% show_example() #> [[1]] #> [1] (\\\\>|fBX&s #> Levels: (\\\\>|fBX&s #>  #> [[2]] #> [1] ;% #> Levels: ;% #>  #> [[3]] #> [1] 1WhQMP #> Levels: 1WhQMP #>  #> [[4]] #> [1] t #> Levels: t #>  #> [[5]] #> [1] [` #> Levels: [` #>  #> [[6]] #> [1] -w= #> Levels: -w= #>  #> [[7]] #> [1] *;] #> Levels: *;] #>  #> [[8]] #> [1] W\"In&wC?v #> Levels: W\"In&wC?v #>  #> [[9]] #> [1] 'X #> Levels: 'X #>  #> [[10]] #> [1] <^@!_ #> Levels: <^@!_ #>  any_vector(len = 10L, any_na = TRUE) %>% show_example() #>  [1]   826  4893  9129     0    NA -5020    NA  1064    NA    NA"},{"path":"/reference/anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Any R object generator — anything","title":"Any R object generator — anything","text":"Generate R object. actually generate possible object, just common ones, namely atomic vectors, lists, data.frames, tibbles, data.tables, undefined values like NA, NULL, Inf, NaN.","code":""},{"path":"/reference/anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any R object generator — anything","text":"","code":"anything(any_empty = TRUE, any_undefined = TRUE)"},{"path":"/reference/anything.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any R object generator — anything","text":"any_empty Whether empty vectors data frames allowed. any_undefined Whether undefined values allowed.","code":""},{"path":"/reference/anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any R object generator — anything","text":"quickcheck_generator object.","code":""},{"path":"/reference/anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any R object generator — anything","text":"","code":"anything() %>% show_example() #> [1] \"HHn,t_\" \"_6O6\"   \"6\"      NA       NA       NA       \"\\\\W9W\""},{"path":"/reference/as_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"Convert quickcheck generator hedgehog generator","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"as_hedgehog(generator)"},{"path":"/reference/as_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"generator quickcheck_generator object.","code":""},{"path":"/reference/as_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"quickcheck_generator object.","code":""},{"path":"/reference/as_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a quickcheck generator to a hedgehog generator — as_hedgehog","text":"","code":"is_even <-   function(a) a %% 2L == 0L gen_powers_of_two <-   integer_bounded(1L, 10L, len = 1L) %>%     as_hedgehog() %>%     hedgehog::gen.with(function(a) 2 ^ a) for_all(   a = from_hedgehog(gen_powers_of_two),   property = function(a) is_even(a) %>% testthat::expect_true() )"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_letters(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_numbers(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)  character_alphanumeric(len = c(1L, 10L), any_na = FALSE, any_empty = FALSE)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_empty Whether empty character values allowed.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"quickcheck_generator object.","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() %>% show_example() #> [1] \"!LW;$s\" \"E6Al\"   character_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] NA      \"u0&TY\" NA      \"SPX\"   \"!qE\"   \"[\"     \"|H]r\"  NA      NA      #> [10] \"1\"     character_(len = 10L, any_empty = TRUE) %>% show_example() #>  [1] \" m\"         \"0~#Xbrf]\"   \"T\"          \"|2T\\\"H (5?\" \"|\"          #>  [6] \"#;6_\"       \"rC77r\"      \"ud\"         \"\"           \"18'<\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"quickcheck_generator object.","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) %>% show_example() #> NULL"},{"path":"/reference/data.table_.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generators — data.table_","title":"data.table generators — data.table_","text":"Construct data.table generators similar way data.table::data.table.","code":""},{"path":"/reference/data.table_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generators — data.table_","text":"","code":"data.table_(..., rows = c(1L, 10L))"},{"path":"/reference/data.table_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generators — data.table_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data.table_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generators — data.table_","text":"quickcheck_generator object.","code":""},{"path":"/reference/data.table_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generators — data.table_","text":"","code":"data.table_(a = integer_()) %>% show_example() #>        a #> 1:  4732 #> 2:  3728 #> 3: -5740 #> 4:  5008 #> 5: -7231 #> 6:  1840 #> 7: -2285 #> 8: -5666 #> 9:  6316 data.table_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #>        a        b #> 1: -3730       s[ #> 2:  9414 WFpJrL_X #> 3: -2185        _ #> 4: -7362  M\": <.i #> 5:  5357 B8-bqL.L"},{"path":"/reference/data.table_of.html","id":null,"dir":"Reference","previous_headings":"","what":"data.table generator with randomized columns — data.table_of","title":"data.table generator with randomized columns — data.table_of","text":"data.table generator randomized columns","code":""},{"path":"/reference/data.table_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data.table generator with randomized columns — data.table_of","text":"","code":"data.table_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data.table_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data.table generator with randomized columns — data.table_of","text":"... set unnamed generators. generated data.tables built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data.table_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data.table generator with randomized columns — data.table_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/data.table_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data.table generator with randomized columns — data.table_of","text":"","code":"data.table_of(logical_(), date_()) %>% show_example() #>          ...1       ...2  ...3  ...4  ...5       ...6       ...7       ...8 #> 1: 1321-09-15 1348-03-29  TRUE  TRUE  TRUE 2435-04-07 2075-06-27 1763-05-17 #> 2: 1577-05-10 1808-01-13  TRUE FALSE FALSE 1479-04-12 1787-08-03 1374-08-10 #> 3: 1076-08-17 2244-03-13  TRUE FALSE FALSE 2800-12-30 2930-04-24 1092-06-12 #> 4: 2809-12-31 1463-09-22  TRUE  TRUE  TRUE 1056-08-21 2449-03-25 2435-05-09 #> 5: 2101-11-14 2474-07-16 FALSE  TRUE FALSE 1926-10-29 2030-12-11 2972-11-16 data.table_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #>      ...1                ...2       ...3            ...4      ...5 #>  1: -3481  891-03-26 03:32:41  439787389 23:31:19.010951       XTc #>  2:  7164 2581-10-24 14:45:01 -663899137 04:46:46.455316 'RNI,vzhg #>  3: -8010 2920-02-18 00:29:09          0 21:29:19.684432     )`3[, #>  4: -8632 2994-04-18 17:34:02 -679672316 10:41:34.812118    sYRzVE #>  5:     0 2624-01-23 16:39:38  265832045 22:08:37.910751   cvfQwbB #>  6:     0  324-05-19 15:06:02  960727292 11:21:30.219761         Q #>  7:     0  352-04-02 10:36:11 -637565127 04:31:06.530517 ]m|W,N9\\\\ #>  8:  3932 2134-11-03 07:16:13 -880358712 16:30:23.159711   R5ou<~, #>  9: -5970   68-10-26 09:52:00 -808915892 19:57:57.436241   `BVM|OJ #> 10:  2931  650-11-20 22:47:37  890672815 01:49:24.828240 R%=;P8`]q"},{"path":"/reference/data_frame_.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generators — data_frame_","title":"Data frame generators — data_frame_","text":"Construct data frame generators similar way base::data.frame.","code":""},{"path":"/reference/data_frame_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(..., rows = c(1L, 10L))"},{"path":"/reference/data_frame_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generators — data_frame_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/data_frame_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generators — data_frame_","text":"quickcheck_generator object.","code":""},{"path":"/reference/data_frame_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generators — data_frame_","text":"","code":"data_frame_(a = integer_()) %>% show_example() #>        a #> 1   1943 #> 2   5697 #> 3   3277 #> 4  -9662 #> 5  -2913 #> 6  -3936 #> 7   1909 #> 8   3932 #> 9   9860 #> 10 -9910 data_frame_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #>       a         b #> 1 -6116 6-yG3V3JV #> 2  4487         G #> 3  4345   w_bLx1@ #> 4   222     TSk4\" #> 5  6436  s#rHr]&+"},{"path":"/reference/data_frame_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generator with randomized columns — data_frame_of","title":"Data frame generator with randomized columns — data_frame_of","text":"Data frame generator randomized columns","code":""},{"path":"/reference/data_frame_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generator with randomized columns — data_frame_of","text":"","code":"data_frame_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data_frame_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generator with randomized columns — data_frame_of","text":"... set unnamed generators. generated data frames built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/data_frame_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generator with randomized columns — data_frame_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/data_frame_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generator with randomized columns — data_frame_of","text":"","code":"data_frame_of(logical_(), date_()) %>% show_example() #>         ...1       ...2 #> 1 1363-01-29 1660-05-31 #> 2 1749-04-20 1133-05-19 #> 3 2415-12-16 2616-02-22 #> 4 2352-07-13 1140-01-12 #> 5 2145-10-01 2761-09-04 #> 6 2353-08-04 1502-05-24 #> 7 2518-02-13 1847-08-27 data_frame_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #>          ...1                ...2                ...3       ...4 #> 1  2028-11-17 1514-07-02 19:29:49  842-05-28 12:08:40 1742-07-24 #> 2  2877-07-02 1430-01-25 10:27:30 1724-09-16 15:07:44 2233-12-13 #> 3  1971-08-03  540-01-04 12:32:07  566-11-10 03:34:15 1959-08-01 #> 4  2750-01-21 1654-06-19 10:19:12 1764-03-10 01:54:11 2258-09-20 #> 5  2999-10-15  295-02-20 20:07:36  743-10-12 07:34:42 2884-11-17 #> 6  1280-02-20 1909-07-13 05:00:52 2255-11-06 21:40:55 2797-06-20 #> 7  2972-10-06 1699-06-28 20:42:45 2756-01-16 05:13:36 2580-06-29 #> 8  2724-07-03 1946-01-28 07:05:39 1294-01-20 07:00:31 1163-05-26 #> 9  2826-08-01  184-03-02 07:42:05 2288-06-14 21:48:48 2578-07-19 #> 10 2938-01-01 2039-03-28 16:36:53 1892-02-15 19:51:23 1069-02-17 #>                   ...5 #> 1   720-07-19 21:13:28 #> 2  1548-04-19 00:25:15 #> 3  1468-04-27 20:07:53 #> 4   872-12-21 06:03:29 #> 5  1117-03-18 16:48:47 #> 6   373-08-22 19:00:42 #> 7  2413-05-04 09:10:15 #> 8  1060-10-18 00:52:38 #> 9  2077-01-15 04:18:26 #> 10  887-02-14 23:47:26"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = c(1L, 10L), any_na = FALSE)  date_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  date_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  date_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"quickcheck_generator object.","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() %>% show_example() #> [1] \"2000-07-23\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) %>% show_example() #> [1] \"2020-01-08\" \"2020-01-07\" \"2020-01-01\" \"2020-01-01\" \"2020-01-02\" #> [6] \"2020-01-01\" \"2020-01-05\" \"2020-01-06\" \"2020-01-05\" date_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] \"2660-01-16\" \"1167-01-10\" NA           \"2769-10-27\" NA           #>  [6] \"2277-09-15\" \"2277-02-21\" \"1809-11-13\" NA           \"2900-02-10\""},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_bounded(   left,   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE )  double_left_bounded(   left,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_right_bounded(   right,   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_positive(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_negative(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_fractional(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )  double_whole(   len = c(1L, 10L),   any_na = FALSE,   any_nan = FALSE,   any_inf = FALSE,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. any_nan Whether NaN values allowed. any_inf Whether Inf/-Inf values allowed. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"quickcheck_generator object.","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() %>% show_example() #>  [1]  242699475 -923926149  158647469  845621197 -765544861 -680677057 #>  [7] -513701128  598809072          0  628924214 double_(big_dbl = TRUE) %>% show_example() #> [1] -1.446765e+307   0.000000e+00 -8.406980e+307 double_bounded(left = -5, right = 5) %>% show_example() #> [1] -1.846302 double_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] -757326987  961766812  317730902 -674330711         NA  221429804 #>  [7]         NA -415868066  -42224316         NA double_(len = 10L, any_nan = TRUE, any_inf = TRUE) %>% show_example() #>  [1]        NaN          0  202780368        NaN        Inf       -Inf #>  [7] -432136406          0        Inf -774746992"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal length vector generator — equal_length","title":"Equal length vector generator — equal_length","text":"Generates equal length vectors contained list.","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(..., len = c(1L, 10L))"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal length vector generator — equal_length","text":"... set named unnamed vector generators. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal length vector generator — equal_length","text":"quickcheck_generator object.","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal length vector generator — equal_length","text":"","code":"equal_length(integer_(), double_()) %>% show_example() #> [[1]] #> [1]  1645 -1858  8322  9402  6517   998  2435  4298   567 #>  #> [[2]] #> [1] -240770622 -496768645 -575437544  739507218  378414142  636009747 -749127165 #> [8]   97491222          0 #>  equal_length(a = logical_(), b = character_(), len = 5L) %>% show_example() #> $a #> [1]  TRUE  TRUE  TRUE FALSE FALSE #>  #> $b #> [1] \"n91B\"      \"EE\"        \"Z+`$(Dc-E\" \"':Eoskqj\"  \"4n&H\"      #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"quickcheck_generator object.","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() %>% show_example() #> [1] 9y       i        %        L0,iq{)p #> Levels: 9y i % L0,iq{)p factor_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  1  1 NA  1  1  1  1  1  1  1"},{"path":"/reference/flat_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length flat list generator — flat_list_of","title":"Variable length flat list generator — flat_list_of","text":"Generate flat lists values coming single generator. flat list items scalars.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(generator, len = c(1L, 10L))"},{"path":"/reference/flat_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length flat list generator — flat_list_of","text":"generator quickcheck_generator object. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/flat_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length flat list generator — flat_list_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/flat_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length flat list generator — flat_list_of","text":"","code":"flat_list_of(integer_(), len = 10L) %>% show_example() #> [[1]] #> [1] 1624 #>  #> [[2]] #> [1] -7425 #>  #> [[3]] #> [1] -2154 #>  #> [[4]] #> [1] -3167 #>  #> [[5]] #> [1] -7056 #>  #> [[6]] #> [1] 2191 #>  #> [[7]] #> [1] 8073 #>  #> [[8]] #> [1] -1935 #>  #> [[9]] #> [1] 5767 #>  #> [[10]] #> [1] -2127 #>"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = getOption(\"quickcheck.tests\", 100L),   shrinks = getOption(\"quickcheck.shrinks\", 100L),   discards = getOption(\"quickcheck.discards\", 100L) )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Named generators property function takes values generator calls expectation . function must parameters matching generator names. tests number tests run. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test properties of a function — for_all","text":"testthat expectation object.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"for_all(   a = numeric_(len = 1L),   b = numeric_(len = 1L),   property = function(a, b) testthat::expect_equal(a + b, b + a) )"},{"path":"/reference/from_hedgehog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"Convert hedgehog generator quickcheck generator","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"from_hedgehog(generator)"},{"path":"/reference/from_hedgehog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"generator hedgehog.internal.gen object.","code":""},{"path":"/reference/from_hedgehog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"quickcheck_generator object.","code":""},{"path":"/reference/from_hedgehog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a hedgehog generator to a quickcheck generator — from_hedgehog","text":"","code":"is_even <-   function(a) a %% 2L == 0L  gen_powers_of_two <-   hedgehog::gen.element(1:10) %>% hedgehog::gen.with(function(a) 2 ^ a)  for_all(   a = from_hedgehog(gen_powers_of_two),   property = function(a) is_even(a) %>% testthat::expect_true() )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = c(1L, 10L), any_na = FALSE)  hms_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  hms_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  hms_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"quickcheck_generator object.","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() %>% show_example() #> 20:33:44.865600 #> 22:40:36.884328 #> 20:08:03.377701 #> 18:54:23.316725 #> 20:34:29.146964 #> 02:25:18.411287 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) %>% show_example() #> 06:35:33.682130 #> 06:35:46.514438 #> 05:48:55.124115 #> 05:15:20.030650 #> 04:00:36.004468 #> 11:32:03.368408 hms_(len = 10L, any_na = TRUE) %>% show_example() #> 07:23:54.533538 #> 08:44:12.971568 #>              NA #> 23:18:08.261829 #> 18:07:39.716967 #> 00:01:10.566714 #> 16:13:23.512288 #>              NA #> 12:11:14.736259 #> 13:14:03.085983"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  integer_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_positive(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)  integer_negative(len = c(1L, 10L), any_na = FALSE, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"quickcheck_generator object.","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() %>% show_example() #> [1]  5965     0     0 -8677  -100 integer_(big_int = TRUE) %>% show_example() #> [1]           0 -1870186168   916426786 -1270220709           0   558904365 #> [7]  -856965057  2056073129 integer_bounded(left = -5L, right = 5L) %>% show_example() #> [1] -2 -3 -4 -4 integer_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]     0 -2661    NA    NA  3858 -1329    NA  5257 -5335     0"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"Generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... set named unnamed generators.","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"quickcheck_generator object.","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) %>% show_example() #> [[1]] #> [1] -9237     0 -1741  7295 -6249  9643  4723 #>  #> [[2]] #> [1]  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE #>  list_(a = any_vector(), b = any_vector()) %>% show_example() #> $a #> $a[[1]] #> [1] -3582 -4241  5509 #>  #> $a[[2]] #> [1] \"*S^'u\"     \"fU\"        \";8[HDD$Ol\" \"0(\"        #>  #> $a[[3]] #> [1] t #> Levels: t #>  #> $a[[4]] #> [1] \"1145-01-25 07:45:07 UTC\" \"1909-01-17 18:41:28 UTC\" #> [3] \"1538-11-30 11:33:03 UTC\" \"86-10-11 07:05:30 UTC\"   #> [5] \"2104-01-30 02:57:08 UTC\" #>  #> $a[[5]] #> [1] 4\"*s      1       s)dH9$?  _%BkC04  %J@?h    nv<,*|O  %h3rJFc7 THk_     #> Levels: 4\"*s  1 s)dH9$? _%BkC04 %J@?h nv<,*|O %h3rJFc7 THk_ #>  #> $a[[6]] #> [1] -4022     0  9988 -9519 -6487  1501  2638 #>  #>  #> $b #> [1] \"z31(59\" \"7S939\"  \"Y#X[)H\" \"xu^dY\"  \"3cG.\"   \"giBi2-\" \"8`kE\"   \"z\"      #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"Generate lists values coming single generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = c(1L, 10L))"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator quickcheck_generator object. len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L).","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) %>% show_example() #> [[1]] #> [1] -4581  8082     0 #>  #> [[2]] #> [1]  7592 -9583 #>  #> [[3]] #> [1]     0 -5918  8316 #>  #> [[4]] #> [1]  122 7031 #>  #> [[5]] #> [1] -9365 -5831 #>  #> [[6]] #> [1] -7169  1309  -170 #>  #> [[7]] #> [1] -7091 -8408  2284 -2815 -9054 -3209 #>  #> [[8]] #> [1] -2912 #>  #> [[9]] #> [1] -2397 #>  #> [[10]] #> [1]  6923   426 -9089 -4479  7272  9192  -726   923 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generator — logical_","title":"Logical generator — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generator — logical_","text":"","code":"logical_(len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generator — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generator — logical_","text":"quickcheck_generator object.","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generator — logical_","text":"","code":"logical_() %>% show_example() #> [1] FALSE  TRUE  TRUE logical_(len = 10L, any_na = TRUE) %>% show_example() #>  [1]  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE    NA FALSE    NA"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  numeric_left_bounded(left, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_right_bounded(right, len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_positive(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)  numeric_negative(len = c(1L, 10L), any_na = FALSE, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"quickcheck_generator object.","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() %>% show_example() #> [1]     0 -1476 -6003 -5707   148  9626 numeric_(big_num = TRUE) %>% show_example() #> [1] -1.341159e+307  1.361304e+307  5.123743e+307 -1.930213e+307  3.022619e+307 #> [6]  6.887926e+307 -7.359249e+307   0.000000e+00 -5.997545e+307 numeric_bounded(left = -5L, right = 5L) %>% show_example() #> [1] -1  0  4  1  0 -5  1  0 numeric_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] -350043014  383034205  -37129997  647737566 -282574932  366605205 #>  [7]  651371210 -957203926  -62575866 -977703559"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... set unnamed generators. prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) %>% show_example() #> [1]  -370 -3772  4179 -4998  6959 -1513 -1214  3786 -7744 one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) %>% show_example() #> [1] FALSE FALSE  TRUE FALSE  TRUE FALSE"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = c(1L, 10L), any_na = FALSE)  posixct_bounded(left, right, len = c(1L, 10L), any_na = FALSE)  posixct_left_bounded(left, len = c(1L, 10L), any_na = FALSE)  posixct_right_bounded(right, len = c(1L, 10L), any_na = FALSE)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. produce empty vectors set len = 0L range like len = c(0L, 10L). any_na Whether NA values allowed. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"quickcheck_generator object.","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() %>% show_example() #> [1] \"2554-08-17 09:31:38 UTC\" \"889-06-08 11:17:14 UTC\"  #> [3] \"1030-09-04 21:34:14 UTC\" \"841-10-05 08:11:34 UTC\"  #> [5] \"1072-11-10 06:18:49 UTC\" \"2461-01-06 12:23:00 UTC\" #> [7] \"1400-05-19 08:32:58 UTC\" \"2993-07-22 13:04:10 UTC\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) %>% show_example() #> [1] \"2020-06-23 05:27:20 UTC\" \"2020-01-27 07:40:56 UTC\" #> [3] \"2020-08-09 17:43:06 UTC\" \"2020-12-23 02:04:58 UTC\" #> [5] \"2020-11-12 20:58:05 UTC\" \"2020-11-14 07:22:28 UTC\" posixct_(len = 10L, any_na = TRUE) %>% show_example() #>  [1] \"937-08-25 00:01:52 UTC\"  \"2474-04-12 08:55:35 UTC\" #>  [3] NA                        \"1810-11-11 15:10:27 UTC\" #>  [5] \"1328-07-05 06:18:37 UTC\" \"978-04-22 03:22:13 UTC\"  #>  [7] \"915-10-22 05:33:20 UTC\"  \"2445-09-03 15:09:01 UTC\" #>  [9] NA                        \"79-06-17 18:23:44 UTC\""},{"path":"/reference/repeat_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly test properties of a function — repeat_test","title":"Repeatedly test properties of a function — repeat_test","text":"Repeatedly test properties function","code":""},{"path":"/reference/repeat_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(property, tests = getOption(\"quickcheck.tests\", 100L))"},{"path":"/reference/repeat_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly test properties of a function — repeat_test","text":"property function parameters includes expectation. tests number tests run.","code":""},{"path":"/reference/repeat_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly test properties of a function — repeat_test","text":"testthat expectation object.","code":""},{"path":"/reference/repeat_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly test properties of a function — repeat_test","text":"","code":"repeat_test(   property = function() {     num <- stats::runif(1, min = 0, max = 10)     testthat::expect_true(num >= 0 && num <= 10)   } )"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator quickcheck_generator object.","code":""},{"path":"/reference/show_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an example output of a generator — show_example","text":"example output produced generator.","code":""},{"path":"/reference/show_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an example output of a generator — show_example","text":"","code":"logical_() %>% show_example() #> [1] FALSE"},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generators — tibble_","title":"Tibble generators — tibble_","text":"Construct tibble generators similar way tibble::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generators — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generators — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L).","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generators — tibble_","text":"quickcheck_generator object.","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generators — tibble_","text":"","code":"tibble_(a = integer_()) %>% show_example() #> # A tibble: 5 × 1 #>       a #>   <int> #> 1 -1715 #> 2     0 #> 3     0 #> 4 -2441 #> 5 -9633 tibble_(a = integer_(), b = character_(), rows = 5L) %>% show_example() #> # A tibble: 5 × 2 #>       a b      #>   <int> <chr>  #> 1     0 -!})   #> 2 -2239 (?bGM0 #> 3 -9944 3      #> 4  7772 y      #> 5 -2629 5"},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles built random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. produce empty tibbles set rows = 0L range like rows = c(0L, 10L). cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. produce empty tibbles set cols = 0L range like cols = c(0L, 10L).","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"quickcheck_generator object.","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) %>% show_example() #> # A tibble: 6 × 6 #>   ...1       ...2       ...3       ...4       ...5       ...6  #>   <date>     <date>     <date>     <date>     <date>     <lgl> #> 1 1194-02-11 2165-08-17 2149-04-08 2043-05-13 1515-06-16 TRUE  #> 2 1047-12-15 2184-03-14 1850-03-16 2387-08-03 1270-02-01 TRUE  #> 3 1203-02-11 1176-01-23 2808-03-02 1842-03-16 2538-04-23 TRUE  #> 4 2690-09-10 1333-12-11 1525-11-18 1261-07-26 1974-09-06 TRUE  #> 5 2446-03-07 1739-03-25 2186-03-01 2348-07-26 1208-08-22 TRUE  #> 6 1242-08-10 1638-08-05 1348-06-18 2889-10-20 1439-09-27 FALSE tibble_of(any_atomic(), rows = 10L, cols = 5L) %>% show_example() #> # A tibble: 10 × 5 #>     ...1 ...2                       ...3 ...4       ...5            #>    <int> <dttm>                    <dbl> <date>     <time>          #>  1  4707 1871-09-04 14:10:57  134905343. 2998-05-05 23:42:58.571721 #>  2  8874 1024-03-07 07:58:15 -866258558. 2718-12-06 19:38:47.659748 #>  3 -4723 1412-01-31 01:33:12  188856387. 2263-02-13 11:21:42.329613 #>  4     0 2789-02-26 16:46:29  559478704. 2267-03-12 18:14:49.681917 #>  5 -1167 2765-08-23 09:41:21 -838556133. 2468-03-04 21:02:16.343166 #>  6   937 2066-05-05 23:35:24 -565190175. 1003-10-24 16:57:37.546876 #>  7 -1123 2988-08-23 15:14:57 -591496760. 2098-09-27 09:27:08.235820 #>  8 -7382 839-11-21 07:32:19  -713956234. 1846-11-26 12:24:22.160412 #>  9 -4698 846-01-30 06:15:18  -146204513. 1449-02-15 23:08:49.083465 #> 10  5699 1591-05-18 05:44:40  734824020. 1654-08-10 05:46:04.487855"},{"path":"/news/index.html","id":"quickcheck-012","dir":"Changelog","previous_headings":"","what":"quickcheck 0.1.2","title":"quickcheck 0.1.2","text":"CRAN release: 2022-03-17","code":""},{"path":"/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"quickcheck 0.1.2","text":"Fixed bug date generator any_na = TRUE","code":""},{"path":"/news/index.html","id":"quickcheck-011","dir":"Changelog","previous_headings":"","what":"quickcheck 0.1.1","title":"quickcheck 0.1.1","text":"CRAN release: 2022-03-11","code":""},{"path":"/news/index.html","id":"internal-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"quickcheck 0.1.1","text":"Now doesn’t require R >= 4.1","code":""},{"path":"/news/index.html","id":"quickcheck-010","dir":"Changelog","previous_headings":"","what":"quickcheck 0.1.0","title":"quickcheck 0.1.0","text":"CRAN release: 2022-02-10","code":""},{"path":"/news/index.html","id":"major-breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Major breaking changes","title":"quickcheck 0.1.0","text":"default length vector generators changed 1 range 1 10. parameters form frac_ replaced any_, take logical value instead double value.","code":""},{"path":"/news/index.html","id":"features-0-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"quickcheck 0.1.0","text":"New character_letters generates character vectors letters. New character_numbers generates character vectors numbers. New character_alphanumeric generates character vectors letters numbers. New flat_list_of generates lists atomic scalars. New data_frame_ generate data.frames. New data_frame_of generate data.frames. New data.table_ generate data.tables. New data.table_of generate data.tables. New anything generates R object. New any_flat_homogeneous_list generates flat lists homogeneous elements. New any_data_frame generates data.frames. New any_data.table generates data.tables. New any_undefined generates undefined values. New equal_length generates equal length vectors. New from_hedgehog converts hedgehog quickcheck generator. New as_hedgehog converts quickcheck hedgehog generator. New repeat_test tests property repeatedly.","code":""},{"path":"/news/index.html","id":"quickcheck-001","dir":"Changelog","previous_headings":"","what":"quickcheck 0.0.1","title":"quickcheck 0.0.1","text":"CRAN release: 2022-01-12 Initial version","code":""}]
