[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 quickcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2021). quickcheck: Property Based Testing. R package version 0.0.0.9000, https://github.com/armcn/quickcheck.","code":"@Manual{,   title = {quickcheck: Property Based Testing},   author = {Andrew McNeil},   year = {2021},   note = {R package version 0.0.0.9000},   url = {https://github.com/armcn/quickcheck}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Property Based Testing","text":"Property based testing R, inspired Quickcheck. package builds property based testing framework provided hedgehog designed seamlessly integrate testthat.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Property Based Testing","text":"can install development version quickcheck GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"armcn/quickcheck\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Property Based Testing","text":"following example uses quickcheck test properties base R + function. introduction concept property based testing, explanation mathematical properties addition can found . test properties distinct function dplyr package.","code":"library(testthat) library(quickcheck)  test_that(\"0 is the additive identity of +\", {   for_all(     a = numeric_(),     property = \\(a) expect_equal(a, a + 0)   )           })  test_that(\"+ is commutative\", {   for_all(     a = numeric_(),     b = numeric_(),     property = \\(a, b) expect_equal(a + b, b + a)   )           })  test_that(\"+ is associative\", {   for_all(     a = numeric_(),     b = numeric_(),     c = numeric_(),     property = \\(a, b, c) expect_equal(a + (b + c), (a + b) + c)   )           }) library(dplyr)  test_that(\"distinct does nothing with a single row\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       distinct(a) |> expect_equal(a)     }   ) })  test_that(\"distinct returns single row if rows are repeated\", {   for_all(     a = any_tibble(rows = 1L),     property = \\(a) {       bind_rows(a, a) |> distinct() |> expect_equal(a)     }   ) })  test_that(\"distinct does nothing if rows are unique\", {   for_all(     a = tibble_of(integer_positive(), rows = 1L, cols = 1L),     b = tibble_of(integer_negative(), rows = 1L, cols = 1L),     property = \\(a, b) {       unique_rows <- bind_rows(a, b)       distinct(unique_rows) |> expect_equal(unique_rows)     }   ) })"},{"path":"/reference/any_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic vector generator — any_atomic","title":"Atomic vector generator — any_atomic","text":"Generate vectors integer, double, character, logical.","code":""},{"path":"/reference/any_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic(len = 1L, frac_na = 0)"},{"path":"/reference/any_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic vector generator — any_atomic","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic vector generator — any_atomic","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic vector generator — any_atomic","text":"","code":"any_atomic() |> show_example() #> [1] ,jR/; #> Levels: ,jR/; any_atomic(len = 10L, frac_na = 0.5) |> show_example() #> [1] NA"},{"path":"/reference/any_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Any data frame generator — any_data_frame","title":"Any data frame generator — any_data_frame","text":"Generate random data frames.","code":""},{"path":"/reference/any_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any data frame generator — any_data_frame","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any data frame generator — any_data_frame","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any data frame generator — any_data_frame","text":"","code":"any_data_frame() |> show_example() #>    ...1 ...2   ...3       ...4 #> 1 FALSE    J ,LGlQO -911665761 #> 2 FALSE    J ,LGlQO -911665761 #> 3 FALSE    J ,LGlQO -911665761 #> 4 FALSE    J ,LGlQO -911665761 any_data_frame(rows = 10L) |> show_example() #>    ...1                                                             ...2 #> 1    Ft TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE #> 2    Ft TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE #> 3    Ft TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE #> 4    Ft TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE #> 5    Ft TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE #> 6    Ft TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE #> 7    Ft TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE #> 8    Ft TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE #> 9    Ft TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE #> 10   Ft TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE any_data_frame(cols = 5L, frac_na = 0.5) |> show_example() #>                                           ...1 ...2 #> 1 -53686401733, 0, NA, NA, 0, 1, NA, NA, NA, 1   NA #> 2 -53686401733, 0, NA, NA, 0, 1, NA, NA, NA, 1   NA #>                                                                       ...3 #> 1 4, 5, 3, 1, 6, 2, NA, NA, NA, -49778518791, NA, -45092944183, 1868088245 #> 2 4, 5, 3, 1, 6, 2, NA, NA, NA, -49778518791, NA, -45092944183, 1868088245 #>     ...4 ...5 #> 1 NA, NA TRUE #> 2 NA, NA TRUE"},{"path":"/reference/any_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flat list generator — any_flat_list","title":"Flat list generator — any_flat_list","text":"Generate lists item length 1.","code":""},{"path":"/reference/any_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list(len = 1L, frac_na = 0)"},{"path":"/reference/any_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flat list generator — any_flat_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flat list generator — any_flat_list","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flat list generator — any_flat_list","text":"","code":"any_flat_list() |> show_example() #> [[1]] #> [1] 180668910 #>  any_flat_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] -2598 #>  #> [[3]] #> [1] NA #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] \"rRe\" #>  #> [[8]] #> [1] \"2291-10-19\" #>  #> [[9]] #> 08:54:06.936004 #>  #> [[10]] #> [1] NA #>"},{"path":"/reference/any_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Random list generator — any_list","title":"Random list generator — any_list","text":"Generate random lists containing lists atomic vectors variable lengths.","code":""},{"path":"/reference/any_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random list generator — any_list","text":"","code":"any_list(len = 1L, frac_na = 0)"},{"path":"/reference/any_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random list generator — any_list","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random list generator — any_list","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random list generator — any_list","text":"","code":"any_list() |> show_example() #> [[1]] #> [[1]]$a #> [1] \"2296-05-11 15:13:37 PDT\" \"2089-01-21 00:04:07 PST\" #> [3] \"0306-07-20 15:48:13 LMT\" \"1186-03-07 00:19:37 LMT\" #> [5] \"2514-04-12 23:58:38 PDT\" \"2113-03-22 03:36:33 PDT\" #> [7] \"1849-01-05 15:13:07 LMT\" \"0214-05-04 11:01:43 LMT\" #> [9] \"0047-01-15 05:09:03 LMT\" #>  #> [[1]]$b #> [1]  967595162          0 -138881875 -530369323  232747245  939339859 -131811779 #> [8] -100355282 #>  #>  any_list(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [[1]]$a #> [1]   NA   NA   NA   NA   NA   NA TRUE   NA #>  #> [[1]]$b #> [1]      NA -211454      NA #>  #>  #> [[2]] #> [[2]]$a #> [1] NA #>  #> [[2]]$b #> [1] \"1292-08-10\" NA           \"2189-03-23\" \"2890-02-19\" \"1001-02-26\" #>  #>  #> [[3]] #> [[3]]$a #> [1] NA #>  #> [[3]]$b #>  [1]         NA 80374.2345         NA         NA         NA         NA #>  [7]  3689.2691 38205.8302   329.3258 72835.7732 #>  #>  #> [[4]] #> [[4]]$a #> [1] -443733870  -31054268 #>  #> [[4]]$b #> [1]           NA           NA   7748865001           NA -54603826792 #> [6]           NA  10955302396           NA #>  #>  #> [[5]] #> [[5]]$a #> [1]  2257 -3223    NA  9337  6418 #>  #> [[5]]$b #> [1] FALSE    NA FALSE    NA #>  #>  #> [[6]] #> [[6]]$a #> [1] NA NA #>  #> [[6]]$b #> [1]       NA 13642.96       NA       NA 77522.59 82827.93 54686.87       NA #>  #>  #> [[7]] #> [[7]]$a #> [1] NA #>  #> [[7]]$b #> [1] \"2740-06-10 18:38:21 PDT\" NA                        #> [3] NA                        \"0107-11-18 23:32:54 LMT\" #> [5] \"2862-10-02 16:37:31 PDT\" \"1761-11-23 20:12:17 LMT\" #> [7] \"1678-08-19 00:51:09 LMT\" NA                        #>  #>  #> [[8]] #> [[8]]$a #> [1] NA #>  #> [[8]]$b #> [1]         NA -584330843         NA         NA  853080153 -738345373 #>  #>  #> [[9]] #> [[9]]$a #> [1] 62;     +PA3Q>5 !C#52v  e       7       PX@#~my -$Fs    VHA6\"+  #> Levels: !C#52v +PA3Q>5 -$Fs 62; 7 PX@#~my VHA6\"+ e #>  #> [[9]]$b #> [1] \"2350-07-26\" NA           NA           #>  #>  #> [[10]] #> [[10]]$a #> [1] NA #>  #> [[10]]$b #> [1] NA NA NA #>  #>"},{"path":"/reference/any_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Any tibble generator — any_tibble","title":"Any tibble generator — any_tibble","text":"Generate random tibbles.","code":""},{"path":"/reference/any_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble(rows = c(1L, 10L), cols = c(1L, 10L), frac_na = 0)"},{"path":"/reference/any_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any tibble generator — any_tibble","text":"rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any tibble generator — any_tibble","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any tibble generator — any_tibble","text":"","code":"any_tibble() |> show_example() #> # A tibble: 2 x 1 #>   ...1  #>   <fct> #> 1 A<^y  #> 2 A<^y  any_tibble(rows = 10L) |> show_example() #> # A tibble: 10 x 3 #>     ...1 ...2             ...3   #>    <int> <list>           <chr>  #>  1  7465 <named list [2]> hXL$Hd #>  2  7465 <named list [2]> hXL$Hd #>  3  7465 <named list [2]> hXL$Hd #>  4  7465 <named list [2]> hXL$Hd #>  5  7465 <named list [2]> hXL$Hd #>  6  7465 <named list [2]> hXL$Hd #>  7  7465 <named list [2]> hXL$Hd #>  8  7465 <named list [2]> hXL$Hd #>  9  7465 <named list [2]> hXL$Hd #> 10  7465 <named list [2]> hXL$Hd any_tibble(cols = 5L, frac_na = 0.5) |> show_example() #> # A tibble: 2 x 5 #>   ...1      ...2             ...3      ...4  ...5       #>   <chr>     <list>           <list>    <chr> <date>     #> 1 \"\\\"\\\\t(p\" <named list [2]> <int [1]> ~     2971-10-13 #> 2 \"\\\"\\\\t(p\" <named list [2]> <int [1]> ~     2971-10-13"},{"path":"/reference/any_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Any vector generator — any_vector","title":"Any vector generator — any_vector","text":"Generate random atomic vectors lists.","code":""},{"path":"/reference/any_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Any vector generator — any_vector","text":"","code":"any_vector(len = 1L, frac_na = 0)"},{"path":"/reference/any_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Any vector generator — any_vector","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/any_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Any vector generator — any_vector","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/any_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Any vector generator — any_vector","text":"","code":"any_vector() |> show_example() #> [[1]] #> 14:36:38.442527 #> 11:24:45.280577 #> 10:01:12.583588 #> 00:24:02.538847 #> 13:38:07.831854 #> 21:37:47.812950 #> 08:55:07.964438 #>  any_vector(len = 10L, frac_na = 0.5) |> show_example() #> [[1]] #> [1] NA #>  #> [[2]] #> [1] NA #>  #> [[3]] #> [1] \"1010-10-24\" #>  #> [[4]] #> [1] NA #>  #> [[5]] #> [1] NA #>  #> [[6]] #> [1] NA #>  #> [[7]] #> [1] NA #>  #> [[8]] #> [1] NA #>  #> [[9]] #> [1] 527344373 #>  #> [[10]] #> 18:36:21.084789 #>"},{"path":"/reference/character_.html","id":null,"dir":"Reference","previous_headings":"","what":"Character generators — character_","title":"Character generators — character_","text":"set generators character vectors.","code":""},{"path":"/reference/character_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character generators — character_","text":"","code":"character_(len = 1L, frac_na = 0, frac_empty = 0)"},{"path":"/reference/character_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character generators — character_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_empty approximate fraction empty character values included vector. fraction 0, default, include empty values. fraction 0.5 include around 50% empty values.","code":""},{"path":"/reference/character_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character generators — character_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/character_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Character generators — character_","text":"","code":"character_() |> show_example() #> [1] \"D?Q8G\" character_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"?}oJwWuM+\" NA          NA          \",Z&\"       NA          NA          #>  [7] \"<a\"        NA          NA          \"E',\"       character_(len = 10L, frac_empty = 0.5) |> show_example() #>  [1] \"hT&< Gy\"   \";r#SuoB\"   \"\"          \"*Ps:53RmU\" \"$1G\"       \"QDmlp\\\"X\"  #>  [7] \"\"          \"Fm6s/0\"    \"*_pOiV\"    \"\""},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the same value every time — constant","title":"Generate the same value every time — constant","text":"Generate value every time","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the same value every time — constant","text":"","code":"constant(a)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the same value every time — constant","text":"R object","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the same value every time — constant","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the same value every time — constant","text":"","code":"constant(NULL) |> show_example() #> NULL"},{"path":"/reference/data_frame_.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame generator — data_frame_","title":"Data frame generator — data_frame_","text":"Construct data frame generators similar way base::data.frame.","code":""},{"path":"/reference/data_frame_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame generator — data_frame_","text":"","code":"data_frame_(..., rows = c(1L, 10L))"},{"path":"/reference/data_frame_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame generator — data_frame_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10.","code":""},{"path":"/reference/data_frame_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame generator — data_frame_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/data_frame_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame generator — data_frame_","text":"","code":"data_frame_(a = integer_()) |> show_example() #>       a #> 1 -7848 #> 2  8438 #> 3 -5201 #> 4   631 data_frame_(a = integer_(), b = character_(), rows = 5L) |> show_example() #>       a        b #> 1     0 oci?1qJ] #> 2  9507       ?: #> 3  7360      'Q- #> 4  -908  g?q u|6 #> 5 -3081     Qk#!"},{"path":"/reference/data_frame_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data frame generator — data_frame_of","title":"Random data frame generator — data_frame_of","text":"Random data frame generator","code":""},{"path":"/reference/data_frame_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data frame generator — data_frame_of","text":"","code":"data_frame_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/data_frame_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data frame generator — data_frame_of","text":"... set unnamed generators. generated data frames build random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10.","code":""},{"path":"/reference/data_frame_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data frame generator — data_frame_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/data_frame_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data frame generator — data_frame_of","text":"","code":"data_frame_of(logical_(), date_()) |> show_example() #>    ...1 ...2       ...3       ...4  ...5       ...6  ...7 ...8       ...9 #> 1 FALSE TRUE 1549-09-25 2926-08-12 FALSE 2340-12-28 FALSE TRUE 1297-09-28 #> 2 FALSE TRUE 1549-09-25 2926-08-12 FALSE 2340-12-28 FALSE TRUE 1297-09-28 #> 3 FALSE TRUE 1549-09-25 2926-08-12 FALSE 2340-12-28 FALSE TRUE 1297-09-28 #> 4 FALSE TRUE 1549-09-25 2926-08-12 FALSE 2340-12-28 FALSE TRUE 1297-09-28 data_frame_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #>    ...1  ...2            ...3 ...4       ...5 #> 1  TRUE -3603 02:33:01.774824 1748 -130140184 #> 2  TRUE -3603 02:33:01.774824 1748 -130140184 #> 3  TRUE -3603 02:33:01.774824 1748 -130140184 #> 4  TRUE -3603 02:33:01.774824 1748 -130140184 #> 5  TRUE -3603 02:33:01.774824 1748 -130140184 #> 6  TRUE -3603 02:33:01.774824 1748 -130140184 #> 7  TRUE -3603 02:33:01.774824 1748 -130140184 #> 8  TRUE -3603 02:33:01.774824 1748 -130140184 #> 9  TRUE -3603 02:33:01.774824 1748 -130140184 #> 10 TRUE -3603 02:33:01.774824 1748 -130140184"},{"path":"/reference/date_.html","id":null,"dir":"Reference","previous_headings":"","what":"Date generators — date_","title":"Date generators — date_","text":"set generators date vectors.","code":""},{"path":"/reference/date_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date generators — date_","text":"","code":"date_(len = 1L, frac_na = 0)  date_bounded(left, right, len = 1L, frac_na = 0)  date_left_bounded(left, len = 1L, frac_na = 0)  date_right_bounded(right, len = 1L, frac_na = 0)"},{"path":"/reference/date_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date generators — date_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/date_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date generators — date_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/date_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date generators — date_","text":"","code":"date_() |> show_example() #> [1] \"1538-03-05\" date_bounded(   left = as.Date(\"2020-01-01\"),   right = as.Date(\"2020-01-10\") ) |> show_example() #> [1] \"2020-01-10\" date_(len = 10L, frac_na = 0.5) |> show_example() #>  [1] \"2797-05-11\" NA           NA           NA           NA           #>  [6] NA           \"1262-07-14\" \"1434-08-13\" \"2472-06-20\" NA"},{"path":"/reference/double_.html","id":null,"dir":"Reference","previous_headings":"","what":"Double generators — double_","title":"Double generators — double_","text":"set generators double vectors.","code":""},{"path":"/reference/double_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double generators — double_","text":"","code":"double_(len = 1L, frac_na = 0, frac_nan = 0, frac_inf = 0, big_dbl = FALSE)  double_bounded(left, right, len = 1L, frac_na = 0, frac_nan = 0, frac_inf = 0)  double_left_bounded(   left,   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_right_bounded(   right,   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_positive(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_negative(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_fractional(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )  double_whole(   len = 1L,   frac_na = 0,   frac_nan = 0,   frac_inf = 0,   big_dbl = FALSE )"},{"path":"/reference/double_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double generators — double_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. frac_nan approximate fraction NaN values included vector. fraction 0, default, include NaN values. fraction 0.5 include around 50% NaN values. frac_inf approximate fraction Inf -Inf values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_dbl doubles near maximum size included? may cause problems result computation results double larger maximum return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/double_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double generators — double_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/double_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double generators — double_","text":"","code":"double_() |> show_example() #> [1] 74587158 double_(big_dbl = TRUE) |> show_example() #> [1] -2.194733e+307 double_bounded(left = -5, right = 5) |> show_example() #> [1] 4.537221 double_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  211016554 -316348029    8330970 -778597599 -260972974 -911210566 #>  [7]  428441540         NA         NA  -70539008 double_(len = 10L, frac_nan = 0.2, frac_inf = 0.2) |> show_example() #>  [1] -732851986          0 -801018566        Inf        Inf        Inf #>  [7]  511812033        NaN        NaN -686845180"},{"path":"/reference/equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify length of multiple generators — equal_length","title":"Modify length of multiple generators — equal_length","text":"set length multiple generators .","code":""},{"path":"/reference/equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify length of multiple generators — equal_length","text":"","code":"equal_length(..., len = 1L)"},{"path":"/reference/equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify length of multiple generators — equal_length","text":"... Generators len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10.","code":""},{"path":"/reference/equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify length of multiple generators — equal_length","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify length of multiple generators — equal_length","text":"","code":"equal_length(a = integer_(), b = character_(), len = 10L) |> show_example() #> $a #>  [1]   428851 -3838652  4052666   249454 -3117285  -802713  9851837  7598828 #>  [9]  1037848        0 #>  #> $b #>  [1] \"t\"  \"g\"  \"g\"  \"\\\"\" \"S\"  \"a\"  \"G\"  \";\"  \"3\"  \"P\"  #>"},{"path":"/reference/factor_.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor generator — factor_","title":"Factor generator — factor_","text":"generator factor vectors.","code":""},{"path":"/reference/factor_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor generator — factor_","text":"","code":"factor_(len = 1L, frac_na = 0)"},{"path":"/reference/factor_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor generator — factor_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/factor_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor generator — factor_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/factor_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor generator — factor_","text":"","code":"factor_() |> show_example() #> [1] TB~/JMG #> Levels: TB~/JMG factor_(len = 10L, frac_na = 0.5) |> show_example() #> [1] NA"},{"path":"/reference/for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test properties of a function — for_all","title":"Test properties of a function — for_all","text":"Test properties function","code":""},{"path":"/reference/for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test properties of a function — for_all","text":"","code":"for_all(   ...,   property,   tests = get_tests(),   size = get_size(),   shrinks = get_shrinks(),   discards = get_discards() )"},{"path":"/reference/for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test properties of a function — for_all","text":"... Dots property function takes value generator calls expectation . tests number tests run. size maximum length generators. shrinks maximum number shrinks run shrinking value find smallest counterexample. discards maximum number discards permit running property.","code":""},{"path":"/reference/for_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test properties of a function — for_all","text":"","code":"library(testthat) for_all(   a = numeric_(),   b = numeric_(),   property = \\(a, b) expect_equal(a + b, b + a) ) for_all(   x = any_vector(),   property = \\(x) rev(x) |> rev() |> expect_equal(x) )"},{"path":"/reference/hms_.html","id":null,"dir":"Reference","previous_headings":"","what":"hms generators — hms_","title":"hms generators — hms_","text":"set generators hms vectors.","code":""},{"path":"/reference/hms_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hms generators — hms_","text":"","code":"hms_(len = 1L, frac_na = 0)  hms_bounded(left, right, len = 1L, frac_na = 0)  hms_left_bounded(left, len = 1L, frac_na = 0)  hms_right_bounded(right, len = 1L, frac_na = 0)"},{"path":"/reference/hms_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hms generators — hms_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/hms_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hms generators — hms_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/hms_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hms generators — hms_","text":"","code":"hms_() |> show_example() #> 04:12:18.163035 hms_bounded(   left = hms::as_hms(\"00:00:00\"),   right = hms::as_hms(\"12:00:00\") ) |> show_example() #> 11:59:50.620952 hms_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]       NA       NA       NA 46942.76 11282.11 43101.33       NA       NA #>  [9] 72945.75 56463.28"},{"path":"/reference/integer_.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer generators — integer_","title":"Integer generators — integer_","text":"set generators integer vectors.","code":""},{"path":"/reference/integer_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer generators — integer_","text":"","code":"integer_(len = 1L, frac_na = 0, big_int = FALSE)  integer_bounded(left, right, len = 1L, frac_na = 0)  integer_left_bounded(left, len = 1L, frac_na = 0, big_int = FALSE)  integer_right_bounded(right, len = 1L, frac_na = 0, big_int = FALSE)  integer_positive(len = 1L, frac_na = 0, big_int = FALSE)  integer_negative(len = 1L, frac_na = 0, big_int = FALSE)"},{"path":"/reference/integer_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer generators — integer_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_int integers near maximum size included? may cause problems result computation results integer larger maximum silently coerced double. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/integer_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer generators — integer_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/integer_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer generators — integer_","text":"","code":"integer_() |> show_example() #> [1] 9388 integer_(big_int = TRUE) |> show_example() #> [1] 275446026 integer_bounded(left = -5L, right = 5L) |> show_example() #> [1] 5 integer_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]  4415 -2897 -2268    NA    NA    NA    NA -6391   -70    NA"},{"path":"/reference/list_.html","id":null,"dir":"Reference","previous_headings":"","what":"List generator — list_","title":"List generator — list_","text":"generate lists contents corresponding values generated input generators.","code":""},{"path":"/reference/list_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List generator — list_","text":"","code":"list_(...)"},{"path":"/reference/list_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List generator — list_","text":"... Generators","code":""},{"path":"/reference/list_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List generator — list_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/list_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List generator — list_","text":"","code":"list_(integer_(), logical_()) |> show_example() #> [[1]] #> [1] 0 #>  #> [[2]] #> [1] TRUE #>  list_(a = any_vector(), b = any_vector()) |> show_example() #> $a #> [1] 3000 #>  #> $b #> [1] ?&0> #> Levels: ?&0> #>"},{"path":"/reference/list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable length list generator — list_of","title":"Variable length list generator — list_of","text":"generate lists values coming single input generator.","code":""},{"path":"/reference/list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable length list generator — list_of","text":"","code":"list_of(generator, len = 1L)"},{"path":"/reference/list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable length list generator — list_of","text":"generator Generator len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10.","code":""},{"path":"/reference/list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable length list generator — list_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable length list generator — list_of","text":"","code":"list_of(integer_(), len = 10L) |> show_example() #> [[1]] #> [1] -98 #>  #> [[2]] #> [1] 0 #>  #> [[3]] #> [1] -7079 #>  #> [[4]] #> [1] 4501 #>  #> [[5]] #> [1] 5257 #>  #> [[6]] #> [1] 4147 #>  #> [[7]] #> [1] 7371 #>  #> [[8]] #> [1] 4319 #>  #> [[9]] #> [1] -3566 #>  #> [[10]] #> [1] -9018 #>"},{"path":"/reference/logical_.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical generators — logical_","title":"Logical generators — logical_","text":"generator logical vectors.","code":""},{"path":"/reference/logical_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical generators — logical_","text":"","code":"logical_(len = 1L, frac_na = 0)"},{"path":"/reference/logical_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical generators — logical_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values.","code":""},{"path":"/reference/logical_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical generators — logical_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/logical_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical generators — logical_","text":"","code":"logical_() |> show_example() #> [1] FALSE logical_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]    NA  TRUE    NA    NA  TRUE FALSE FALSE    NA  TRUE    NA"},{"path":"/reference/numeric_.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric generators — numeric_","title":"Numeric generators — numeric_","text":"set generators numeric vectors. Numeric vectors can either integer double vectors.","code":""},{"path":"/reference/numeric_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric generators — numeric_","text":"","code":"numeric_(len = 1L, frac_na = 0, big_num = FALSE)  numeric_bounded(left, right, len = 1L, frac_na = 0)  numeric_left_bounded(left, len = 1L, frac_na = 0, big_num = FALSE)  numeric_right_bounded(right, len = 1L, frac_na = 0, big_num = FALSE)  numeric_positive(len = 1L, frac_na = 0, big_num = FALSE)  numeric_negative(len = 1L, frac_na = 0, big_num = FALSE)"},{"path":"/reference/numeric_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric generators — numeric_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. big_num integers doubles near maximum size included? may cause problems result computation results number larger maximum integer silently coerced double double return Inf. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/numeric_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric generators — numeric_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/numeric_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric generators — numeric_","text":"","code":"numeric_() |> show_example() #> [1] -364721697 numeric_(big_num = TRUE) |> show_example() #> [1] 714047200 numeric_bounded(left = -5L, right = 5L) |> show_example() #> [1] -4 numeric_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]   NA  631 8230   NA    0   NA 5174   NA   NA 2576"},{"path":"/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose between generators — one_of","title":"Randomly choose between generators — one_of","text":"Randomly choose generators","code":""},{"path":"/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose between generators — one_of","text":"","code":"one_of(..., prob = NULL)"},{"path":"/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose between generators — one_of","text":"... Generators choose prob vector probability weights obtaining elements vector sampled.","code":""},{"path":"/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose between generators — one_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose between generators — one_of","text":"","code":"one_of(integer_(), character_()) |> show_example() #> [1] -1628 one_of(constant(NULL), logical_(), prob = c(0.1, 0.9)) |> show_example() #> [1] TRUE"},{"path":"/reference/posixct_.html","id":null,"dir":"Reference","previous_headings":"","what":"POSIXct generators — posixct_","title":"POSIXct generators — posixct_","text":"set generators POSIXct vectors.","code":""},{"path":"/reference/posixct_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POSIXct generators — posixct_","text":"","code":"posixct_(len = 1L, frac_na = 0)  posixct_bounded(left, right, len = 1L, frac_na = 0)  posixct_left_bounded(left, len = 1L, frac_na = 0)  posixct_right_bounded(right, len = 1L, frac_na = 0)"},{"path":"/reference/posixct_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POSIXct generators — posixct_","text":"len Length generated vectors. len single number vectors length. len numeric vector length 2 produce vectors lengths minimum maximum, inclusive. example len = c(1L, 10L) produce vectors lengths 1 10. frac_na approximate fraction NA values included vector. fraction 0, default, include NA values. fraction 0.5 include around 50% NA values. left minimum possible value generated numbers, inclusive. right maximum possible value generated numbers, inclusive.","code":""},{"path":"/reference/posixct_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POSIXct generators — posixct_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/posixct_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"POSIXct generators — posixct_","text":"","code":"posixct_() |> show_example() #> [1] \"0134-06-30 15:24:42 LMT\" posixct_bounded(   left = as.POSIXct(\"2020-01-01 00:00:00\"),   right = as.POSIXct(\"2021-01-01 00:00:00\") ) |> show_example() #> [1] \"2020-02-26 19:12:11 PST\" posixct_(len = 10L, frac_na = 0.5) |> show_example() #>  [1]           NA           NA           NA -41358482940           NA #>  [6] -11736550670           NA           NA           NA           NA"},{"path":"/reference/show_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an example output of a generator — show_example","title":"Show an example output of a generator — show_example","text":"Show example output generator","code":""},{"path":"/reference/show_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an example output of a generator — show_example","text":"","code":"show_example(generator)"},{"path":"/reference/show_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an example output of a generator — show_example","text":"generator Generator","code":""},{"path":"/reference/tibble_.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble generator — tibble_","title":"Tibble generator — tibble_","text":"Construct tibble generators similar way dplyr::tibble.","code":""},{"path":"/reference/tibble_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble generator — tibble_","text":"","code":"tibble_(..., rows = c(1L, 10L))"},{"path":"/reference/tibble_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tibble generator — tibble_","text":"... set name-value pairs values vector generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10.","code":""},{"path":"/reference/tibble_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tibble generator — tibble_","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/tibble_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble generator — tibble_","text":"","code":"tibble_(a = integer_()) |> show_example() #> # A tibble: 10 x 1 #>        a #>    <int> #>  1 -1678 #>  2 -8280 #>  3  7806 #>  4  7454 #>  5  5977 #>  6  4631 #>  7 -2336 #>  8 -9224 #>  9 -9328 #> 10  3552 tibble_(a = integer_(), b = character_(), rows = 5L) |> show_example() #> # A tibble: 5 x 2 #>       a b           #>   <int> <chr>       #> 1 -7225 \"J.=\"       #> 2 -7384 \"\\\\\"        #> 3 -3337 \"cTxpAn~t\"  #> 4 -7426 \"U1>u \"     #> 5 -1633 \"}tjMw:K`h\""},{"path":"/reference/tibble_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Random tibble generator — tibble_of","title":"Random tibble generator — tibble_of","text":"Random tibble generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(..., rows = c(1L, 10L), cols = c(1L, 10L))"},{"path":"/reference/tibble_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random tibble generator — tibble_of","text":"... set unnamed generators. generated tibbles build random combinations generators. rows Number rows generated data frame. rows single number data frames number rows. rows numeric vector length 2 produce data frames rows minimum maximum, inclusive. example rows = c(1L, 10L) produce data frames rows 1 10. cols Number columns generated data frame. cols single number data frames number columns. cols numeric vector length 2 produce data frames columns minimum maximum, inclusive. example cols = c(1L, 10L) produce data frames columns 1 10.","code":""},{"path":"/reference/tibble_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random tibble generator — tibble_of","text":"hedgehog.internal.gen generator","code":""},{"path":"/reference/tibble_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random tibble generator — tibble_of","text":"","code":"tibble_of(logical_(), date_()) |> show_example() #> # A tibble: 1 x 3 #>   ...1       ...2  ...3       #>   <date>     <lgl> <date>     #> 1 1084-10-08 FALSE 2285-02-15 tibble_of(any_atomic(), rows = 10L, cols = 5L) |> show_example() #> # A tibble: 10 x 5 #>    ...1       ...2                ...3             ...4        ...5 #>    <date>     <dttm>              <chr>           <dbl>       <dbl> #>  1 2031-10-06 0100-12-12 18:40:53 \"dhkR\\\\yp\" 922539947. -183247702. #>  2 2031-10-06 0100-12-12 18:40:53 \"dhkR\\\\yp\" 922539947. -183247702. #>  3 2031-10-06 0100-12-12 18:40:53 \"dhkR\\\\yp\" 922539947. -183247702. #>  4 2031-10-06 0100-12-12 18:40:53 \"dhkR\\\\yp\" 922539947. -183247702. #>  5 2031-10-06 0100-12-12 18:40:53 \"dhkR\\\\yp\" 922539947. -183247702. #>  6 2031-10-06 0100-12-12 18:40:53 \"dhkR\\\\yp\" 922539947. -183247702. #>  7 2031-10-06 0100-12-12 18:40:53 \"dhkR\\\\yp\" 922539947. -183247702. #>  8 2031-10-06 0100-12-12 18:40:53 \"dhkR\\\\yp\" 922539947. -183247702. #>  9 2031-10-06 0100-12-12 18:40:53 \"dhkR\\\\yp\" 922539947. -183247702. #> 10 2031-10-06 0100-12-12 18:40:53 \"dhkR\\\\yp\" 922539947. -183247702."}]
